<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[csce606_github]]></title>
      <url>/2017/09/06/csce606-github/</url>
      <content type="html"><![CDATA[<p>在已经建好organization 和 team的情况下，可以按照如下步骤进行协同开发</p>
<p>####第一次提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">git clone https://github.tamu.edu/HelloWorld/TA_Assignment_System.git</div><div class="line"></div><div class="line">// change to dev branch</div><div class="line">git checkout dev</div><div class="line"></div><div class="line">//check what&apos;s current branch</div><div class="line">git branch</div><div class="line"></div><div class="line">//after add or modified some files</div><div class="line">git add file1.txt file2.txt file3.txt</div><div class="line"></div><div class="line">//check file status </div><div class="line">git status</div><div class="line"></div><div class="line">//pull the latest dev version from remote</div><div class="line">//you should always pull before push</div><div class="line">git pull origin dev</div><div class="line"></div><div class="line">//commit files and add explanation</div><div class="line">git commit -m &quot;your explanation&quot;</div><div class="line"></div><div class="line">//push to remote</div><div class="line">git push origin dev</div></pre></td></tr></table></figure>
<p>####以后的提交<br>只需要上面步骤的后面几步了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git add file1.txt file2.txt file3.txt</div><div class="line"></div><div class="line">git pull origin dev</div><div class="line"></div><div class="line">git commit -m &quot;your explanation&quot;</div><div class="line"></div><div class="line">git push origin dev</div></pre></td></tr></table></figure>
<p>##常用git命令</p>
<hr>
<ul>
<li>add/delete files</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//add specific files </div><div class="line">git add [file1] [file2] ...</div><div class="line"></div><div class="line">//add current dir including its subdirs</div><div class="line">git add [dir]</div><div class="line"></div><div class="line">//add all files in current dir</div><div class="line">git add .</div><div class="line"></div><div class="line">//delete specific files</div><div class="line">//delete files in your disk and index area</div><div class="line">git rm -f [file1] [file2] ...</div><div class="line"></div><div class="line">//delete files in index area but they remains in your disk</div><div class="line">git rm --cached [file1] [file2] ...</div></pre></td></tr></table></figure>
<ul>
<li>branch</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//list all local branches</div><div class="line">git branch</div><div class="line"></div><div class="line">//list all remote branches</div><div class="line">git branch -r</div><div class="line"></div><div class="line">//list all local &amp; remote branches</div><div class="line">git branch -a</div><div class="line"></div><div class="line">//create a new branch, but remain in the original branch</div><div class="line">git branch [branch-name]</div><div class="line"></div><div class="line">//create a new branch and change to new branch</div><div class="line">git checkout -b [branch]</div><div class="line"></div><div class="line">//change to specific branch</div><div class="line">git checkout [branch-name]</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Detail]]></title>
      <url>/2017/08/12/Detail/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[DFSQuestions]]></title>
      <url>/2017/08/01/DFSQuestions/</url>
      <content type="html"><![CDATA[<h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><hr>
<a id="more"></a>
<ul>
<li>200 Number of islands</li>
<li>110 Balanced binary tree</li>
<li>124 Binary Tree Maximum Path Sum</li>
<li>99 Recover Binary Search Tree</li>
<li>133 Clone Graph</li>
<li>114 Flatten Binary Tree to Linked List</li>
<li>199 Binary Tree Right Side View</li>
<li>301 Remove Invalid Parentheses</li>
<li>337 House Robber III</li>
<li>339 Nested List Weight Sum</li>
</ul>
<h3 id="200-Number-of-islands"><a href="#200-Number-of-islands" class="headerlink" title="200 Number of islands"></a>200 Number of islands</h3><p>思路： 求多少个联通块，dfs，bfs，unionfind</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public void dfs(int x,int y,boolean[][]vis,char[][]grid)&#123;</div><div class="line">        if(x&lt;0||y&lt;0||x&gt;=grid.length||y&gt;=grid[0].length||vis[x][y]||grid[x][y]==&apos;0&apos;)</div><div class="line">            return;</div><div class="line">        vis[x][y]=true;</div><div class="line">        dfs(x+1,y,vis,grid);</div><div class="line">        dfs(x-1,y,vis,grid);</div><div class="line">        dfs(x,y+1,vis,grid);</div><div class="line">        dfs(x,y-1,vis,grid);</div><div class="line">    &#125;</div><div class="line">    public int numIslands(char[][] grid) &#123;</div><div class="line">        if(grid.length==0||grid[0].length==0)</div><div class="line">            return 0;</div><div class="line">        int m = grid.length,n=grid[0].length;</div><div class="line">        int cnt=0;</div><div class="line">        boolean [][]vis=new boolean[m][n];</div><div class="line">        for(int i=0;i&lt;m;++i)&#123;</div><div class="line">            for(int j=0;j&lt;n;++j)&#123;</div><div class="line">                if(grid[i][j]==&apos;1&apos; &amp;&amp; !vis[i][j])&#123;</div><div class="line">                    cnt++;</div><div class="line">                    dfs(i,j,vis,grid);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return cnt;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="110-Balanced-binary-tree"><a href="#110-Balanced-binary-tree" class="headerlink" title="110 Balanced binary tree"></a>110 Balanced binary tree</h3><p>思路： 树平衡这种题一定要计算高度的。笨点的每个结点都要查左右子树高度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public int getHeight(TreeNode root)&#123;</div><div class="line">        if(root==null)</div><div class="line">            return 0;</div><div class="line">        int l = getHeight(root.left);</div><div class="line">        int r = getHeight(root.right);</div><div class="line">        if(l==-1||r==-1||Math.abs(l-r)&gt;1)</div><div class="line">            return -1;</div><div class="line">        return Math.max(l,r)+1;</div><div class="line">    &#125;</div><div class="line">    public boolean isBalanced(TreeNode root) &#123;</div><div class="line">        return getHeight(root)!=-1;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="124-Binary-Tree-Maximum-Path-Sum"><a href="#124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="124 Binary Tree Maximum Path Sum"></a>124 Binary Tree Maximum Path Sum</h3><p>思路： 第一次做的时候一脸懵逼，其实仔细想想，我们需要借助一个dfs函数返回一个值供父节点使用，这个值因该是math.max(cur.val,cur.val+left,cur.val+right),不能有cur.val+left+right,这样就会cross，不能再向上拓展了。全局变量记录这四项的最大值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int dfs(TreeNode root,int []res)&#123;</div><div class="line">       if(root==null)</div><div class="line">           return 0;</div><div class="line">       int l=dfs(root.left,res);</div><div class="line">       int r = dfs(root.right,res);</div><div class="line">       int ans=Math.max(l+root.val,Math.max(r+root.val,root.val));</div><div class="line">       res[0]=Math.max(Math.max(ans,res[0]),l+r+root.val);</div><div class="line">       return ans;</div><div class="line">   &#125;</div><div class="line">   public int maxPathSum(TreeNode root) &#123;</div><div class="line">       int []res=new int[1];</div><div class="line">       res[0]=Integer.MIN_VALUE;</div><div class="line">       dfs(root,res);</div><div class="line">       return res[0];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="99-Recover-Binary-Search-Tree"><a href="#99-Recover-Binary-Search-Tree" class="headerlink" title="99 Recover Binary Search Tree"></a>99 Recover Binary Search Tree</h3><p>思路： 中序遍历，然后会发现两次pre.val&gt;root.val,你画画图试试，第一次的异常点事pre，第二个异常点事root。笨一点就可以先把值打印，然后就排序，赋值回去。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public TreeNode first=null;</div><div class="line">    public TreeNode second=null;</div><div class="line">    public TreeNode pre=null;</div><div class="line"></div><div class="line">    public void inorder(TreeNode root)&#123;</div><div class="line">        if(root==null)</div><div class="line">            return;</div><div class="line">        inorder(root.left);</div><div class="line">        if(pre!=null)&#123;</div><div class="line">            if(pre.val&gt;root.val)&#123;</div><div class="line">                if(first==null)</div><div class="line">                    first=pre;</div><div class="line">                second=root;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        pre=root;</div><div class="line">        inorder(root.right);</div><div class="line">        //pre=root;</div><div class="line">    &#125;</div><div class="line">    public void recoverTree(TreeNode root)&#123;</div><div class="line">        inorder(root);</div><div class="line">        if(first!=null &amp;&amp; second!=null)&#123;</div><div class="line">            int tmp = first.val;</div><div class="line">            first.val=second.val;</div><div class="line">            second.val=tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="133-Clone-Graph"><a href="#133-Clone-Graph" class="headerlink" title="133 Clone Graph"></a>133 Clone Graph</h3><p>思路： recursive 的方法太简单，简单说说bfs的way，遍历图，如果map里没有，就创建新的node，否则不创建，但是最后都要关联起来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">        Map&lt;UndirectedGraphNode,UndirectedGraphNode&gt;map=new HashMap&lt;&gt;();</div><div class="line">        if(node==null)</div><div class="line">            return null;</div><div class="line">        Queue&lt;UndirectedGraphNode&gt;q=new LinkedList&lt;&gt;();</div><div class="line">        q.offer(node);</div><div class="line">        map.put(node,new UndirectedGraphNode(node.label));</div><div class="line">        while(!q.isEmpty())&#123;</div><div class="line">            UndirectedGraphNode top = q.poll();</div><div class="line">            for(UndirectedGraphNode ne:top.neighbors)&#123;</div><div class="line">                if(!map.containsKey(ne))&#123;</div><div class="line">                    map.put(ne,new UndirectedGraphNode(ne.label));</div><div class="line">                    q.offer(ne);</div><div class="line">                &#125;</div><div class="line">                map.get(top).neighbors.add(map.get(ne));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return map.get(node);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //recursive way</div><div class="line">    </div><div class="line">    Map&lt;UndirectedGraphNode,UndirectedGraphNode&gt;map=new HashMap&lt;&gt;();</div><div class="line">    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">        if(node==null)</div><div class="line">            return null;</div><div class="line">        if(!map.containsKey(node))&#123;</div><div class="line">            map.put(node,new UndirectedGraphNode(node.label));</div><div class="line">            for(UndirectedGraphNode child:node.neighbors)</div><div class="line">                map.get(node).neighbors.add(cloneGraph(child));</div><div class="line">        &#125;</div><div class="line">        return map.get(node);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="114-Flatten-Binary-Tree-to-Linked-List"><a href="#114-Flatten-Binary-Tree-to-Linked-List" class="headerlink" title="114 Flatten Binary Tree to Linked List"></a>114 Flatten Binary Tree to Linked List</h3><p>思路：后续遍历，仔细揣摩一下，当然，也可以iterative</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">TreeNode pre=null;</div><div class="line">    public void flatten(TreeNode root) &#123;</div><div class="line">        if(root==null)</div><div class="line">            return;</div><div class="line">        flatten(root.right);</div><div class="line">        flatten(root.left);</div><div class="line">        root.right=pre;</div><div class="line">        root.left=null;</div><div class="line">        pre=root;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    public void flatten(TreeNode root) &#123;</div><div class="line">        if(root==null)</div><div class="line">            return;</div><div class="line">        TreeNode node = root;</div><div class="line">        while(node!=null)&#123;</div><div class="line">            if(node.left!=null)&#123;</div><div class="line">                TreeNode cur = node.left;</div><div class="line">                while(cur.right!=null)</div><div class="line">                    cur=cur.right;</div><div class="line">                cur.right=node.right;</div><div class="line">                node.right=node.left;</div><div class="line">                node.left=null;</div><div class="line">            &#125;</div><div class="line">            node=node.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="199-Binary-Tree-Right-Side-View"><a href="#199-Binary-Tree-Right-Side-View" class="headerlink" title="199 Binary Tree Right Side View"></a>199 Binary Tree Right Side View</h3><p>思路： 和level order很像, bfs的方法我就懒得写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public void dfs(List&lt;Integer&gt;res,TreeNode root,int level)&#123;</div><div class="line">       if(root==null)</div><div class="line">           return;</div><div class="line">       if(level&gt;=res.size())</div><div class="line">           res.add(root.val);</div><div class="line">       dfs(res,root.right,level+1);</div><div class="line">       dfs(res,root.left,level+1);</div><div class="line">   &#125;</div><div class="line">   public List&lt;Integer&gt; rightSideView(TreeNode root) &#123;</div><div class="line">       List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">       dfs(res,root,0);</div><div class="line">       return res;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="301-Remove-Invalid-Parentheses"><a href="#301-Remove-Invalid-Parentheses" class="headerlink" title="301 Remove Invalid Parentheses"></a>301 Remove Invalid Parentheses</h3><p>思路： bfs，暴力枚举每个删除的位置。dfs也可，但是还没掌握，太精妙了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public boolean isValid(String s)&#123;</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        int cnt=0;</div><div class="line">        for(char c:ss)&#123;</div><div class="line">            if(c==&apos;(&apos;)</div><div class="line">                cnt++;</div><div class="line">            else if(c==&apos;)&apos;)</div><div class="line">                cnt--;</div><div class="line">            if(cnt&lt;0)</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return cnt==0;</div><div class="line">    &#125;</div><div class="line">    public List&lt;String&gt; removeInvalidParentheses(String s) &#123;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        if(isValid(s))&#123;</div><div class="line">            res.add(s);</div><div class="line">            return res;</div><div class="line">        &#125;</div><div class="line">        Queue&lt;String&gt;q=new LinkedList&lt;&gt;();</div><div class="line">        q.offer(s);</div><div class="line">        Map&lt;String,Boolean&gt;vis=new HashMap&lt;&gt;();</div><div class="line">        boolean next=true;</div><div class="line">        vis.put(s,true);</div><div class="line">        while(next &amp;&amp; !q.isEmpty())&#123;</div><div class="line">            int size=q.size();</div><div class="line">            while(size -- &gt;0)&#123;</div><div class="line">                String top = q.poll();</div><div class="line">                int len =top.length();</div><div class="line">                for(int i=0;i&lt;len;++i)&#123;</div><div class="line">                    if(s.charAt(i)==&apos;(&apos;||s.charAt(i)==&apos;)&apos;)&#123;</div><div class="line">                        String sub = top.substring(0,i)+top.substring(i+1);</div><div class="line">                        if(!vis.containsKey(sub))&#123;</div><div class="line">                            vis.put(sub,true);</div><div class="line">                            q.offer(sub);</div><div class="line">                            if(isValid(sub))&#123;</div><div class="line">                                next=false;</div><div class="line">                                res.add(sub);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="337-House-Robber-III"><a href="#337-House-Robber-III" class="headerlink" title="337 House Robber III"></a>337 House Robber III</h3><p>思路： dfs 返回一个长度为2的数组，一个代表rob了当前node，一个代表没有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public int[]dfsRob(TreeNode root)&#123;</div><div class="line">        if(root==null)</div><div class="line">            return new int[]&#123;0,0&#125;;</div><div class="line">        int []res=new int[2];</div><div class="line">        //res[0] rob root; res[1] not rob root;</div><div class="line">        int []l = dfsRob(root.left);</div><div class="line">        int []r =dfsRob(root.right);</div><div class="line">        res[0]=l[1]+r[1]+root.val;</div><div class="line">        //好好想想，没选中当前node，不代表最大值一定是选左子节点，右子节点。</div><div class="line">        res[1]=Math.max(l[0],l[1])+Math.max(r[0],r[1]);</div><div class="line">        return res;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public int rob(TreeNode root) &#123;</div><div class="line">        int []res=dfsRob(root);</div><div class="line">        return Math.max(res[0],res[1]);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="339-Nested-List-Weight-Sum"><a href="#339-Nested-List-Weight-Sum" class="headerlink" title="339 Nested List Weight Sum"></a>339 Nested List Weight Sum</h3><p>思路：普通的level by level 求和</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public void dfs(List&lt;NestedInteger&gt;nestedList,int[]res,int level)&#123;</div><div class="line">        int n=nestedList.size();</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            if(nestedList.get(i).isInteger())&#123;</div><div class="line">                res[0]+=level*nestedList.get(i).getInteger();</div><div class="line">            &#125;else&#123;</div><div class="line">                dfs(nestedList.get(i).getList(),res,level+1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public int depthSum(List&lt;NestedInteger&gt; nestedList) &#123;</div><div class="line">        int []res=new int[1];</div><div class="line">        dfs(nestedList,res,1);</div><div class="line">        return res[0];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BFSQuestions]]></title>
      <url>/2017/07/23/BFSQuestions/</url>
      <content type="html"><![CDATA[<h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><hr>
<a id="more"></a>
<ul>
<li>199 Binary Tree Right Side View</li>
</ul>
<p>s<br>思路： dfs 和  bfs，其实和level order的两种差不多</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public void dfs(TreeNode node,List&lt;Integer&gt;res,int level)&#123;</div><div class="line">        if(node==null)</div><div class="line">            return;</div><div class="line">        if(level&gt;=res.size())</div><div class="line">            res.add(node.val);</div><div class="line">        dfs(node.right,res,level+1);</div><div class="line">        dfs(node.left,res,level+1);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public List&lt;Integer&gt; rightSideView(TreeNode root) &#123;</div><div class="line">        List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        dfs(root,res,0);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    public List&lt;Integer&gt;rightSideViewByBFS(TreeNode root)&#123;</div><div class="line">        List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        if(root==null)</div><div class="line">            return res;</div><div class="line">        Queue&lt;TreeNode&gt;q=new LinkedList&lt;&gt;();</div><div class="line">        while(!q.isEmpty())&#123;</div><div class="line">            int size= q.size();</div><div class="line">            while(size --&gt;0)&#123;</div><div class="line">                TreeNode top=q.poll();</div><div class="line">                if(size==0)</div><div class="line">                    res.add(top.val);</div><div class="line">                if(top.left!=null)</div><div class="line">                    q.offer(top.left);</div><div class="line">                if(top.right!=null)</div><div class="line">                    q.offer(top.right);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Expectations"><a href="#Expectations" class="headerlink" title="Expectations"></a>Expectations</h1><hr>
<ul>
<li>改天把internship所涉及到的tech总结一下。</li>
<li>要对internship的project表现出激情</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/RlEdIBHmvtJYrCdt4QOs3u21KcLmUZBoNYpvbY-CRkN6W2giTU9nMR68LX6EOYNCYfJb97nxn_vNTNi-zfPnxIxoexH6QyeW9jDdDvM6qOu_BSvUEdGgIjvFei3LSR_tbW33jDH0iQ" alt="Sandford Univ"></p>
<hr>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BacktrackingQuestions]]></title>
      <url>/2017/07/23/BacktrackingQuestions/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>10 Regular Expression Matching</li>
<li>17 Letter Combinations of a Phone Number</li>
<li>22     Generate Parentheses</li>
<li>46     Permutations</li>
<li>89 Gray Code</li>
<li>79     Word Search</li>
<li>140 Word Break II</li>
<li>78     N-Queens</li>
<li>37 Sudoku Solver</li>
<li>52 N-Queens II</li>
<li>93 Restore IP Addresses</li>
<li>131 Palindrome Partitioning</li>
<li>44 Wildcard Matching</li>
<li>60 Permutation Sequence</li>
<li>212 Word Search II</li>
<li>216 Combination Sum III</li>
<li>47 Permutations II</li>
<li>357 Count Numbers with Unique Digits</li>
<li>90 Subsets II</li>
<li>291 Word Pattern II</li>
<li>320 Generalized Abbreviation </li>
<li>401 Binary Watch</li>
<li>40 Combination Sum II</li>
<li>211 Add and Search Word - Data structure design</li>
<li>254 Factor Combinations </li>
<li>267 Palindrome Permutation II </li>
<li>351 Android Unlock Patterns </li>
<li>294 filp games II</li>
<li>526 Beautiful Arrangement</li>
</ul>
<hr>
<h3 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17 Letter Combinations of a Phone Number"></a>17 Letter Combinations of a Phone Number</h3><p>思路：先建立数字到字符的映射，然后回溯解决,  可以用map也可以用String 数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public void dfs(List&lt;String&gt;res,String digits,String[]num,int ind,String path)&#123;</div><div class="line">        if(ind==digits.length())&#123;</div><div class="line">            res.add(path);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(ind&gt;digits.length())</div><div class="line">            return;</div><div class="line">        for(int i=0;i&lt;num[digits.charAt(ind)-&apos;2&apos;].length();++i)&#123;</div><div class="line">            dfs(res,digits,num,ind+1,path+num[digits.charAt(ind)-&apos;2&apos;].charAt(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;String&gt; letterCombinations(String digits) &#123;</div><div class="line">        String []num = &#123;&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;,&quot;jkl&quot;,&quot;mno&quot;,&quot;pqrs&quot;,&quot;tuv&quot;,&quot;wxyz&quot;&#125;;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        if(digits.isEmpty())</div><div class="line">            return res;</div><div class="line">        dfs(res,digits,num,0,&quot;&quot;);</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22 Generate Parentheses"></a>22 Generate Parentheses</h3><p>思路： 可以用回溯法或者模拟出栈的过程，可以了解下卡塔兰数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public List&lt;String&gt; generateParenthesis(int n) &#123;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        generateParenthesis(n,0,0,res,&quot;&quot;);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void generateParenthesis(int n,int left,int right,List&lt;String&gt;res,String path)&#123;</div><div class="line">        if(left==n &amp;&amp; right==n)&#123;</div><div class="line">            res.add(path);</div><div class="line">            return ;</div><div class="line">        &#125;</div><div class="line">        if(left&lt;n)</div><div class="line">            generateParenthesis(n,left+1,right,res,path+&quot;(&quot;);</div><div class="line">        if(right&lt;left)</div><div class="line">            generateParenthesis(n,left,right+1,res,path+&quot;)&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    public void dfs(List&lt;String&gt;res,String path,Stack&lt;Integer&gt;input,Stack&lt;Integer&gt;stk,int n)&#123;</div><div class="line">        if(path.length()==2*n)&#123;</div><div class="line">            res.add(path);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(!input.isEmpty())&#123;</div><div class="line">            int top = input.pop();</div><div class="line">            stk.push(top);</div><div class="line">            dfs(res,path+&quot;(&quot;,input,stk,n);</div><div class="line">            stk.pop();</div><div class="line">            input.push(top);</div><div class="line">        &#125;</div><div class="line">        if(!stk.isEmpty())&#123;</div><div class="line">            int top = stk.pop();</div><div class="line">            dfs(res,path+&quot;)&quot;,input,stk,n);</div><div class="line">            stk.push(top);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;String&gt;generateParenthesis(int n)&#123;</div><div class="line">        Stack&lt;Integer&gt; input=new Stack&lt;&gt;();</div><div class="line">        Stack&lt;Integer&gt; stk=new Stack&lt;&gt;();</div><div class="line">        for(int i=n;i&gt;=1;i--)</div><div class="line">            input.push(i);</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        dfs(res,&quot;&quot;,input,stk,n);</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46 Permutations"></a>46 Permutations</h3><p>思路： 每次都从第一个元素开始，然后判断是不是已经装进path里了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public void dfs(int[]nums,List&lt;List&lt;Integer&gt;&gt;res,List&lt;Integer&gt;path)&#123;</div><div class="line">        if(path.size()==nums.length)&#123;</div><div class="line">            res.add(new ArrayList&lt;&gt;(path));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=0;i&lt;nums.length;++i)&#123;</div><div class="line">            boolean valid=true;</div><div class="line">            for(int x:path)&#123;</div><div class="line">                if(x==nums[i])&#123;</div><div class="line">                    valid=false;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if(valid)&#123;</div><div class="line">                path.add(nums[i]);</div><div class="line">                dfs(nums,res,path);</div><div class="line">                path.remove(path.size()-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        List&lt;Integer&gt;path=new ArrayList&lt;&gt;();</div><div class="line">        dfs(nums,res,path);</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="89-Gray-Code"><a href="#89-Gray-Code" class="headerlink" title="89 Gray Code"></a>89 Gray Code</h3><p>思路： 有计算公式，也可以观察规律，每次都是从以后的数组的后面开始|一个(1&lt;&lt;i)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public List&lt;Integer&gt; grayCode(int n) &#123;</div><div class="line">        List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        res.add(0);</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            int size=res.size();</div><div class="line">            for(int j=size-1;j&gt;=0;--j)&#123;</div><div class="line">                res.add(res.get(j)|(1&lt;&lt;i));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="79-Word-Search"><a href="#79-Word-Search" class="headerlink" title="79 Word Search"></a>79 Word Search</h3><p>思路： 就是四个方向分别去找，注意不能访问已经访问过的点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public boolean exist(char[][]board,int x,int y,String word,int ind,boolean[][]vis,int[]dx,int[]dy)&#123;</div><div class="line">        if(word.length()==ind)</div><div class="line">            return true;</div><div class="line">        if(x&gt;=board.length||x&lt;0||y&gt;=board[0].length||y&lt;0||vis[x][y]||word.charAt(ind)!=board[x][y])</div><div class="line">            return false;</div><div class="line">        vis[x][y]=true;</div><div class="line">        for(int k=0;k&lt;4;++k)&#123;</div><div class="line">            int nx =x+dx[k];</div><div class="line">            int ny =y+dy[k];</div><div class="line">            if(exist(board,nx,ny,word,ind+1,vis,dx,dy))</div><div class="line">                return true;</div><div class="line">        &#125;</div><div class="line">        vis[x][y]=false;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    public boolean exist(char[][] board, String word) &#123;</div><div class="line">        if(board.length==0||board[0].length==0)</div><div class="line">            return false;</div><div class="line">        int m = board.length,n=board[0].length;</div><div class="line">        boolean [][]vis = new boolean[m][n];</div><div class="line">        int []dx=&#123;1,-1,0,0&#125;;</div><div class="line">        int []dy =&#123;0,0,1,-1&#125;;</div><div class="line">        for(int i=0;i&lt;m;++i)&#123;</div><div class="line">            for(int j=0;j&lt;n;++j)&#123;</div><div class="line">                if(exist(board,i,j,word,0,vis,dx,dy))</div><div class="line">                    return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="212-Word-Search-II"><a href="#212-Word-Search-II" class="headerlink" title="212 Word Search II"></a>212 Word Search II</h3><p>思路： 把这些words装进trie里，然后利用trie进行查找,主要注意的是dfs里的顺序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">class TrieNode &#123;</div><div class="line">    public boolean isEnd;</div><div class="line">    public TrieNode []children=null;</div><div class="line">    public TrieNode()&#123;</div><div class="line">        children=new TrieNode[26];</div><div class="line">        isEnd=false;</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">class Trie &#123;</div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    private TrieNode root;</div><div class="line">    public Trie() &#123;</div><div class="line">        root=new TrieNode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TrieNode getRoot()&#123;</div><div class="line">        return root;</div><div class="line">    &#125;</div><div class="line">    /** Inserts a word into the trie. */</div><div class="line">    public void insert(String word) &#123;</div><div class="line">        char []ss=word.toCharArray();</div><div class="line">        TrieNode cur=root;</div><div class="line">        for(char c:ss)&#123;</div><div class="line">            TrieNode node=cur.children[c-&apos;a&apos;];</div><div class="line">            if(node==null)&#123;</div><div class="line">                cur.children[c-&apos;a&apos;]=new TrieNode();</div><div class="line">            &#125;</div><div class="line">            cur=cur.children[c-&apos;a&apos;];</div><div class="line">        &#125;</div><div class="line">        cur.isEnd=true;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class Solution &#123;</div><div class="line">  public void dfs(TrieNode node,int x,int y,char[][]board,String path,List&lt;String&gt;res)&#123;</div><div class="line">        if(node!=null &amp;&amp; node.isEnd)&#123;</div><div class="line">            res.add(path);</div><div class="line">            node.isEnd=false;</div><div class="line">        &#125;</div><div class="line">        if(node==null)</div><div class="line">            return;</div><div class="line">        if(x&lt;0||x&gt;=board.length||y&lt;0||y&gt;=board[0].length||board[x][y]==&apos;*&apos;)</div><div class="line">            return;</div><div class="line">        char c = board[x][y];</div><div class="line">        board[x][y]=&apos;*&apos;;</div><div class="line">        dfs(node.children[c-&apos;a&apos;],x+1,y,board,path+c,res);</div><div class="line">        dfs(node.children[c-&apos;a&apos;],x-1,y,board,path+c,res);</div><div class="line">        dfs(node.children[c-&apos;a&apos;],x,y+1,board,path+c,res);</div><div class="line">        dfs(node.children[c-&apos;a&apos;],x,y-1,board,path+c,res);</div><div class="line">        board[x][y]=c;</div><div class="line">    &#125;</div><div class="line">    public List&lt;String&gt; findWords(char[][] board, String[] words) &#123;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        if(board.length==0||board[0].length==0||words.length==0)</div><div class="line">            return res;</div><div class="line">        int m = board.length,n=board[0].length;</div><div class="line">        Trie t = new Trie();</div><div class="line">        for(String str:words)</div><div class="line">            t.insert(str);</div><div class="line">        for(int i=0;i&lt;m;++i)&#123;</div><div class="line">            for(int j=0;j&lt;n;++j)&#123;</div><div class="line">                dfs(t.getRoot(),i,j,board,&quot;&quot;,res);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="140-Word-Break-II"><a href="#140-Word-Break-II" class="headerlink" title="140 Word Break II"></a>140 Word Break II</h3><p>思路： 递归，然后用dp来memorize。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public List&lt;String&gt;wordBreak(String s,Set&lt;String&gt;sets,Map&lt;String,List&lt;String&gt;&gt;map)&#123;</div><div class="line">       if(map.containsKey(s))</div><div class="line">           return map.get(s);</div><div class="line">       List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">       if(s.isEmpty())&#123;</div><div class="line">           res.add(&quot;&quot;);</div><div class="line">           return res;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       int nn=s.length();</div><div class="line">       for(int i=1;i&lt;=nn;++i)&#123;</div><div class="line">           String sub=s.substring(0,i);</div><div class="line">           if(sets.contains(sub))&#123;</div><div class="line">               //List&lt;String&gt;tmp = wordBreak(s.substring(i),sets,map);</div><div class="line">               List&lt;String&gt;tmp = wordBreak(s.substring(i),sets,map);</div><div class="line">               for(String str:tmp)&#123;</div><div class="line">                   res.add(sub+(str.isEmpty()?&quot;&quot;:&quot; &quot;)+str);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       map.put(s,res);</div><div class="line">       return res;</div><div class="line">   &#125;</div><div class="line">   public List&lt;String&gt; wordBreak(String s, List&lt;String&gt; wordDict) &#123;</div><div class="line">       Set&lt;String&gt;sets=new HashSet&lt;&gt;(wordDict);</div><div class="line">       Map&lt;String,List&lt;String&gt;&gt;map=new HashMap&lt;&gt;();</div><div class="line">       return wordBreak(s,sets,map);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="51-N-Queens-amp-amp-52"><a href="#51-N-Queens-amp-amp-52" class="headerlink" title="51 N-Queens &amp;&amp; 52"></a>51 N-Queens &amp;&amp; 52</h3><p>思路： 一个数组记录每行要选的是哪个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public boolean check(int[]dp,int ind)&#123;</div><div class="line">        //check whether it has conflict with k-1 number</div><div class="line">        for(int i=0;i&lt;ind;++i)&#123;</div><div class="line">            if(dp[i]==dp[ind]||(ind-i)==Math.abs(dp[i]-dp[ind]))</div><div class="line">                return false;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void dfs(int[]dp,List&lt;List&lt;String&gt;&gt;res,int ind,int n)&#123;</div><div class="line">        if(ind==n)&#123;</div><div class="line">            List&lt;String&gt;tmp=new ArrayList&lt;&gt;();</div><div class="line">            for(int ii=0;ii&lt;n;++ii)&#123;</div><div class="line">                char []ss = new char[n];</div><div class="line">                Arrays.fill(ss,&apos;.&apos;);</div><div class="line">                ss[dp[ii]]=&apos;Q&apos;;</div><div class="line">                tmp.add(String.valueOf(ss));</div><div class="line">            &#125;</div><div class="line">            res.add(tmp);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            dp[ind]=i;</div><div class="line">            if(check(dp,ind))</div><div class="line">                dfs(dp,res,ind+1,n);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;String&gt;&gt; solveNQueens(int n) &#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        int []dp=new int[n];</div><div class="line">        Arrays.fill(dp,-1);</div><div class="line">        dfs(dp,res,0,n);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //52 queens II</div><div class="line">    public void dfs(int n,int []dp,int[]res,int ind)&#123;</div><div class="line">        if(ind==n)&#123;</div><div class="line">            res[0]++;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            dp[ind]=i;</div><div class="line">            if(check(dp,ind))</div><div class="line">                dfs(n,dp,res,ind+1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int totalNQueens(int n) &#123;</div><div class="line">        int []dp=new int[n];</div><div class="line">        int []res=&#123;0&#125;;</div><div class="line">        Arrays.fill(dp,-1);</div><div class="line">        dfs(n,dp,res,0);</div><div class="line">        return res[0];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78 Subsets"></a>78 Subsets</h3><p>思路： bitmap， dfs， iterative</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        int n = nums.length,m=1&lt;&lt;n;</div><div class="line">        for(int i=0;i&lt;m;++i)</div><div class="line">            res.add(new ArrayList&lt;&gt;());</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            for(int j=0;j&lt;m;++j)&#123;</div><div class="line">                if(((j&gt;&gt;i)&amp;0x1)!=0)</div><div class="line">                    res.get(j).add(nums[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    public void dfs78(List&lt;List&lt;Integer&gt;&gt;res,List&lt;Integer&gt;sub,int[]nums,int ind)&#123;</div><div class="line">        res.add(new ArrayList&lt;&gt;(sub));</div><div class="line">        for(int i=ind;i&lt;nums.length;++i)&#123;</div><div class="line">            sub.add(nums[i]);</div><div class="line">            dfs78(res,sub,nums,i+1);</div><div class="line">            sub.remove(sub.size()-1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        List&lt;Integer&gt;sub=new ArrayList&lt;&gt;();</div><div class="line">        dfs78(res,sub,nums,0);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        int n = nums.length;</div><div class="line">        if(n==0)</div><div class="line">            return res;</div><div class="line">        res.add(new ArrayList&lt;&gt;());</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            int size=res.size();</div><div class="line">            for(int j=0;j&lt;size;++j)&#123;</div><div class="line">                List&lt;Integer&gt;tmp = new ArrayList&lt;&gt;(res.get(j));</div><div class="line">                tmp.add(nums[i]);</div><div class="line">                res.add(tmp);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="37-sudoku-solver"><a href="#37-sudoku-solver" class="headerlink" title="37 sudoku solver"></a>37 sudoku solver</h3><p>思路： 要用带boolean 的dfs去试探，注意的是判断合法的函数要对啊</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public boolean check(char[][]board,int ind)&#123;</div><div class="line">        //check row ind/9, col: ind%9, that square;</div><div class="line">        boolean []vis=new boolean[9];</div><div class="line">        int row = ind/9,col=ind%9;</div><div class="line">        for(int i=0;i&lt;9;++i)&#123;</div><div class="line">            if(board[row][i]==&apos;.&apos;)</div><div class="line">                continue;</div><div class="line">            if(vis[board[row][i]-&apos;1&apos;])</div><div class="line">                return false;</div><div class="line">            vis[board[row][i]-&apos;1&apos;]=true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Arrays.fill(vis,false);</div><div class="line">        for(int i=0;i&lt;9;++i)&#123;</div><div class="line">            if(board[i][col]==&apos;.&apos;)</div><div class="line">                continue;</div><div class="line">            if(vis[board[i][col]-&apos;1&apos;])</div><div class="line">                return false;</div><div class="line">            vis[board[i][col]-&apos;1&apos;]=true;</div><div class="line">        &#125;</div><div class="line">        Arrays.fill(vis,false);</div><div class="line"></div><div class="line">         row=row/3*3;</div><div class="line">        col=col/3*3;</div><div class="line">        for(int i=row;i&lt;row+3;++i)&#123;</div><div class="line">            for(int j=col;j&lt;col+3;++j)&#123;</div><div class="line">                if(board[i][j]==&apos;.&apos;)</div><div class="line">                    continue;</div><div class="line">                if(vis[board[i][j]-&apos;1&apos;])</div><div class="line">                    return false;</div><div class="line">                vis[board[i][j]-&apos;1&apos;]=true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public boolean dfs37(char[][]board,int ind)&#123;</div><div class="line">         if(ind==81)</div><div class="line">            return true;</div><div class="line">        if(board[ind/9][ind%9]!=&apos;.&apos;)&#123;</div><div class="line">            return dfs37(board,ind+1);</div><div class="line">        &#125;else&#123;</div><div class="line">            for(int i=1;i&lt;=9;++i)&#123;</div><div class="line">                board[ind/9][ind%9]=(char)(i+&apos;0&apos;);</div><div class="line">                if(check(board,ind) &amp;&amp; dfs37(board,ind+1) )&#123;</div><div class="line">                        return true;</div><div class="line">                &#125;</div><div class="line">                board[ind/9][ind%9]=&apos;.&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    public void solveSudoku(char[][] board) &#123;</div><div class="line">        dfs37(board,0);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="93-Restore-IP-Addresses"><a href="#93-Restore-IP-Addresses" class="headerlink" title="93 Restore IP Addresses"></a>93 Restore IP Addresses</h3><p>思路： 一个一个检测，探测,leading zero的问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public boolean valid(String s)&#123;</div><div class="line">        if(s.isEmpty()||s.length()&gt;3)</div><div class="line">            return false;</div><div class="line">        if(s.charAt(0)==&apos;0&apos; &amp;&amp; s.length()&gt;1)</div><div class="line">            return false;</div><div class="line">        return Integer.parseInt(s)&lt;=255;</div><div class="line">    &#125;</div><div class="line">    public void dfs93(List&lt;String&gt;res,String s,int index,List&lt;String&gt; path)&#123;</div><div class="line">        if(index==s.length() &amp;&amp; path.size()==4)&#123;</div><div class="line">            res.add(String.join(&quot;.&quot;,path));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(path.size()&gt;4)</div><div class="line">            return;</div><div class="line">        for(int i=index+1;i&lt;=s.length();++i)&#123;</div><div class="line">            String sub=s.substring(index,i);</div><div class="line">            if(sub.length()&gt;3)</div><div class="line">                break;</div><div class="line">            if(valid(sub))&#123;</div><div class="line">                path.add(sub);</div><div class="line">                dfs93(res,s,i,path);</div><div class="line">                path.remove(path.size()-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;String&gt; restoreIpAddresses(String s) &#123;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        if(s.length()&lt;4||s.length()&gt;12)</div><div class="line">            return res;</div><div class="line">        dfs93(res,s,0,new ArrayList&lt;&gt;());</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="131-Palindrome-Partitioning"><a href="#131-Palindrome-Partitioning" class="headerlink" title="131. Palindrome Partitioning"></a>131. Palindrome Partitioning</h3><p>思路： 可以提前打表也可以后面判断isPalindrome</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">public void dfs1311(List&lt;List&lt;String&gt;&gt;res,List&lt;String&gt;path,String s,int ind,boolean[][]palindrome)&#123;</div><div class="line">        if(ind==s.length())&#123;</div><div class="line">            res.add(new ArrayList&lt;&gt;(path));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=ind+1;i&lt;=s.length();++i)&#123;</div><div class="line">            if(palindrome[ind+1][i])&#123;</div><div class="line">                path.add(s.substring(ind,i));</div><div class="line">                dfs1311(res,path,s,i,palindrome);</div><div class="line">                path.remove(path.size()-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;String&gt;&gt;partition(String s)&#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        int m=s.length();</div><div class="line">        boolean [][]palindrome=new boolean[m+1][m+1];</div><div class="line">        palindrome[0][0]=true;</div><div class="line">        for(int i=1;i&lt;=m;++i)&#123;</div><div class="line">            palindrome[i][i]=true;</div><div class="line">            for(int j=i-1;j&gt;=1;--j)&#123;</div><div class="line">                if(s.charAt(j-1)==s.charAt(i-1) &amp;&amp;( j&gt;=i-2||palindrome[j+1][i-1]))&#123;</div><div class="line">                    palindrome[j][i]=true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        dfs1311(res,new ArrayList&lt;&gt;(),s,0,palindrome);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    public boolean isPalindrome(String ss)&#123;</div><div class="line">        int begin=0,end=ss.length()-1;</div><div class="line">        char []sss=ss.toCharArray();</div><div class="line">        while(begin&lt;end)&#123;</div><div class="line">            if(sss[begin]!= sss[end])</div><div class="line">                return false;</div><div class="line">            begin++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void dfs131(List&lt;List&lt;String&gt;&gt;res,List&lt;String&gt;path,String s,int index)&#123;</div><div class="line">        if(index==s.length())&#123;</div><div class="line">            res.add(new ArrayList&lt;&gt;(path));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=index+1;i&lt;=s.length();++i)&#123;</div><div class="line">            String sub = s.substring(index,i);</div><div class="line">            if(isPalindrome(sub))&#123;</div><div class="line">                path.add(sub);</div><div class="line">                dfs131(res,path,s,i);</div><div class="line">                path.remove(path.size()-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        dfs131(res,new ArrayList&lt;&gt;(),s,0);</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="10-Regular-Expression-Matching"><a href="#10-Regular-Expression-Matching" class="headerlink" title="10 Regular Expression Matching"></a>10 Regular Expression Matching</h3><p>思路：递归或者是dp</p>
<pre><code>
public boolean isMatch(String s, String p) {
        if(p.isEmpty())
            return s.isEmpty();
        if(p.length()==1)
            return s.length()==1 &amp;&amp; (s.equals(p)||p.charAt(0)==&apos;.&apos;);
        if(s.isEmpty())
            return p.charAt(1)==&apos;*&apos; &amp;&amp; isMatch(s,p.substring(2));
        if(p.charAt(1)==&apos;*&apos;){
            //replace 0 or one or more than one
                       return isMatch(s,p.substring(2))||((s.charAt(0)==p.charAt(0)||p.charAt(0)==&apos;.&apos;)&amp;&amp;isMatch(s.substring(1),p));

        }else{
            return (s.charAt(0)==p.charAt(0)||p.charAt(0)==&apos;.&apos;)&amp;&amp;isMatch(s.substring(1),p.substring(1));
        }
    }

    public boolean isMatch(String s, String p) {
        if(p.isEmpty())
            return s.isEmpty();
        int m= s.length(),n=p.length();
        boolean [][]dp=new boolean[m+1][n+1];
        dp[0][0]=true;
        for(int i=2;i&lt;=n;++i)
            dp[0][i]=dp[0][i-2] &amp;&amp; p.charAt(i-1)==&apos;*&apos;;
        for(int i=1;i&lt;=m;++i){
            if(i==1)
                dp[i][1]=(s.charAt(i-1)==p.charAt(0))||p.charAt(0)==&apos;.&apos;;
            for(int j=2;j&lt;=n;++j){
                if(p.charAt(j-1)==&apos;*&apos;){
                    dp[i][j]=dp[i][j-2]||(s.charAt(i-1)==p.charAt(j-2)||p.charAt(j-2)==&apos;.&apos;) &amp;&amp; dp[i-1][j];
                }else{
                    dp[i][j]=(s.charAt(i-1)==p.charAt(j-1)||p.charAt(j-1)==&apos;.&apos;)&amp;&amp;dp[i-1][j-1];
                }
            }
        }
        return dp[m][n];
    }
</code></pre><hr>
<h1 id="Expectations"><a href="#Expectations" class="headerlink" title="Expectations"></a>Expectations</h1><hr>
<ul>
<li>把dp里的滚动数组搞清楚，节省空间</li>
<li>探索下啤酒鱼怎么做。周末试了试煮鱼，好久没吃过鱼了，表示怀念。</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/rvalQTz4G55AyZ01zNTErlmRt-NFFFVGN64Rk6QPzUQ4WG98DOW2s1lqcnnijp-CwT8nGfLWvOe7nPvWEaLxvCwUiE79XtI0OzRe8MJhymATDSYj2CUsgHr5KsBOgkGBVNOBV3aLOw" alt="Stanford Univ"></p>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[stackQuestions]]></title>
      <url>/2017/07/16/stackQuestions/</url>
      <content type="html"><![CDATA[<h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><hr>
<a id="more"></a>
<ul>
<li>155 Min Stack</li>
<li>42 Trapping Rain Water</li>
<li>150 Evaluate Reverse Polish Notation</li>
<li>173 Binary Search Tree Iterator</li>
<li>85 Maximal Rectangle</li>
<li>232 Implement Queue using Stacks</li>
<li>84 Largest Rectangle in Histogram</li>
<li>71 Simplify Path</li>
<li>94 Binary Tree Inorder Traversal</li>
<li>341     Flatten Nested List Iterator</li>
<li>225     Binary Tree Postorder Traversal</li>
<li>394 Decode String</li>
<li>255    Verify Preorder Sequence in Binary Search Tree</li>
<li>439 Ternary Expression Parser</li>
<li>496 Next Greater Element I</li>
<li>503 Next Greater Element II</li>
<li>316 Remove Duplicate Letters</li>
<li>227 Basic Calculator II</li>
<li>224 Basic Calculator</li>
<li>394 Decode String</li>
<li>385 Mini Parser</li>
<li>636 Exclusive Time of Functions</li>
<li>331 Verify Preorder Serialization of a Binary Tree</li>
<li>456 132 Pattern</li>
</ul>
<h3 id="155-Min-Stack"><a href="#155-Min-Stack" class="headerlink" title="155 Min Stack"></a>155 Min Stack</h3><p>思路： 两个栈的很容易写出来，但是要求一个栈来实现呢？</p>
<ul>
<li>一个栈存gap，一个数字存最小值,用long</li>
<li>一个栈，一个数字存最小值，当遇到最小值时，存两次</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">public class MinStack &#123;</div><div class="line"></div><div class="line">     Stack&lt;Long&gt;stk=null;</div><div class="line">    long minVal;</div><div class="line">    public MinStack() &#123;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">        minVal=Long.MAX_VALUE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void push(int x) &#123;</div><div class="line">        if(stk.isEmpty())&#123;</div><div class="line">            stk.push(0l);</div><div class="line">            minVal=(long)x;</div><div class="line">        &#125;else&#123;</div><div class="line">            stk.push(x-minVal);</div><div class="line">            minVal=Math.min(minVal,x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void pop() &#123;</div><div class="line">        long val = stk.pop();</div><div class="line">        if(val&lt;0)//pay attention to this </div><div class="line">            minVal=(-val+minVal);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	//pay attention to this </div><div class="line">    public int top() &#123;</div><div class="line">        if(stk.peek()&lt;0)</div><div class="line">            return (int)minVal;</div><div class="line">        else</div><div class="line">            return (int)(minVal+stk.peek());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getMin() &#123;</div><div class="line">        return (int)minVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//wrong answer if no equals in x&lt;=minVal</div><div class="line">public class MinStack &#123;</div><div class="line"></div><div class="line">    Stack&lt;Integer&gt;stk=null;</div><div class="line">    private int minVal;</div><div class="line">    /** initialize your data structure here. */</div><div class="line">    public MinStack() &#123;</div><div class="line">        minVal=Integer.MAX_VALUE;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void push(int x) &#123;</div><div class="line">        if(x&lt;=minVal)&#123;</div><div class="line">            stk.push(minVal);</div><div class="line">            minVal=x;</div><div class="line">        &#125;</div><div class="line">        stk.push(x);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void pop() &#123;</div><div class="line">        if(stk.pop()==minVal)&#123;</div><div class="line">            minVal=stk.pop();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public int top() &#123;</div><div class="line">        return stk.peek();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public int getMin() &#123;</div><div class="line">        return minVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="42-Traping-rain-water"><a href="#42-Traping-rain-water" class="headerlink" title="42 Traping rain water"></a>42 Traping rain water</h3><p>思路： 单调栈来实现</p>
<ul>
<li>单调栈，和84题非常像</li>
<li>两指针</li>
<li>左右两数组记录最大值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int trap(int[] height) &#123;</div><div class="line">        int n = height.length;</div><div class="line">        Stack&lt;Integer&gt; stk=new Stack&lt;&gt;();</div><div class="line">        int area=0;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; height[stk.peek()]&lt;height[i])&#123;</div><div class="line">                int h = height[stk.pop()];</div><div class="line">                int h1=stk.isEmpty()?0:height[stk.peek()];</div><div class="line">                int w = stk.isEmpty()?i:i-1-stk.peek();</div><div class="line">                area+=Math.max((Math.min(h1,height[i])-h)*w,0);</div><div class="line">            &#125;</div><div class="line">            stk.push(i);</div><div class="line">        &#125;</div><div class="line">        return area;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="150-Evaluate-Reverse-Polish-Notation"><a href="#150-Evaluate-Reverse-Polish-Notation" class="headerlink" title="150 Evaluate Reverse Polish Notation"></a>150 Evaluate Reverse Polish Notation</h3><p>思路： 栈和递归来实现</p>
<ul>
<li>栈</li>
<li>递归</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">public int evalRPN(String[] tokens) &#123;</div><div class="line">         Stack&lt;String&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(String token:tokens)&#123;</div><div class="line">            if(token.equals(&quot;+&quot;)||token.equals(&quot;-&quot;)||token.equals(&quot;*&quot;)||token.equals(&quot;/&quot;))&#123;</div><div class="line">                if(stk.size()&lt;2)</div><div class="line">                    break;</div><div class="line">                int val1= Integer.parseInt(stk.pop());</div><div class="line">                int val2 = Integer.parseInt(stk.pop());</div><div class="line">                if(token.equals(&quot;+&quot;))</div><div class="line">                    stk.push(String.valueOf(val2+val1));</div><div class="line">                else if(token.equals(&quot;-&quot;))</div><div class="line">                    stk.push(String.valueOf(val2-val1));</div><div class="line">                else if(token.equals(&quot;*&quot;))</div><div class="line">                    stk.push(String.valueOf(val2*val1));</div><div class="line">                else</div><div class="line">                    stk.push(String.valueOf(val2/val1));</div><div class="line"></div><div class="line">            &#125;else</div><div class="line">                stk.push(token);</div><div class="line">        &#125;</div><div class="line">        if(!stk.isEmpty())</div><div class="line">            return Integer.parseInt(stk.peek());</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //很奇怪，如果用li， start ，end会跪。</div><div class="line">    public int eval(List&lt;String&gt;li)&#123;</div><div class="line">        int n=li.size();</div><div class="line">        String str=li.get(n-1);</div><div class="line">        li.remove(n-1);</div><div class="line">        if(str.equals(&quot;+&quot;)||str.equals(&quot;-&quot;)||str.equals(&quot;/&quot;)||str.equals(&quot;*&quot;))&#123;</div><div class="line">            int r1=eval(li);</div><div class="line">            int r2=eval(li);</div><div class="line">            if(str.equals(&quot;+&quot;))</div><div class="line">                return r1+r2;</div><div class="line">            else if(str.equals(&quot;-&quot;))</div><div class="line">                return r2-r1;</div><div class="line">            else if(str.equals(&quot;*&quot;))</div><div class="line">                return r2*r1;</div><div class="line">            else</div><div class="line">                return r2/r1;</div><div class="line">        &#125;</div><div class="line">        return Integer.valueOf(str);</div><div class="line">    &#125;</div><div class="line">    public int evalRPN(String []tokens)&#123;</div><div class="line">        int n=tokens.length;</div><div class="line">        List&lt;String&gt;li=new ArrayList&lt;&gt;(Arrays.asList(tokens));</div><div class="line">        return eval(li);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="173-Binary-Search-Tree-Iterator"><a href="#173-Binary-Search-Tree-Iterator" class="headerlink" title="173 Binary Search Tree Iterator"></a>173 Binary Search Tree Iterator</h3><p>思路： 其实就是stack的中序遍历，当然你可以先走一遍中序遍历，然后把所有的值都存到list里，但是这样的话非常耗space，常见的优化时lazy load</p>
<ul>
<li>中序遍历走一遍，存下所有的值</li>
<li>lazy load，必要的时候才继续载入值,记住 中序遍历是pop的，后序遍历是peek的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class BSTIterator &#123;</div><div class="line"></div><div class="line">   public Stack&lt;TreeNode&gt; stk=null;</div><div class="line">    TreeNode cur=null;</div><div class="line">    public BSTIterator(TreeNode root) &#123;</div><div class="line">        cur=root;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** @return whether we have a next smallest number */</div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        return !stk.isEmpty()||cur!=null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** @return the next smallest number */</div><div class="line">    public int next() &#123;</div><div class="line">       int val=0;</div><div class="line">        while(cur!=null)&#123;</div><div class="line">            stk.push(cur);</div><div class="line">            cur=cur.left;</div><div class="line">        &#125;</div><div class="line">        cur=stk.pop();</div><div class="line">        val=cur.val;</div><div class="line">        cur=cur.right;</div><div class="line">        return val;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="84-Largest-Rectangle-in-Histogram-amp-amp-85-Maximal-Rectangle-以及trapping-rain-water-是姊妹题"><a href="#84-Largest-Rectangle-in-Histogram-amp-amp-85-Maximal-Rectangle-以及trapping-rain-water-是姊妹题" class="headerlink" title="84 Largest Rectangle in Histogram &amp;&amp; 85 Maximal Rectangle 以及trapping rain water 是姊妹题"></a>84 Largest Rectangle in Histogram &amp;&amp; 85 Maximal Rectangle 以及trapping rain water 是姊妹题</h3><p>思路：单调栈和动态规划</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">//84 largest rectangle in histgram</div><div class="line">public int largestRectangleArea(int[] heights) &#123;</div><div class="line">        int n = heights.length;</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        int maxArea=0;</div><div class="line">        for(int i=0;i&lt;=n;++i)&#123;</div><div class="line">            int height=i&lt;n?heights[i]:0;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; heights[stk.peek()]&gt;height)&#123;</div><div class="line">                int h = heights[stk.pop()];</div><div class="line">                int w = stk.isEmpty()?i:i-stk.peek()-1;//i is not in the area</div><div class="line">                maxArea=Math.max(maxArea,h*w);</div><div class="line">            &#125;</div><div class="line">            stk.push(i);</div><div class="line">        &#125;</div><div class="line">        return maxArea;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //85 maximal rectangle</div><div class="line">    public int maximalRectangle(char[][] matrix) &#123;</div><div class="line">        if(matrix.length==0||matrix[0].length==0)</div><div class="line">            return 0;</div><div class="line">        int m = matrix.length,n=matrix[0].length;</div><div class="line">        int []dp=new int[n];</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            dp[i]=matrix[0][i]==&apos;1&apos;?1:0;</div><div class="line">        &#125;</div><div class="line">        int maxArea=largestRectangleArea(dp);</div><div class="line">        for(int i=1;i&lt;m;++i)&#123;</div><div class="line">            for(int j=0;j&lt;n;++j)&#123;</div><div class="line">                dp[j]=matrix[i][j]==&apos;0&apos;?0:dp[j]+1;</div><div class="line">            &#125;</div><div class="line">            maxArea=Math.max(maxArea,largestRectangleArea(dp));</div><div class="line">        &#125;</div><div class="line">        return maxArea;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="232-Implement-Queue-using-Stacks"><a href="#232-Implement-Queue-using-Stacks" class="headerlink" title="232 Implement Queue using Stacks"></a>232 Implement Queue using Stacks</h3><p>思路： 两stack，两stack 是不平等的关系， stack2是优先级比较高的。</p>
<ul>
<li>two stack, push is O(1), others are O(N)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class MyQueue &#123;</div><div class="line"></div><div class="line">    //two stack, uneven</div><div class="line">    public Stack&lt;Integer&gt; stk=null;//primary stack;</div><div class="line">    public Stack&lt;Integer&gt;stk1=null;</div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    public MyQueue() &#123;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">        stk1=new Stack&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Push element x to the back of queue. */</div><div class="line">    public void push(int x) &#123;</div><div class="line">        stk.push(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Removes the element from in front of queue and returns that element. */</div><div class="line">    public int pop() &#123;</div><div class="line">        if(!stk1.isEmpty())</div><div class="line">            return stk1.pop();</div><div class="line">        while(!stk.isEmpty())</div><div class="line">            stk1.push(stk.pop());</div><div class="line">        return stk1.pop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Get the front element. */</div><div class="line">    public int peek() &#123;</div><div class="line">        if(!stk1.isEmpty())</div><div class="line">            return stk1.peek();</div><div class="line">        while(!stk.isEmpty())</div><div class="line">            stk1.push(stk.pop());</div><div class="line">        return stk1.peek();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Returns whether the queue is empty. */</div><div class="line">    public boolean empty() &#123;</div><div class="line">        return stk.isEmpty() &amp;&amp; stk1.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="225-Implement-Stack-using-Queues"><a href="#225-Implement-Stack-using-Queues" class="headerlink" title="225. Implement Stack using Queues"></a>225. Implement Stack using Queues</h3><p> 思路： 两queue，相等的地位，每次都是剩下一个元素，剩下的push到另一外一个queue</p>
<ul>
<li>两个queue， push是o(1)， 其他是o(n)</li>
<li>一个queue，push是o(n)，其他是o(1)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">public class MyStackOneQueue &#123;</div><div class="line">    /** Initialize your data structure here. */</div><div class="line"></div><div class="line">    private Queue&lt;Integer&gt; q=null;</div><div class="line">    public MyStackOneQueue() &#123;</div><div class="line">        q=new LinkedList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Push element x onto stack. */</div><div class="line">    public void push(int x) &#123;</div><div class="line">        q.offer(x);</div><div class="line">        for(int i=0;i&lt;q.size()-1;++i)&#123;</div><div class="line">            q.offer(q.poll());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Removes the element on top of the stack and returns that element. */</div><div class="line">    public int pop() &#123;</div><div class="line">        return q.poll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Get the top element. */</div><div class="line">    public int top() &#123;</div><div class="line">        return q.peek();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Returns whether the stack is empty. */</div><div class="line">    public boolean empty() &#123;</div><div class="line">        return q.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class MyStack &#123;</div><div class="line"></div><div class="line">      //two queue even</div><div class="line">    Queue&lt;Integer&gt; q=null;</div><div class="line">    Queue&lt;Integer&gt;q1=null;</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    public MyStack() &#123;</div><div class="line">        q=new LinkedList&lt;&gt;();</div><div class="line">        q1=new LinkedList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Push element x onto stack. */</div><div class="line">    public void push(int x) &#123;</div><div class="line">        q.offer(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Removes the element on top of the stack and returns that element. */</div><div class="line">    public int pop() &#123;</div><div class="line">        int val=0;</div><div class="line">        if(!q.isEmpty())&#123;</div><div class="line">            while(q.size()&gt;1)&#123;</div><div class="line">                q1.offer(q.poll());</div><div class="line">            &#125;</div><div class="line">            val=q.poll();</div><div class="line">        &#125;else&#123;</div><div class="line">            while(q1.size()&gt;1)&#123;</div><div class="line">                q.offer(q1.poll());</div><div class="line">            &#125;</div><div class="line">            val=q1.poll();</div><div class="line">        &#125;</div><div class="line">        return val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Get the top element. */</div><div class="line">    public int top() &#123;</div><div class="line">        int val=0;</div><div class="line">        if(!q.isEmpty())&#123;</div><div class="line">            while(q.size()&gt;1)&#123;</div><div class="line">                q1.offer(q.poll());</div><div class="line">            &#125;</div><div class="line">            val=q.poll();</div><div class="line">            q1.offer(val);</div><div class="line">        &#125;else&#123;</div><div class="line">            while(q1.size()&gt;1)&#123;</div><div class="line">                q.offer(q1.poll());</div><div class="line">            &#125;</div><div class="line">            val=q1.poll();</div><div class="line">            q.offer(val);</div><div class="line">        &#125;</div><div class="line">        return val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Returns whether the stack is empty. */</div><div class="line">    public boolean empty() &#123;</div><div class="line">        return q.isEmpty() &amp;&amp; q1.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="71-Simplify-Path"><a href="#71-Simplify-Path" class="headerlink" title="71. Simplify Path"></a>71. Simplify Path</h3><p>思路： 切割， !stk.isEmpty &amp;&amp; str==”..” 出栈, str!=’.’ &amp;&amp; str!=’..’ str!=”” 就加到stack里,最后别忘了加上 “/”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public String simplifyPath(String path) &#123;</div><div class="line">        String []paths = path.split(&quot;/&quot;);</div><div class="line">        Stack&lt;String&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(String str:paths)&#123;</div><div class="line">            if(!stk.isEmpty() &amp;&amp; str.equals(&quot;..&quot;))&#123;</div><div class="line">                stk.pop();</div><div class="line">            &#125;else if(!str.equals(&quot;.&quot;) &amp;&amp; str.length()!=0 &amp;&amp; !str.equals(&quot;..&quot;))</div><div class="line">                stk.push(str);</div><div class="line">        &#125;</div><div class="line">        String res = String.join(&quot;/&quot;,stk);</div><div class="line">        return &quot;/&quot;+res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="94-binary-tree-inorder-traversal"><a href="#94-binary-tree-inorder-traversal" class="headerlink" title="94 binary tree inorder traversal"></a>94 binary tree inorder traversal</h3><p>思路： 掌握三种，递归，stack，莫里斯</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">        List&lt;Integer&gt;res = new ArrayList&lt;&gt;();</div><div class="line">        TreeNode cur = root;</div><div class="line">        Stack&lt;TreeNode&gt;stk=new Stack&lt;TreeNode&gt;();</div><div class="line">        while(cur!=null||!stk.isEmpty())&#123;</div><div class="line">            while(cur!=null)&#123;</div><div class="line">                stk.push(cur);</div><div class="line">                cur=cur.left;</div><div class="line">            &#125;</div><div class="line">            cur=stk.pop();</div><div class="line">            res.add(cur.val);</div><div class="line">            cur=cur.right;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="341-flatten-nested-list-iterator"><a href="#341-flatten-nested-list-iterator" class="headerlink" title="341 flatten nested list iterator"></a>341 flatten nested list iterator</h3><p>思路： 可以一次性遍历完，然后再遍历，但是这样的话空间复杂度太高</p>
<ul>
<li>一次性遍历完</li>
<li>lazy load，需要的时候才遍历，用到栈, queue就不行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class NestedIterator implements Iterator&lt;Integer&gt; &#123;</div><div class="line"></div><div class="line">    private Stack&lt;NestedInteger&gt; stk=null;</div><div class="line">    public NestedIterator(List&lt;NestedInteger&gt; nestedList) &#123;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">        int n=nestedList.size();</div><div class="line">        for(int i=n-1;i&gt;=0;--i)&#123;</div><div class="line">            if(!nestedList.get(i).isInteger())&#123;</div><div class="line">                if(nestedList.get(i).getList().isEmpty())</div><div class="line">                    continue;</div><div class="line">            &#125;</div><div class="line">            stk.push(nestedList.get(i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Integer next() &#123;</div><div class="line">        return stk.pop().getInteger();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        while(!stk.isEmpty() &amp;&amp; !stk.peek().isInteger())&#123;</div><div class="line">            NestedInteger top=stk.pop();</div><div class="line">            if(top.isInteger())&#123;</div><div class="line">                stk.push(top);</div><div class="line">                System.out.println(&quot;a&quot;);</div><div class="line">                break;</div><div class="line">            &#125;else&#123;</div><div class="line">                List&lt;NestedInteger&gt;nestedList=top.getList();</div><div class="line">                int n=nestedList.size();</div><div class="line">                for(int i=n-1;i&gt;=0;--i)&#123;</div><div class="line">                    if(!nestedList.get(i).isInteger())&#123;</div><div class="line">                        if(nestedList.get(i).getList().isEmpty())</div><div class="line">                            continue;</div><div class="line">                    &#125;</div><div class="line">                    stk.push(nestedList.get(i));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return !stk.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145 Binary Tree Postorder Traversal"></a>145 Binary Tree Postorder Traversal</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">TreeNode pre =null;</div><div class="line">   public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123;</div><div class="line">       List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">       if(root==null)</div><div class="line">           return res;</div><div class="line">       Stack&lt;TreeNode&gt;stk=new Stack&lt;&gt;();</div><div class="line">       TreeNode curr = root;</div><div class="line">       while (!stk.isEmpty() || curr != null) &#123;</div><div class="line">           while(curr!=null)&#123;</div><div class="line">               stk.push(curr);</div><div class="line">               curr=curr.left;</div><div class="line">           &#125;</div><div class="line">           curr=stk.peek();</div><div class="line"></div><div class="line">           if(curr.right!=null &amp;&amp; curr.right!=pre)&#123;//没有被访问</div><div class="line">               curr=curr.right;</div><div class="line">           &#125;else&#123;</div><div class="line">               res.add(curr.val);</div><div class="line">               pre=curr;</div><div class="line">               stk.pop();</div><div class="line">               curr=null;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       return res;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="439-Ternary-Expression-Parser"><a href="#439-Ternary-Expression-Parser" class="headerlink" title="439. Ternary Expression Parser"></a>439. Ternary Expression Parser</h3><p>思路： 反着入栈,递归容易爆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public String parseTernary(String expression) &#123;</div><div class="line">        Stack&lt;Character&gt;stk=new Stack&lt;&gt;();</div><div class="line">        char []ss=expression.toCharArray();</div><div class="line">        //when finding ?, it is your chance</div><div class="line">        int n = ss.length,i=n-1;</div><div class="line">        while(i&gt;=0)&#123;</div><div class="line">            if(ss[i]!=&apos;?&apos; &amp;&amp; ss[i]!=&apos;:&apos;)</div><div class="line">                stk.push(ss[i]);</div><div class="line">            else if(ss[i]==&apos;?&apos;)&#123;</div><div class="line">                char c1= stk.pop();</div><div class="line">                char c2=stk.pop();</div><div class="line">                stk.push(ss[i-1]==&apos;T&apos;?c1:c2);</div><div class="line">                i-=2;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">        return String.valueOf(stk.peek());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="496-next-greater-element-I"><a href="#496-next-greater-element-I" class="headerlink" title="496 next greater element I"></a>496 next greater element I</h3><p>思路： stack专门找第一个比它大的元素。递减，然后找到一个大的，那么就出栈，这些出栈的元素的最近大的元素都是它。在这里我们用hashmap建立联系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int[] nextGreaterElement(int[] findNums, int[] nums) &#123;</div><div class="line">         int n = findNums.length,m=nums.length;</div><div class="line">        int []res=new int[n];</div><div class="line">        //先一个map建起来</div><div class="line">        Map&lt;Integer,Integer&gt;map=new HashMap&lt;&gt;();</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(int i=0;i&lt;m;++i)&#123;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; stk.peek()&lt;nums[i])&#123;</div><div class="line">                map.put(stk.pop(),nums[i]);</div><div class="line">            &#125;</div><div class="line">            stk.push(nums[i]);</div><div class="line">        &#125;</div><div class="line">        Arrays.fill(res,-1);</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            if(map.containsKey(findNums[i]))</div><div class="line">                res[i]=map.get(findNums[i]);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="503-Next-Greater-Element-II"><a href="#503-Next-Greater-Element-II" class="headerlink" title="503. Next Greater Element II"></a>503. Next Greater Element II</h3><p>思路： 和上题差不多，环状的话走两遍，2*n，然后用mod，这个不需要hashmap</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public int[] nextGreaterElements(int[] nums) &#123;</div><div class="line">        int n=nums.length;</div><div class="line">        int []res=new int[n];</div><div class="line">        Arrays.fill(res,-1);</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(int i=0;i&lt;2*n;++i)&#123;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; nums[i%n]&gt;nums[stk.peek()])&#123;</div><div class="line">                res[stk.pop()]=nums[i%n];</div><div class="line">            &#125;</div><div class="line">            //if(i&lt;n)</div><div class="line">            stk.push(i%n);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="316-Remove-Duplicate-Letters"><a href="#316-Remove-Duplicate-Letters" class="headerlink" title="316.Remove Duplicate Letters"></a>316.Remove Duplicate Letters</h3><p>思路： 先统计26个char的分布，同时记住哪些被访问过，用stack装。只有当后面还有这个字符，且这个字符大于或等于当前字符才可以替换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public String removeDuplicateLetters(String s) &#123;</div><div class="line">        int []cnt=new int[26];</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        for(char c:ss)</div><div class="line">            cnt[c-&apos;a&apos;]++;</div><div class="line">        Stack&lt;Character&gt;stk=new Stack&lt;&gt;();</div><div class="line">        boolean []vis = new boolean[26];</div><div class="line">        for(char c:ss)&#123;</div><div class="line">            --cnt[c-&apos;a&apos;];</div><div class="line">            if(vis[c-&apos;a&apos;])</div><div class="line">                continue;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; cnt[stk.peek()-&apos;a&apos;]&gt;0 &amp;&amp; stk.peek()&gt;=c)&#123;</div><div class="line">                char cc = stk.pop();</div><div class="line">                vis[cc-&apos;a&apos;]=false;</div><div class="line">            &#125;</div><div class="line">            stk.push(c);</div><div class="line">            vis[c-&apos;a&apos;]=true;</div><div class="line">        &#125;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        while(!stk.isEmpty())&#123;</div><div class="line">            sb.append(stk.pop());</div><div class="line">        &#125;</div><div class="line">        sb.reverse();</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="227-Basic-Calculator-II"><a href="#227-Basic-Calculator-II" class="headerlink" title="227.Basic Calculator II"></a>227.Basic Calculator II</h3><p>思路： 笨一点可以用stk装，以后可以优化，令我非常惊奇的是如何做到： 计算完当前的数字，此时符号是它前面的“+ - * ／”</p>
<ul>
<li>stk</li>
<li>without stk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">public int calculate(String s) &#123;</div><div class="line">         int n=s.length();</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        int num =0;</div><div class="line">        char sign =&apos;+&apos;;</div><div class="line">        int ans=0,prev=0;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            if(Character.isDigit(ss[i]))&#123;</div><div class="line">                num=10*num+(ss[i]-&apos;0&apos;);</div><div class="line">            &#125;</div><div class="line">            if((!Character.isDigit(ss[i]) &amp;&amp; ss[i]!=&apos; &apos;)|| i==n-1 )&#123;</div><div class="line">                if(sign==&apos;-&apos;)&#123;</div><div class="line">                    ans+=prev;</div><div class="line">                    prev=-num;</div><div class="line">                &#125;</div><div class="line">                else if(sign==&apos;+&apos;)&#123;</div><div class="line">                    ans+=prev;</div><div class="line">                    prev=num;</div><div class="line">                &#125;</div><div class="line">                else if(sign==&apos;*&apos;)&#123;</div><div class="line">                    prev=prev*num;</div><div class="line">                &#125;else if(sign==&apos;/&apos;)&#123;</div><div class="line">                    prev=prev/num;</div><div class="line">                &#125;</div><div class="line">                sign=ss[i];//放在后面真是很巧妙啊,就省得向我这样蛮干了。</div><div class="line">                num=0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return ans+=prev;</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">    public int calculate(String s) &#123;</div><div class="line">	    int len;</div><div class="line">	    if(s==null || (len = s.length())==0) return 0;</div><div class="line">	    Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();</div><div class="line">	    int num = 0;</div><div class="line">	    char sign = &apos;+&apos;;</div><div class="line">	    for(int i=0;i&lt;len;i++)&#123;</div><div class="line">	        if(Character.isDigit(s.charAt(i)))&#123;</div><div class="line">	            num = num*10+s.charAt(i)-&apos;0&apos;;</div><div class="line">	        &#125;</div><div class="line">	        if((!Character.isDigit(s.charAt(i)) &amp;&amp;&apos; &apos;!=s.charAt(i)) || i==len-1)&#123;</div><div class="line">	            if(sign==&apos;-&apos;)&#123;</div><div class="line">	                stack.push(-num);</div><div class="line">	            &#125;</div><div class="line">	            if(sign==&apos;+&apos;)&#123;</div><div class="line">	                stack.push(num);</div><div class="line">	            &#125;</div><div class="line">	            if(sign==&apos;*&apos;)&#123;</div><div class="line">	                stack.push(stack.pop()*num);</div><div class="line">	            &#125;</div><div class="line">	            if(sign==&apos;/&apos;)&#123;</div><div class="line">	                stack.push(stack.pop()/num);</div><div class="line">	            &#125;</div><div class="line">	            sign = s.charAt(i);</div><div class="line">	            num = 0;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    int re = 0;</div><div class="line">	    for(int i:stack)&#123;</div><div class="line">	        re += i;</div><div class="line">	    &#125;</div><div class="line">	    return re;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="224-Basic-Calculator"><a href="#224-Basic-Calculator" class="headerlink" title="224. Basic Calculator"></a>224. Basic Calculator</h3><p>思路： 每遇到(，就把res入栈，符号入栈,遇到) 就弹出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public int calculate(String s) &#123;</div><div class="line">        int n = s.length();</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        int sign=1,res=0,num=0;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            if(i&lt;n &amp;&amp; Character.isDigit(ss[i]))&#123;</div><div class="line">                num=10*num+(ss[i]-&apos;0&apos;);</div><div class="line">            &#125;</div><div class="line">            if((!Character.isDigit(ss[i]) &amp;&amp; ss[i]!=&apos; &apos;)||i==n-1)&#123;</div><div class="line">                if(ss[i]==&apos;+&apos;)&#123;</div><div class="line">                    res+=sign*num;</div><div class="line">                    sign=1;</div><div class="line">                    num=0;</div><div class="line">                &#125;</div><div class="line">                else if(ss[i]==&apos;-&apos;)&#123;</div><div class="line">                    res+=sign*num;</div><div class="line">                    sign=-1;</div><div class="line">                    num=0;</div><div class="line">                &#125;else if(ss[i]==&apos;(&apos;)&#123;</div><div class="line">                    stk.push(res);</div><div class="line">                    stk.push(sign);</div><div class="line">                    sign=1;</div><div class="line">                    res=0;</div><div class="line">                    num=0;</div><div class="line">                &#125;else if(ss[i]==&apos;)&apos;)&#123;</div><div class="line">                    res+=num*sign;</div><div class="line">                    res*=stk.pop();</div><div class="line">                    res+=stk.pop();</div><div class="line">                    sign=1;</div><div class="line">                    num=0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res+=sign*num;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="385-Mini-Parser"><a href="#385-Mini-Parser" class="headerlink" title="385. Mini Parser"></a>385. Mini Parser</h3><p>思路： 遇到做括号，就存到栈里，遇到右括号就先pop，然后再加上当前的.</p>
<ul>
<li>recursive way</li>
<li>stk way</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public NestedInteger deserialize(String s) &#123;</div><div class="line">        if(s.isEmpty())</div><div class="line">            return new NestedInteger();</div><div class="line">        if(s.charAt(0)!=&apos;[&apos;)</div><div class="line">            return new NestedInteger(Integer.parseInt(s));</div><div class="line">        Stack&lt;NestedInteger&gt;stk=new Stack&lt;&gt;();</div><div class="line">        NestedInteger res = new NestedInteger();</div><div class="line">        int ind=1,n=s.length(),sign=1;</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        while(ind&lt;n-1) &#123;</div><div class="line">            if(ss[ind]==&apos;-&apos;)&#123;</div><div class="line">                ind++;</div><div class="line">                sign=-1;</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n-1 &amp;&amp; Character.isDigit(ss[ind]))&#123;</div><div class="line">                int num =0;</div><div class="line">                while(ind&lt;n-1 &amp;&amp; Character.isDigit(ss[ind]))&#123;</div><div class="line">                    num=10*num+(ss[ind++]-&apos;0&apos;);</div><div class="line">                &#125;</div><div class="line">                res.add(new NestedInteger(sign*num));</div><div class="line">                sign=1;</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n-1 &amp;&amp; ss[ind]==&apos;,&apos;)&#123;</div><div class="line">                ind++;</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n-1 &amp;&amp; ss[ind]==&apos;[&apos;)&#123;</div><div class="line">                stk.add(res);</div><div class="line">                res = new NestedInteger();</div><div class="line">                ind++;</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n-1 &amp;&amp; ss[ind]==&apos;]&apos; &amp;&amp; !stk.isEmpty())&#123;</div><div class="line">                NestedInteger tmp = stk.pop();</div><div class="line">                tmp.add(res);</div><div class="line">                res=tmp;</div><div class="line">                ind++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="394-Decode-String"><a href="#394-Decode-String" class="headerlink" title="394. Decode String"></a>394. Decode String</h3><p>思路： 两个stk，一个专门存数字，一个存字符串，遇到左括号就存到栈里，遇到右括号就从两个栈里弹出内容.</p>
<ul>
<li>recursive way</li>
<li>stk way</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public String decodeString(String s) &#123;</div><div class="line">        int ind=0,n = s.length();</div><div class="line">        char []ss = s.toCharArray();</div><div class="line">        Stack&lt;Integer&gt;num=new Stack&lt;&gt;();</div><div class="line">        Stack&lt;String&gt;stk=new Stack&lt;&gt;();</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        while(ind&lt;n)&#123;</div><div class="line">            if(Character.isDigit(ss[ind]))&#123;</div><div class="line">                int number = 0;</div><div class="line">                while(ind&lt;n &amp;&amp; Character.isDigit(ss[ind]))&#123;</div><div class="line">                    number=10*number+(ss[ind++]-&apos;0&apos;);</div><div class="line">                &#125;</div><div class="line">                num.push(number);</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n &amp;&amp; ss[ind]==&apos;[&apos;)&#123;</div><div class="line">                stk.push(sb.toString());</div><div class="line">                sb.setLength(0);</div><div class="line">                ind++;</div><div class="line">            &#125;else if(ind&lt;n &amp;&amp; ss[ind]==&apos;]&apos;)&#123;</div><div class="line">                StringBuilder tmp = new StringBuilder(stk.pop());</div><div class="line">                int repeat = num.pop();</div><div class="line">                while(repeat-- &gt;0)&#123;</div><div class="line">                    tmp.append(sb.toString());</div><div class="line">                &#125;</div><div class="line">                sb=tmp;</div><div class="line">                ind++;</div><div class="line">            &#125;else if(ind&lt;n)</div><div class="line">                sb.append(ss[ind++]);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="636-Exclusive-Time-of-Functions"><a href="#636-Exclusive-Time-of-Functions" class="headerlink" title="636. Exclusive Time of Functions"></a>636. Exclusive Time of Functions</h3><p>思路：遇到start就入栈，如栈的包括id，time，已被使用的时间,主要的难点是递归的话要叠加时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int[] exclusiveTime(int n, List&lt;String&gt; logs) &#123;</div><div class="line">        int []res =new int[n];</div><div class="line">        Stack&lt;int[]&gt;stk=new Stack&lt;&gt;();//first index is id, second is start time,third is gap</div><div class="line">        int cnt=0;</div><div class="line">        for(String str:logs)&#123;</div><div class="line">            String[]strs=str.split(&quot;:&quot;);</div><div class="line">            if(strs[1].equals(&quot;start&quot;))&#123;</div><div class="line">                stk.push(new int[]&#123;Integer.parseInt(strs[0]),Integer.parseInt(strs[2]),0&#125;);</div><div class="line">            &#125;else if(strs[1].equals(&quot;end&quot;))&#123;</div><div class="line">                int []top=stk.pop();</div><div class="line">                int val = Integer.parseInt(strs[2]);</div><div class="line">                res[top[0]]+=val-top[1]+1-top[2];</div><div class="line">                cnt=val-top[1]+1;</div><div class="line">                if(!stk.isEmpty())</div><div class="line">                    stk.peek()[2]+=cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="331-Verify-Preorder-Serialization-of-a-Binary-Tree"><a href="#331-Verify-Preorder-Serialization-of-a-Binary-Tree" class="headerlink" title="331. Verify Preorder Serialization of a Binary Tree"></a>331. Verify Preorder Serialization of a Binary Tree</h3><p>思路：每遇到两个##就删除，并把之前的变成#。并且要能循环处理这种情况。当然也是可以用入度，出度来做。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public boolean isValidSerialization(String preorder) &#123;</div><div class="line">        String[]args=preorder.split(&quot;,&quot;);</div><div class="line">        int n =args.length;</div><div class="line">        Stack&lt;String&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(int i=0;i&lt;=n;++i)&#123;</div><div class="line">            if(i&lt;n)&#123;</div><div class="line">                if(args[i].equals(&quot;#&quot;) &amp;&amp; !stk.isEmpty() &amp;&amp; stk.peek().equals(&quot;#&quot;))&#123;</div><div class="line">                    stk.pop();</div><div class="line">                    if(stk.isEmpty())</div><div class="line">                        return false;</div><div class="line">                    stk.pop();</div><div class="line">                    stk.push(&quot;#&quot;);</div><div class="line">                &#125;</div><div class="line">                else</div><div class="line">                    stk.push(args[i]);</div><div class="line">            &#125;</div><div class="line">            while(stk.size()&gt;=3)&#123;</div><div class="line">                    if(stk.peek().equals(&quot;#&quot;))&#123;</div><div class="line">                        String top = stk.pop();</div><div class="line">                        if(stk.peek().equals(&quot;#&quot;))&#123;</div><div class="line">                            stk.pop();</div><div class="line">                            stk.pop();</div><div class="line">                            stk.push(&quot;#&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            stk.push(top);</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line">                    &#125;else</div><div class="line">                        break;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        return stk.size()==1 &amp;&amp; stk.peek().equals(&quot;#&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">   </div><div class="line"> public boolean isValidSerializationSaveTime(String preorder)&#123;</div><div class="line">        String []args = preorder.split(&quot;,&quot;);</div><div class="line">        int diff=1;</div><div class="line">        for(String c:args)&#123;</div><div class="line">            if(--diff&lt;0)</div><div class="line">                return false;</div><div class="line">            if(!c.equals(&quot;#&quot;))//入度减1，出度加2，但是是#就不加</div><div class="line">                diff+=2;</div><div class="line">        &#125;</div><div class="line">        return diff==0;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="456-132-Pattern"><a href="#456-132-Pattern" class="headerlink" title="456 132 Pattern"></a>456 132 Pattern</h3><p>思路：有点像 334. Increasing Triplet Subsequence。注意这种不能简单的用单调栈来解决，单调栈会把数改变。我们要的是小于当前数的最大数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public boolean find132pattern(int[] nums) &#123;</div><div class="line">        Stack&lt;Integer&gt; stk=new Stack&lt;&gt;();</div><div class="line">        int n=nums.length,s3=Integer.MIN_VALUE;</div><div class="line">        for(int i=n-1;i&gt;=0;--i)&#123;</div><div class="line">            if(nums[i]&lt;s3)</div><div class="line">                return true;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; stk.peek()&lt;nums[i])&#123;</div><div class="line">                s3=stk.pop();</div><div class="line">            &#125;</div><div class="line">            stk.push(nums[i]);</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Expectations"><a href="#Expectations" class="headerlink" title="Expectations"></a>Expectations</h1><hr>
<ul>
<li>本来还想修改着简历的，时间太晚了，控制不好工作量</li>
<li>做过的题要及时复习</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/aoeB7MqPXpbyvKM_UPkDlWDRTwTj8jWLBUNGkuy9ThVAYqUc82ZMLrru5Y0NBxgiXHHWP9mvMIpngZfz70c9kxJJ_oUUqdAc3NakwoTezuglU08TkBp7oOwOBZo-kdf3chzPHcgvSA" alt="三番"></p>
<hr>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[countdown]]></title>
      <url>/2017/07/16/countdown/</url>
      <content type="html"><![CDATA[<h1 id="countdown"><a href="#countdown" class="headerlink" title="countdown"></a>countdown</h1><hr>
<a id="more"></a>
<p>找全职的倒计时已经开始了，希望在接下来的日子里充分利用每一天，用blog来记录每天做了些什么。</p>
<hr>
<p><img src="https://lh3.googleusercontent.com/n21C6qCOZqVhJXgvNou1Iuxr1vlzM_8Nep0r03L-410YfJ3IhPiAW9smN4f29iTZmBI1jE3IOKc-VvbaZcfev-TJIbZP6VJXW_rc0Bk98iknrokLfTtcWMq-0-fmtYtV16DKgFWzaA" alt="加油"></p>
<hr>
]]></content>
      
        <categories>
            
            <category> review </category>
            
        </categories>
        
        
        <tags>
            
            <tag> full-time </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
