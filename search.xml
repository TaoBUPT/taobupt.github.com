<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[UML]]></title>
      <url>/2017/10/19/UML/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="Visibility"><a href="#Visibility" class="headerlink" title="Visibility"></a>Visibility</h2><table>
<thead>
<tr>
<th>public</th>
<th>private</th>
<th>protected</th>
<th>package</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>-</td>
<td>#</td>
<td>~</td>
</tr>
</tbody>
</table>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><table>
<thead>
<tr>
<th>ClassName</th>
</tr>
</thead>
<tbody>
<tr>
<td>- name: String <br> -id: int</td>
<td></td>
</tr>
<tr>
<td>+ getName(): String <br> + getId(): int</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><table>
<thead>
<tr>
<th>&lt;&lt; interface &gt;&gt; <br> interface name</th>
</tr>
</thead>
<tbody>
<tr>
<td>+ draw(): void</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><table>
<thead>
<tr>
<th>&lt;&lt; enumeration &gt;&gt; <br> enumeration name</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACE <br> ONE <br> TWO</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Implements"><a href="#Implements" class="headerlink" title="Implements"></a>Implements</h2><p><img src="https://lh3.googleusercontent.com/pg5wXEd4iS29fbp6SfLrCwfvPX4MZCTX-FVDNHstVLCA0gIEpx42X3tpnVRbrfButmavgeFwmPkRMXDlQUBI2CqQ52MKdugz0N-LWCd6y0iBtTCYb_qsvUKxTNE_LagqZhKIWPgJZQ" alt="implementation"></p>
<p><strong>——&gt;</strong> is dependency</p>
<p><img src="https://lh3.googleusercontent.com/x8dTpof05ZFQ0cpQ0oKNo_dKT68KblcxaSHe5NNx_0ZDTt_184bXorFo_g_tktYxsn-3JvAU1rVQ9pa8_zzLqfaRGsp5BczyMMtYICkNwCmyDHBL9TSJQaRV0YReZ9TujSXK7E5r2w" alt=""> implement interface</p>
<p><img src="https://lh3.googleusercontent.com/Ia4bDBUNIIJO-mV6fZZRSnIJj4px03DubtDhcKdrQB-bViQxV7e1mgb1Bcx2mfpQAQ5n5EzxNtF2J8a6NOxMA8O5I4iFruUmTe2YpDwD54F7Y2SnNqdblXf3qIfRHNbvpkkAF8kTVg" alt=""> extend parent class</p>
<hr>
]]></content>
      
        <categories>
            
            <category> fulltime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BrainTeaserQuestions]]></title>
      <url>/2017/10/19/BrainTeaserQuestions/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="puzzles"><a href="#puzzles" class="headerlink" title="puzzles"></a>puzzles</h3><ol>
<li><p>how to measure 45 minutes using two identical wires?</p>
<ul>
<li>light two ends of one wire and one end of another wire, 1st wire burns out after 30 min. Now second would take 30 min to complete. As soon as 1st wire burns out completely, light the 2nd from other side,, now it will take 15 min. So you got 45 min.</li>
</ul>
</li>
<li><p>find ages of daughters. </p>
<ul>
<li>the product of their age is 72</li>
<li>the sum of their ages is equal to house number (goes out and look at the house number and still cann’t know)</li>
<li>the oldest of the girls strawbarry ice-cream</li>
<li>1 <em> 1 </em> 72=72; 1 <em> 2 </em> 36 =72; 1<em> 4 </em> 18 =72; 1 <em> 6 </em> 12 =72; 1 <em> 8 </em> 9 =72; 2 <em> 2 </em> 18 = 72; 2 <em> 3 </em> 12 =72; 2 <em> 4 </em> 9 = 72; 2 <em> 6 </em> 6 = 72; 3 <em> 3 </em> 8 =72; 3 <em> 3 </em> 8 = 72; 3 <em> 4 </em> 6 = 72;</li>
<li>1+1+72 =74; 1+2+36 = 39; 1+3+24 =28; 1+4+18=23; 1+6+12=19; 1+8+9=18; 2+2+18=22; 2+3+12=17;2+4+9=15; 2+6+6 = 14;3+3+8=14;3+4+6=13;</li>
<li>All sum are unique 14, so the age sum must have been 14; otherwise he would guessed the ages from the number of houses,and the have only one oldest girl. So we can get 3,3,8;</li>
</ul>
</li>
<li><p>pay an employee using a 7 units gold rod?</p>
<ul>
<li>an employee works for an employer for 7 days, the employer has a gold rod of 7 units, how does he pays to the employee so that the employee gets 1 unit at the end of everyday. The employer can make at most 2 cuts in rod</li>
<li>cut 2 times, he can get 1,2,4; first day give 1; second day, take one back and give two; third day, give 1; fourth day; take 1,2 back and give 4, and so on.</li>
</ul>
</li>
<li><p>find the poisoned wine</p>
<ul>
<li>you have 240 barrles of wine, one of which has been poisoned, after drinking the poisoned wine, one dies within 24 hours, you have 5 slaves whom you are willing to sacrifice in order to determine which barrel contains the poisoned wine. How would you do that?</li>
<li>number the barrels with 5 digit numbers consisting of 0, 1,2. 3**5 = 243 is larger than 240. Number the slaves as 1, 10, 100, 1000, 10000. Number 0 on a barrel represents the wine in the barrel will not be taken by the slave. Number 1 on a barrel represents the wine in the barrel will taken by the slave on 1st day. Number 2 on a barrel represents the wine in the barrel will taken by the slave on 2nd day.</li>
<li>let us say the barrel is numbered 11201, the wine in this barrel is taken on the first day by the slave numbererd 10000, 1000 and 1, it is taken on the second day by slave numbered 100, And it is not taken by the slave numbered 10. If the slave numbered 10000, 1000 and 1 die within first 24 hours, slave numbered 100 dies in the next 24 hours and the slave numbered 10 does not die. Then the poisoned barrel has to be 11201.</li>
</ul>
</li>
<li><p>3 bulbs and 3 switches</p>
<ul>
<li>there is a room with a door and three light blubs. Outside the room there are three switches, connected to the blubs. You may manipulate the switches as you wish, but once you open the door you cann’t change them. Identify each switch with its bulb.</li>
<li>Trun on switch X for 5 to 10 minutes, turn it off and trun on switch Y, open the door and touch the light bulb.</li>
<li>if the light is on, it is y. if the light is off and hot, it is X. if the light is off and cold, it is z</li>
</ul>
</li>
<li><p>find the jar with contaminated pills</p>
<ul>
<li>you have 5 jars of pills, each pill weights 10 grams,except for a contaminated pills contained in one jar, which each pull weights 9 grams. Given a scale, how could you tell which jar had the contaminated pills in just one measurement?</li>
<li>take out 1 pill from jar 1, 2 pills from jar 2, 3 pills from jar 3, 4 pills from jar 4 and 5 pills from jar 5. Put all these 15 pills on scale. If the weight is 149 then jar 1 is targeted, 148 then jar 2 is targeted, 147 then jar 3 is targeted, 146 then jar 4 is targeted, 145 then jar 5 is targeted.</li>
</ul>
</li>
<li><p>Monty hall problem.</p>
<ul>
<li>Suppose you’re on a game show, and you’re given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what’s behind the doors, opens another door, say No. 3, which has a goat. He then says to you, “Do you want to pick door No. 2?” Is it to your advantage to switch your choice?</li>
<li>always swaping, if you donn’t swap, you have 1/3 to get the car, if you swap the choice, you cannot get the car only if you first pick is car(1/3), so you can get the car after swapping with a probabllity of 2/3</li>
</ul>
</li>
<li><p>Find the fastest 3 horses</p>
<ul>
<li>There are 25 horses among which you need to find out the fastest 3 horses. You can conduct race among at most 5 to find out their relative speed. At no point you can find out the actual speed of the horse in a race. Find out how many races are required to get the top 3 horses.</li>
<li>共七次，先分成五队，找出最大的，每一组最后两名删掉（-10），5组最快的再赛一次，后两名所在的组删掉（-6），这样我们就得到了第一快的马，假设A组，A1,A2,A3, B组: B1,B2,B3, C组：C1,C2,C3.第一名A1，挑出来了， 从剩下的8匹再挑俩，c2,c3可以删了，b3，可以删了，这样A2, A3, B1, B2, C1 再赛一场，然后找前俩名就好了</li>
</ul>
</li>
<li><p>A Man with Medical Condition and 2 Pills</p>
<ul>
<li><p>A man has a medical condition that requires him to take two kinds of pills, call them A and B. The man must take exactly one A pill and exactly one B pill each day, or he will die. The pills are taken by first dissolving them in water.The man has a jar of A pills and a jar of B pills. One day, as he is about to take his pills, he takes out one A pill from the A jar and puts it in a glass of water. Then he accidentally takes out two B pills from the B jar and puts them in the water. Now, he is in the situation of having a glass of water with three dissolved pills, one A pill and two B pills. Unfortunately, the pills are very expensive, so the thought of throwing out the water with the 3 pills and starting over is out of the question. How should the man proceed in order to get the right quantity of A and B while not wasting any pills?</p>
</li>
<li><p>add one more A pill into the glass and take half today and take half tomorrow. It works under the following assumptions: the dissolved Pills can be used next day; The man has to take pills at least for one more day.</p>
</li>
</ul>
</li>
<li><p>You are blindfolded and 10 coins are place in front of you on table. You are allowed to touch the coins, but can’t tell which way up they are by feel. You are told that there are 5 coins head up, and 5 coins tails up but not which ones are which.</p>
<ul>
<li>Can you make two piles of coins each with the same number of heads up? You can flip the coins any number of times.</li>
<li>Make 2 piles with equal number of coins. Now, flip all the coins in one of the pile. If there is x head, 5-x tail in one pile, 5-x head, x tail in another pile, flip first pile, we get x tail, 5-x head, the same as second pile.</li>
</ul>
</li>
<li><p>There are 4 persons (A, B, C and D) who want to cross a bridge in night. </p>
<ul>
<li>A takes 1 minute to cross the bridge.</li>
<li>B takes 2 minutes to cross the bridge.</li>
<li>C takes 5 minutes to cross the bridge.</li>
<li>D takes 8 minutes to cross the bridge.</li>
<li>There is only one torch with them and the bridge cannot be crossed without the torch. There cannot be more than two persons on the bridge at any time, and when two people cross the bridge together, they must move at the slower person’s pace,Can they all cross the bridge in 15 minutes?</li>
<li>A and B cross the bridge. A comes back. Time taken 3 minutes. Now B is on the other side.<br>C and D cross the bridge. B comes back. Time taken 8 + 2 minutes. Now C and D are on the other side.<br>A and B cross the bridge. Time taken is 2 minutes. All are on the other side.Total time spent is 3 + 10 + 2 = 15 minutes.</li>
</ul>
</li>
<li><p>There are 1000 wine bottles. One of the bottles contains poisoned wine. A rat dies after one hour of drinking the poisoned wine. How many minimum rats are needed to figure out which bottle contains poison in hour.</p>
<ul>
<li>10 rats, We need to figure out in hour. We need 10 rats to figure out the poisoned bottle. The result is based on binary number system. We get 10 using ⌈ Log21000 ⌉.</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> fulltime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> puzzles </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaException]]></title>
      <url>/2017/10/18/JavaException/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="customize-exception"><a href="#customize-exception" class="headerlink" title="customize exception"></a>customize exception</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class MyException extends RuntimeException&#123;</div><div class="line">    public MyException(String msg)&#123;</div><div class="line">        super(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> fulltime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaDataStructures]]></title>
      <url>/2017/10/18/JavaDataStructures/</url>
      <content type="html"><![CDATA[<h2 id="java-data-structures"><a href="#java-data-structures" class="headerlink" title="java data structures"></a>java data structures</h2><ul>
<li>PriorityQueue</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/DcQHnCuF4zf8wfyqHKwAavlBhFrTWq2LFwXJyr3hCKa79qfZvmDHtXXb4FZa8AZ0VjfU22rnRqpWXgB8PdQ1Z9bIuLm7RBQMk1V76tO3ig8mGEtszksY_iLGVipIo8HvYQ-cH-cdeg" alt="heap"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">package design;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by tao on 10/18/17.</div><div class="line"> */</div><div class="line">public class MyPriorityQueue &#123;</div><div class="line"></div><div class="line">    List&lt;Integer&gt;nums = null;</div><div class="line">    public MyPriorityQueue()&#123;</div><div class="line">        nums=new ArrayList&lt;&gt;();</div><div class="line">        nums.add(0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getLeft(int ind)&#123;</div><div class="line">        return ind*2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getRight(int ind)&#123;</div><div class="line">        return ind*2+1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getParent(int ind)&#123;</div><div class="line">        return ind/2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void heapify(int ind)&#123;</div><div class="line">        int size = nums.size();</div><div class="line">        if(size&lt;=2)</div><div class="line">            return;</div><div class="line">        int l = getLeft(ind);</div><div class="line">        int r = getRight(ind);</div><div class="line">        int minInd = ind;</div><div class="line">        if(l&lt;size &amp;&amp; nums.get(l)&lt;nums.get(minInd))</div><div class="line">            minInd = l;</div><div class="line">        if(r&lt;size &amp;&amp; nums.get(r)&lt;nums.get(minInd))</div><div class="line">            minInd = r;</div><div class="line">        if(minInd!=ind)&#123;</div><div class="line">            int tmp = nums.get(minInd);</div><div class="line">            nums.set(minInd,nums.get(ind));</div><div class="line">            nums.set(ind,tmp);</div><div class="line">            heapify(minInd);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public void buildHeap()&#123;</div><div class="line">        int n = (nums.size()-1)/2;</div><div class="line">        for(int i=n;i&gt;=1;--i)</div><div class="line">            heapify(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int peek()&#123;</div><div class="line">        if(isEmpty())</div><div class="line">            throw new IndexOutOfBoundsException();</div><div class="line">        buildHeap();</div><div class="line">        return nums.get(1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void offer(int ele)&#123;</div><div class="line">        nums.add(ele);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int pop()&#123;</div><div class="line">        if(isEmpty())</div><div class="line">            throw new IndexOutOfBoundsException();</div><div class="line">        buildHeap();</div><div class="line">        int val = nums.get(1);</div><div class="line">        int size = nums.size();</div><div class="line">        nums.set(1,nums.get(size-1));</div><div class="line">        nums.remove(size-1);</div><div class="line">        return val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean isEmpty()&#123;</div><div class="line">        return nums.size()&lt;=1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> fulltime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BehaviorQuestions]]></title>
      <url>/2017/10/16/BehaviorQuestions/</url>
      <content type="html"><![CDATA[<h3 id="behavior-questions-汇总"><a href="#behavior-questions-汇总" class="headerlink" title="behavior questions 汇总"></a>behavior questions 汇总</h3><ul>
<li>given an app, if the app crash for some reason, how would you debug it to locate the problems.</li>
<li>如何处理坑队友的问题，你要直接去骂他吗还是？ =》 我答的是，如果人很nice，open minded的直接跟他说， 如果人很difficult，跟他身边的朋友说，让他的朋友提醒他。</li>
<li>如果给你很难的problem， 你肯定是要撞墙的？ 你会怎么样应对？</li>
<li>why microsoft?</li>
<li>why this position?</li>
<li>team project 怎么分工，遇到矛盾如何解决？</li>
<li>最难的一次project和组内如何分工，有人不做事怎么办，自己propose被否决怎么办？</li>
<li>说自己做的project， 团队做pj的经历，如何分工，有无leader。谁是leader？</li>
<li>遇到死脑筋的人怎么办？</li>
<li>你希望通过该职位获得什么？</li>
<li>在工作中，当与同事持不同意见时，你怎么办？</li>
<li>你的建议曾经被别人采纳过吗？</li>
<li>当你100%肯定你的上司是错的，你会怎么做？</li>
<li>当你要做某件事却缺乏足够的信息/资料时，你会怎么做？</li>
<li>你是否曾经面对“不可能完成的任务”，如在十分紧张的deadline下完成一个很有挑战的工作，你是如何应对的呢?</li>
<li>你是否曾经超额完成任务呢？请举一个例子。（did more than was required）?</li>
<li>你做过什么创新的（creative）事情呢?</li>
<li>你是否曾经简化过什么事情（simplify）？</li>
<li>请描述一下你一周/一天的工作是怎样进行的？</li>
<li>你是否曾经指导（guide or teach）团队的新成员做某件事？</li>
<li>我们这加班挺多的，你怎么看？</li>
<li>你未来几年的规划是什么呢？你将如何实现这个目标呢？</li>
</ul>
<h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzE4MjgyMw==&amp;mid=400054328&amp;idx=1&amp;sn=9b8d6d5f6cf2610860d7b130d09611cf&amp;scene=20&amp;key=0dde93ce9482a507225529844e4fe3e49ee8cc65c0fa1587112d258421de12da3f96fc498543a30f11d7a433f9982c70739c1e4af258a5ff9aa9d92240d5346d4e07f692f7c07ced0a404de445c29ad0&amp;ascene=0&amp;uin=MjI3NTEyMjUwMQ%3D%3D" target="_blank" rel="external">九章</a></li>
<li><a href="http://www.1point3acres.com/bbs/" target="_blank" rel="external">地里</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> fulltime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> behavior-questions </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaInterviewQuestions]]></title>
      <url>/2017/10/11/JavaInterviewQuestions/</url>
      <content type="html"><![CDATA[<h2 id="interview-questions"><a href="#interview-questions" class="headerlink" title="interview questions"></a>interview questions</h2><ul>
<li><p>Exception</p>
<ul>
<li>unchecked exception: error(out of memory) and runtime exception(outof boundary)</li>
<li>IO exception(socket, file not found)</li>
</ul>
</li>
<li><p>Most important feature</p>
<ul>
<li>platform independent language: we can write and compile the java code in one platform and can execure the class in any other supported platform</li>
<li>all java classes have same .class files, different platforms have different jvms to exectue.</li>
</ul>
</li>
<li><p>difference between a JDK and JVM</p>
<ul>
<li>jdk contains tools needed to develop the java programs, and jre to run the programs</li>
<li>jre( java runtime environment) = jvm (java virtual machine)+ java packages classes (util, math, lang)</li>
<li>jvm provides a platform- independent way of executing code, which means compile once in any machine and run it any where</li>
</ul>
</li>
<li><p>what is a pointer and does java support pointers?</p>
<ul>
<li>pointer is a variable to store the address. Imporper handling of pointers leads to memory leaks and reliability issues hence java doesn’t support the usage of pointers</li>
</ul>
</li>
<li><p>what is the base class of all classes?<br>-java.lang.object</p>
</li>
<li><p>does java support multiple inheritance?</p>
<ul>
<li>java doesn’t support multiple inheritance</li>
</ul>
</li>
<li><p>is java a pure object oriented language?<br>-No, java uses primitive data types and hence is not a pure object oriented language</p>
</li>
<li>are arrays primitive data types?<br>-no, arrays are objects</li>
<li>what is difference between path and classpath?<ul>
<li>path and classpath are operating system level environment variables. Path is used define where system can find the executables(.exe) files and classpath is used to specify the location .class file</li>
</ul>
</li>
<li>what are local variable<ul>
<li>local variables are those which are declared within a block of code like methods. local variables should be <strong>initialized</strong> before accessing them.</li>
</ul>
</li>
<li>what are instance variable?<ul>
<li>instance variables are those which are defined at the class level. Instance variables need not be initialized before using them as they are automatically initialized to their default values</li>
</ul>
</li>
<li>how to define a constant variable in java?<ul>
<li>static and final</li>
</ul>
</li>
<li>should a main() method be compulsorily declared in all java classes?<ul>
<li>not required. main() method should be defined only if the soure class is a java application</li>
</ul>
</li>
<li>what is the return type of main() method?<ul>
<li>void</li>
</ul>
</li>
<li>why is the main() method declared static?<ul>
<li>main() method is called by the jvm even before the instantiation of the class hence it is declared as static</li>
</ul>
</li>
<li>can a main() method be overloaded?<ul>
<li>yes, you can have any number of main() methods with different method signature and implementation in the class.</li>
</ul>
</li>
<li>can a main() method be declared final?<ul>
<li>yes, any inherting class will not be able to have it’s own default main() method</li>
</ul>
</li>
<li>can a soure file contain more than one class declaration?<ul>
<li>yes, a single source file can contain any number of class declarations but only one of the class can be declared as public</li>
</ul>
</li>
<li>what is a package?<br>-package is collection of related classes and interfaces. package declaration should be first statement in a java class.</li>
<li>which package is imported by default?<ul>
<li>java.lang.package is imported by default even without a package declaration.</li>
</ul>
</li>
<li><p>what is the purpose of declaring a variable as final?</p>
<ul>
<li>a final variable’s value can’t be changed, final variables should be initialized before using them.</li>
</ul>
</li>
<li><p>what is the impact of declaring a method as final?</p>
<ul>
<li>a method declared as final cannot be overridden. A sub-class can’t have the same method signature with a different implementation. </li>
</ul>
</li>
<li><p>I do not want my class to be inherited by any other class, what should i do?</p>
<ul>
<li>you should declare your classes as final, but you cann’t define your class as final if it is an abstract class.  A class declared as final can’t be extended by any other class.</li>
</ul>
</li>
<li><p>can you give few examples of final classes defined in JAVA API?<br>-java.lang.string, java.lang.math are final classes.</p>
</li>
<li>how is final different from finally and finalize()?<ul>
<li>final is a modifer which can be applied to a class or a method or a variable. final class can’t be overridden and final variable cann’t be changed.</li>
<li>The finally keyword is used in association with a try / catch block and guarantees<br>that a section of code will be executed, even if an exception is thrown</li>
<li>finalize() is a method of object class will be executed by the jvm just before collecting object to give a final chance for resource releasing activity.</li>
</ul>
</li>
<li>when will you define a method as static?<ul>
<li>when a method needs to be accessed even before the creation of the object of the class then we should declare the method as static. </li>
</ul>
</li>
<li>what are the restriction imposed on a static method or a static block of code?<ul>
<li>a static method should not refer to instance variables without creating an instance and cannot use “this” operator to refer the instance</li>
</ul>
</li>
<li>what is the importance of static varibale?<ul>
<li>static variables are class level variable where all objects of the class refer to the same variable. If one object chanegs the value then the change gets reflected in all the objects.</li>
</ul>
</li>
<li><p>can we declare a static variable inside a method?</p>
<ul>
<li>static variables are class level variables and they cann’t be declared inside a method. If declared, the class will not compile.</li>
</ul>
</li>
<li><p>what is an abstract class and what is its purpose?<br>a class which doesn’t provide complete implemenation is defined as an abstract class. abstract classes enforce abstraction.</p>
</li>
<li>what is use of an abstract variable?<ul>
<li>variables cannot be declared as abstrct, only classes and methods can be declared as abstract.</li>
</ul>
</li>
<li><p>can you create an object of an abstract class?</p>
<ul>
<li>not possible, abstract classes cann’t be instantiated.</li>
</ul>
</li>
<li><p>can an abstract class be defined without any abstract methods?</p>
<ul>
<li>yes it is possible. this is basically to avoid instance creation of the class.</li>
</ul>
</li>
<li><p>can an method inside an interface be declared as final?</p>
<ul>
<li>not possible, doing so will result in compilation error. public and abstract are the only applicable modifiers for method declaration in an interface.</li>
</ul>
</li>
<li><p>can an interface extend another interface?</p>
<ul>
<li>interfaces doesn’t provide implementation hence an interface cannot implement another interface.</li>
</ul>
</li>
<li><p>why is an interface be able to extend more than one interface but a class cann’t be extend more one class</p>
<ul>
<li>basically java doesn’t allow multiple inheritance, so a class is restriced to extend only one class. but an interface is a pure abstraction model and doesn’t have inheritance hierarchy like classes. so an interface is allowed to extend more than one interface.</li>
</ul>
</li>
<li><p>can a class be defined inside an interface?</p>
<ul>
<li>yes it’s possible</li>
</ul>
</li>
<li><p>can an interface be defined inside a class?</p>
<ul>
<li>yes it’s possible</li>
</ul>
</li>
<li><p>what is a marker interface?</p>
<ul>
<li>an interface which doesn’t have any declaration inside but still enforeces a mechanism</li>
</ul>
</li>
<li>which object oriented concept is achieved by using overloading and overriding?<br>-polymorphism</li>
<li>why does java not support operator overloading?<br>-operator overloading make the code very difficult to read and maintain. To maintain code simplicity, java does’t support operator overloading</li>
<li><p>can we define private and proteced modifiers for variables in interfaces?</p>
<ul>
<li>no, public abstract</li>
</ul>
</li>
<li><p>what is externalizable?</p>
<ul>
<li>externlizable is an interface that extends serializable interface, and sends data into streams is compressed format, it has two methods, writeExternal(objectoutput out) and readExternal(Object in)</li>
</ul>
</li>
<li><p>what modifiers are allowed for methods in an interfaces?</p>
<ul>
<li>only public and abstract modifiers are allowed for methods in interfaces.</li>
</ul>
</li>
<li><p>what is an abstract method?</p>
<ul>
<li>an abstract method is a method is a method whose implemenation is deferred to a subclass.</li>
</ul>
</li>
<li><p>what value does read() read when it has reached the end of a file?</p>
<ul>
<li>the read() method return -1 when it has reached the end of a file.</li>
</ul>
</li>
<li><p>what is the difference between a static and a non-static inner class?</p>
<ul>
<li>a non-static nested class has full access to the members of the class within which it is nested. A static nested class does not have a reference to a nesting instance, so a static nested class does not have a reference to a nesting instance, so a static nested class cannot invoke non-static methods or access non-static fields of an instance of the class within which it is nested.</li>
</ul>
</li>
<li><p>what’s an object lock and which object’s have locks?</p>
<ul>
<li>an object’s lock is a mechanism that is used by multiple threads to obtain synchronized access to the object. A thread may execute a synchronized method of an object only after it has acquired the object’s lock. all object and classes have locks. A class’s lock is acquired on the class’s Class object.</li>
</ul>
</li>
<li>When can an object reference be cast to an interface reference?<ul>
<li>An object reference be cast to an interface reference when the object implements the referenced interface.</li>
</ul>
</li>
<li>Which non-Unicode letter characters may be used as the first character of an identifier?<ul>
<li>The non-Unicode letter characters $ and _ may appear as the first character of an identifier</li>
</ul>
</li>
<li>what is casting?<ul>
<li>There are two types of casting, casting between primitive numeric types and casting between object references. Casting between numeric types is used to convert larger values, such as double values, to smaller values, such as byte values. Casting between object references is used to refer to an object by a compatible class, interface, or array type reference.</li>
</ul>
</li>
<li>what is downcasting?<ul>
<li>There are two types of casting, casting between primitive numeric types and casting between object references. Casting between numeric types is used to convert larger values, such as double values, to smaller values, such as byte values. Casting between object references is used to refer to an object by a compatible class, interface, or array type reference.</li>
</ul>
</li>
<li><p>what is a native method?</p>
<ul>
<li>A native method is a method that is implemented in a language other than Java.</li>
</ul>
</li>
<li><p>What does it mean that a method or field is “static”?</p>
<ul>
<li>static variables and methods are instantiated only once per class. In other words they are class variables, not instance variables. If you change the value of a static variable in a particluarl object, the value of that variable changes for all instances of that class. Static methods can be referenced with the name of the class rather than the name of a particular object of the class. That’s how libray methods like system.out.println() work. out is a static field in the java.lang.sytem. class</li>
</ul>
</li>
<li><p>is null| true| false| sizeof a keyword?</p>
<ul>
<li>the null value is not a keyword</li>
</ul>
</li>
<li>Does a class inherit the constructors of its superclass?<ul>
<li>a class does not inherit constructors from any of its superclasses.</li>
</ul>
</li>
<li><p>what is the difference between inner class and nested class?</p>
<ul>
<li>when a class is defined within a scope od another class, then it becomes inner class. If the access modifier of the inner class is static, then it becomes nested class.</li>
</ul>
</li>
<li><p>what is numeric promotion?</p>
<ul>
<li>numberic promotion is the conversion of a smaller numeric type to a larger numberic type, so that integer and floating point operations may take place, in numerical promotion, byte, char, and short values are converted to int values.</li>
</ul>
</li>
<li><p>what is the difference between the prefix and postfix forms of the ++ operator?</p>
<ul>
<li>the prefix form performs the increment operation and returns the value of the increment opeation, the postfix form returns the current value of all of the expression and then performs the increment operation on that value.</li>
</ul>
</li>
<li><p>what is the difference between the &gt;&gt; and &gt;&gt;&gt; operators?</p>
<ul>
<li>the &gt;&gt; operator carries the sign bit when shifting right. The &gt;&gt;&gt; zero-fills bits that have been shifted out.</li>
</ul>
</li>
</ul>
<ul>
<li>hash map</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">public class MyHashMap&lt;K,V&gt;&#123;</div><div class="line">	class Entry&lt;K,V&gt;&#123;</div><div class="line">		K key;</div><div class="line">		V value;</div><div class="line">		Entry(K key, V value)&#123;</div><div class="line">		this.key=key;</div><div class="line">		this.value=value;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private int capacity =16;</div><div class="line">	private List&lt;LinkedList&lt;Entry&lt;K,V&gt;&gt;&gt; buckets;</div><div class="line">	public MyHashMap()&#123;</div><div class="line">		buckets = new ArrayList&lt;&gt;();</div><div class="line">		for(int i=0;i&lt;capacity;++i)&#123;</div><div class="line">			buckets.add(i,null);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void put(K key, V value)&#123;</div><div class="line">		if(key==null)&#123;</div><div class="line">			return new NullPonterException(&quot;Key cannot be null&quot;);</div><div class="line">		&#125;</div><div class="line">		int index = key.hashCode()%capacity;</div><div class="line"></div><div class="line">		if(buckets.get(index)==null)</div><div class="line">			buckets.set(index,new LinkedList&lt;Entry&lt;K,V&gt;&gt;());</div><div class="line"></div><div class="line">		LinkedList&lt;Entry&lt;K,V&gt;&gt;bucket = buckets.get(index);</div><div class="line">		Iterator&lt;Entry&lt;K,V&gt;&gt;iteartor = bucket.iterator();</div><div class="line">		while(iterator.hasNext())&#123;</div><div class="line">			Entry&lt;K,V&gt;entry = iterator.next();</div><div class="line">			if(entry.key.equals(key))&#123;</div><div class="line">				entry.value=value;</div><div class="line">				return;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		bucket.add(new Entry&lt;&gt;(key,value));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public V get(K key)&#123;</div><div class="line">		if(key == null)&#123;</div><div class="line">			throw new NullPonterException(&quot;key cannot be null!&quot;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		int index = key.hashCode()%capacity;</div><div class="line">		if(buckets.get(index)==null)</div><div class="line">			return null;</div><div class="line"></div><div class="line">		LinkedList&lt;Entry&lt;K,V&gt;&gt;bucket = buckets.get(index);</div><div class="line">		Iterator&lt;Entry&lt;K,V&gt;&gt;iterator = bucket.iterator;</div><div class="line">		while(iterator.hasNext())&#123;</div><div class="line">			Entry&lt;K,V&gt;entry = iterator.next();</div><div class="line">			if(entry.key.equals(key))&#123;</div><div class="line">				return entry.value;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return null;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="other-questions"><a href="#other-questions" class="headerlink" title="other questions"></a>other questions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div></pre></td><td class="code"><pre><div class="line">1. What’s difference between the stack and heap?</div><div class="line">Stack is used for static memory allocation and Heap for dynamic memory allocation, both stored in the computer’s RAM.</div><div class="line"></div><div class="line">stack is faster and its allocation is dealt with when program is compiled</div><div class="line"></div><div class="line">varibale allocated on the heap have their allocated at run time and accessing this memory is a bit slower, its size is only limited by the size of virtual memory</div><div class="line"></div><div class="line">the stack is the memory set aside as scratch space for  a thread of execution. When a function is called, a block is reserved on the top of the stack for local varibales and some bookkeeping data</div><div class="line">when that function returns, the block becomes unused and can be used the next time a function is called. The stack is always reserved in a LIFO order</div><div class="line">the most recently reserved block is always the next block to be freed, this makes it really simple to keep track of the stack.</div><div class="line"></div><div class="line">the heap is memoyr set aside for dynamic allocation, unlike the stack, there is no enforced pattern to be allocation and deallocation of blocks from the heap</div><div class="line">you can alloate a block at any time and free it at any time. this makes it much more complex to keep track of which parts of the heap are allocated or free at any given time</div><div class="line"></div><div class="line">2. breaking out of nested loop in java</div><div class="line">you can use break with a label for the outer loop</div><div class="line"></div><div class="line">3. can a java file have more than one class</div><div class="line"></div><div class="line">yes, it can.However, there can only be one public class per.java file, as public classes must have the same name as the source file.The purpose of including multiple classes in one source file is to</div><div class="line">bundle related support functionality(internal data structures, support classes, etc) together with the main public class</div><div class="line"></div><div class="line">4. switch statement</div><div class="line">A switch works with the bytes, short, char and int primitive data types, it also works with enumerated types, the string class and “Character Byte short integer”</div><div class="line"></div><div class="line">5. class and interface</div><div class="line">//if class has fields and methods, what about interface:</div><div class="line">fileds : must be public final</div><div class="line">methods : must be public abstract</div><div class="line"></div><div class="line">6. //four featurs of OOP</div><div class="line"></div><div class="line">Encapsulation is one of the four fundamental OOP concepts.The other three are inheritance, polymorphism, and abstraction.</div><div class="line">Encapsulation in Java is a mechanism of wrapping the data(variables) and code acting on the data(methods) together as a single unit.</div><div class="line">In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class.Therefore, it is also known as data hiding.</div><div class="line">To achieve encapsulation in JAVA</div><div class="line">Declare the variable of a class as private, provide public setter and getter methods to modify and view the variables value</div><div class="line"></div><div class="line">7. polymorphism</div><div class="line">The ability to identify a function to run is called Polymorphism.In java, c++ there are two types of polymorphism : compile time polymorphism(overloading) and runtime polymorphism(overriding)</div><div class="line"></div><div class="line">Mehtod overriding : Overriding occurs when a class method has the same name and signature as a method in parent class.When you override methods, </div><div class="line">JVM determines the proper methods to call at the program’s run time, not at the compile time.</div><div class="line"></div><div class="line">Overloading : Overloading is determined at the compile time.It occurs when several methods have same names with :</div><div class="line">Different method signature and different number or type of parameters.</div><div class="line">Same method signature but different number of parameters.</div><div class="line">Same method signature and same number of parameters but of different type</div><div class="line"></div><div class="line">8. abstarction</div><div class="line">Occurs during class level design, with the objective of hiding the implementation complexity of how the features offered by </div><div class="line">an API / design / system were implemented, in a sense simplifying the interface to acces the underlying implementation</div><div class="line"></div><div class="line">9. What is the difference between an Interface and Abstract class</div><div class="line">All methods in an interface are implicitly abstract.On the other hand, an abstract class may contain both abstract and non - abstract methods.</div><div class="line">A class may implement a number of Interfaces, but can extend only one abstract class.</div><div class="line">In order for a class to implement an interface, it must implement all its declared methods.However, a class may not implement all declared methods of an abstract class.</div><div class="line">Abstract classes can implement interfaces without even providing the implementation of interface methods.</div><div class="line">Variables declared in a Java interface is by default final.An abstract class may contain non - final variables.</div><div class="line">Members of a Java interface are public by default.A member of an abstract class can either be private, protected or public.</div><div class="line">//An interface is absolutely abstract and cannot be instantiated.An abstract class also cannot be instantiated, but can be invoked if it contains a main method.</div><div class="line"></div><div class="line">10 Main difference between a CLASS and INTERFACE is :</div><div class="line"></div><div class="line">-Class has both definition and an implementation whereas Interface only has a definition.</div><div class="line">-Interfaces are actually implemented via a Class.</div><div class="line"></div><div class="line">11 final keyword</div><div class="line">• Variable : The value cannot be changed once initialized.//the context can be changed, but the reference can’t chang.</div><div class="line">• Method : The method cannot be overridden by asubclass.</div><div class="line">• Class. - The class cannot be subclassed.</div><div class="line">The finally keyword is used in association with a try / catch block and guarantees</div><div class="line">that a section of code will be executed, even if an exception is thrown.The finally</div><div class="line">block will be executed after the try and catch blocks, but before control transfers back</div><div class="line">to its origin.</div><div class="line">Throws clause in used to declare an exception and throw keyword is used to throw an exception explicitly</div><div class="line">Throw new Exception(“You have some exception”)</div><div class="line">Throws IOException, ArithmeticException, NullPointerException</div><div class="line"></div><div class="line">Finalize method :</div><div class="line">Is is an object method.It is called when an object is about to get garbage collected.That can be at any time after it has become eligible for garbage collection</div><div class="line"></div><div class="line">12 What is the difference between == vs equals in java</div><div class="line">The == operator tests whether two variable have the same references : memory address</div><div class="line">The equals method tests whether two variables refer to objects that have the same state(values)</div><div class="line"></div><div class="line">13 Difference between an instance and static variable ?</div><div class="line">A static variable is shared by all instances of the class, while an instance variable is unique to each instance of the class</div><div class="line">A static variable’s memory is allocated at compile time, they are loaded at load time and initialized at class initialization time.</div><div class="line">In the case of an instance variable all of the above is done at run time</div><div class="line"></div><div class="line">14. Calling non - static method in static method in java ?</div><div class="line">The only way to call a non - static method from a static method is to have an instance of the class containing the non - static method,</div><div class="line">by defination, a non - static method is one that is called on an instance of some class, whereas a static method belongs to the class itself.</div><div class="line"></div><div class="line">15 Difference between int and integer</div><div class="line">Int is a primitive type.Integer is a class with a single field of type int.</div><div class="line">This class is used where you need an int to be treated like any other object, such as generic types of situations where you need nullability</div><div class="line"></div><div class="line">16 Constructor can be override ?</div><div class="line">No, cann’t be inherited, so can’t be override</div><div class="line"></div><div class="line">17 Static methods can’t be abstract in java :</div><div class="line">Because “abstract” means : ”implements no functionality”, and “static” means : there is functionality even if you don’t have an object instance.That is logical contradiction</div><div class="line"></div><div class="line">18 nested class</div><div class="line">Nested classes are divided into two categories : static and non - static.Nested class that are declared static are simply called static nested classes. Non - static nested classes are called inner classes</div><div class="line"></div><div class="line">Static nested classes are accessed using the enclosing class name</div><div class="line">//OuterClass.StaticNestedClass</div><div class="line">//OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();</div><div class="line"></div><div class="line">An instance of InnerClass can exist only within an instance of outerclass and has direct access to the method and fields of its enclosing instance</div><div class="line">To instantiate an inner class, you must first instantiate the outer class.The, create the inner object with the outer object with</div><div class="line">// Outerclass.innerclass innerObject=outerObject.new Innerclass()</div><div class="line"></div><div class="line"></div><div class="line">//static class: declared as a static member of another class</div><div class="line"></div><div class="line">//inner class: declared as an instance member of another class</div><div class="line">inner class instance has access to the instance members of the containing class instance.These enclosing instance members are </div><div class="line">referred to inside the inner class via just their simple names, not via this (this in the inner class refers to the inner class instance, not the associated containing class instance) :</div><div class="line">//local inner class : declared inside an instance method of another class</div><div class="line">so it can only be instantiated and have its members accessed within its containing method.</div><div class="line"></div><div class="line">public class Outerclass &#123;</div><div class="line">	// instance method of the outer class </div><div class="line">	void my_Method() &#123;</div><div class="line">		int num = 23;</div><div class="line"></div><div class="line">		// method-local inner class</div><div class="line">		class MethodInner_Demo &#123;</div><div class="line">			public void print() &#123;</div><div class="line">				System.out.println(&quot;This is method inner class &quot; + num);</div><div class="line">			&#125;</div><div class="line">		&#125; // end of inner class</div><div class="line"></div><div class="line">		// Accessing the inner class</div><div class="line">		MethodInner_Demo inner = new MethodInner_Demo();</div><div class="line">		inner.print();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		Outerclass outer = new Outerclass();</div><div class="line">		outer.my_Method();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//anonymous inner class : like a local inner class, but written as an expression which returns a one - off object</div><div class="line">have no name</div><div class="line">An anonymous inner class is a syntactically convenient way of writing a local inner class</div><div class="line">If you want a local inner class which implements multiple interfaces or which implements interfaces </div><div class="line">while extending some class other than Object or which specifies its own constructor, you&apos;re stuck creating a regular named local inner class//就是说要用anonymous inner class</div><div class="line"></div><div class="line">abstract class Person &#123;</div><div class="line">	public abstract void eat();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Child extends Person &#123;</div><div class="line">	public void eat() &#123;</div><div class="line">		System.out.println(&quot;eat something&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Demo &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Person p = new Child();</div><div class="line">		p.eat();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">actually you can write this way</div><div class="line">abstract class Person &#123;</div><div class="line">	public abstract void eat();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Demo &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Person p = new Person()&#123;</div><div class="line">			public void eat() &#123;</div><div class="line">				System.out.println(&quot;eat something&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		p.eat();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">19 does finally always exectutes in JAVA?</div><div class="line">Finally will be called</div><div class="line"></div><div class="line">The only times finally won’t be called are :</div><div class="line"></div><div class="line">If you call System.exit()</div><div class="line">If the jvm crashes first</div><div class="line">If there is an infinite loop in the try block</div><div class="line">If the power turns off</div><div class="line"></div><div class="line">20 exception in java</div><div class="line"></div><div class="line">Errors and RuntimeExceptions are unchecked</div><div class="line">all other exceptions  are checked</div><div class="line"></div><div class="line">Difference between Error and Exception :</div><div class="line">Error : indicates serious problems that a reasonable application should not try to catch</div><div class="line">Exception : indicates conditions that a reasonable application might want to catch</div><div class="line"></div><div class="line">21 List five runtime exception :</div><div class="line">NullPointerException.ArrayIndexOutofBoundsException.ClassCastException</div><div class="line">IllegalArgumnetException IllegalStateException</div><div class="line"></div><div class="line"></div><div class="line">25 What is the difference between asynchronous and synchronous execution ?</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">27 Difference between arraylist and vector</div><div class="line">They are almost same : implement List interface, get element according to its index</div><div class="line">Diff :</div><div class="line">Vectors are synchronized, arraylist are not :</div><div class="line">Data growth methods</div><div class="line">Synchronization :</div><div class="line">If multiple thread access an Arraylist concurrently then we must externally sunchronize the block of code which modifies the list either structurally or simply modify an element.</div><div class="line">structural modeifications means addition or deletions of elemetns from the list, Setting the value of an existing element is not structure modicfication</div><div class="line"></div><div class="line">data growth</div><div class="line">Internally, both the arraylist and vector hold onto their contents using an array, when an element is inserted into an arraylist or a vector,</div><div class="line">the object will need to expand its internal array if run out of room.A vector defaults to doubling the size of its array, while the arraylist increases its array size by 50 percent</div><div class="line"></div><div class="line">28 diff between hashtable and hashmap</div><div class="line">Hashtable is synchronized, whereas hasmap is not.This makes HashMap better for non - treaded applications, as unsynchroinzed objects typically pefrom better than synchronized ones</div><div class="line">Hashtable does not allow null keys or values, hasmap allows one null key and any number of null values</div><div class="line"></div><div class="line">29 Difference Between Array And ArrayList In Java </div><div class="line"></div><div class="line">resizeable: array is static in size that is fixed length data struture. one can not change the length after creating the array object</div><div class="line"></div><div class="line">primitives : arralist cannot contains primitive data types(), it can only contains object while aray can contain both primitive data types as well as objects</div><div class="line"></div><div class="line">iterating the values: we can use iterator to iterate through arraylist</div><div class="line"></div><div class="line">multi-dimensional: array can be multi dimensonal, while arraylist is always single dimesional</div><div class="line"></div><div class="line">29 diff between hashset and treeset</div><div class="line"></div><div class="line">ordering: haset stores the object in random order, elements are sorted according to the natrual ordering of its elements in Treeset</div><div class="line">NULL value: hashset can store null object while treeset does not allow null object. If one try to store null object in Tree object, it will throw null pointer</div><div class="line"></div><div class="line">performance : hashset take constant time performace for basic operations like add, remove contains and size. while treeset guarantees log(N) time cost for the basic opertions</div><div class="line"></div><div class="line"> speed: hasset is much faster than tree set</div><div class="line"></div><div class="line">internal implementation: hashset are interally backed by hashmap, while treeset is RB TREE</div><div class="line"></div><div class="line">hashset uses equals method for comparsion in java while treeset uses compareTo method for maintaing ordering</div><div class="line"></div><div class="line">30 java stream</div><div class="line"></div><div class="line">Character stream implements inputstreamReader and OutputStreamWriter</div><div class="line">Byte stream : implements inputStream outputstream</div><div class="line"></div><div class="line">A byte stream access the file byte by byte.A byte stream is a suitable for any kind of file.However not quite appropriate for text files. </div><div class="line">if the file is using a unicode encoding and a character is represented with two bytes, </div><div class="line">the byte stream will treat these separately and you will need to do the conversion yourself.</div><div class="line"></div><div class="line">A character stream will read a file character by character.A character stream needs to be given the file encoding in order to work properly</div><div class="line">Character Stream is a higher level concept than Byte Stream</div><div class="line"></div><div class="line">31 Serializable is a special interface that specifies that class is serializable, it’s special in that unlike a normal interface it does not define any methods that must be implemented, </div><div class="line">it is simply marking the class as serializabl</div><div class="line"></div><div class="line">As to what “Serializable” means, it simply means converting an instance of an object  into a format where it can be written to disk, </div><div class="line">or possibly transmitted over a network, you could for example save your object to disk and reload it later, with all the field values and internal state saved.</div><div class="line"></div><div class="line">32 garbage collector</div><div class="line">garbage collector is a program which runs on the java virtual machine which gets rid of objects which are not being used by a java application anymore, it is a form of automatic memory management</div><div class="line">Automatic memory management schemes like garbage collection makes it so the programmer does not have </div><div class="line">to worry about memory management issues, so he or she can focus more on developing the applications they need to develop</div><div class="line"></div><div class="line"></div><div class="line">33 what is the most important feature of Java ?</div><div class="line">Java is a platform independent language.</div><div class="line"></div><div class="line">34 What do you mean by platform independence ?</div><div class="line">Platform independence means that we can write and compile the java code in one platform(eg Windows) and can execute the class in any other supported platform eg(Linux, Solaris, etc).</div><div class="line"></div><div class="line">35 What is a JVM ?</div><div class="line">JVM is Java Virtual Machine which is a run time environment for the compiled java class files.</div><div class="line"></div><div class="line">36 Are JVM&apos;s platform independent?</div><div class="line">JVM&apos;s are not platform independent. JVM&apos;s are platform specific run time implementation provided by the vendor.</div><div class="line"></div><div class="line">37What is the difference between a JDK and a JVM ?</div><div class="line"></div><div class="line">JDK is Java Development Kit which is for development purpose and it includes execution environment also.But JVM is purely a </div><div class="line">run time environment and hence you will not be able to compile your source files using a JVM.</div><div class="line"></div><div class="line">Java Developer Kit contains tools needed to develop the Java programs, and JRE to run the programs.The tools include compiler(javac.exe), Java application launcher(java.exe), Appletviewer, etc…</div><div class="line"></div><div class="line">Compiler converts java code into byte code.Java application launcher opens a JRE, loads the class, and invokes its main method.</div><div class="line"></div><div class="line">You need JDK, if at all you want to write your own programs, and to compile them.For running java programs, JRE is sufficient.</div><div class="line"></div><div class="line">//JRE is targeted for execution of Java files</div><div class="line"></div><div class="line">i.e.JRE = JVM + Java Packages Classes(like util, math, lang, awt, swing etc) + runtime libraries.</div><div class="line"></div><div class="line">JDK is mainly targeted for java development.I.e.You can create a Java file(with the help of Java packages), compile a Java file and run a java file.</div><div class="line"></div><div class="line">JRE(Java Runtime Environment)</div><div class="line"></div><div class="line">Java Runtime Environment contains JVM, class libraries, and other supporting files.It does not contain any development tools such as compiler, debugger, etc.</div><div class="line">Actually JVM runs the program, and it uses the class libraries, and other supporting files provided in JRE.If you want to run any java program, you need to have JRE installed in the system</div><div class="line"></div><div class="line">The Java Virtual Machine provides a platform - independent way of executing code; That mean compile once in any machine and run it any where(any machine).</div><div class="line"></div><div class="line">JVM(Java Virtual Machine)</div><div class="line"></div><div class="line">As we all aware when we compile a Java file, output is not an ‘exe’ but it’s a ‘.class’ file.‘.class’ file consists of Java byte codes </div><div class="line">which are understandable by JVM.Java Virtual Machine interprets the byte code into the machine code depending upon the underlying operating </div><div class="line">system and hardware combination.It is responsible for all the things like garbage collection, array bounds checking, etc… JVM is platform dependent.</div><div class="line"></div><div class="line">The JVM is called “virtual” because it provides a machine interface that does not depend on the underlying operating system and </div><div class="line">machine hardware architecture.This independence from hardware and operating system is a cornerstone of the write - once run - anywhere value of Java programs.</div><div class="line"></div><div class="line">There are different JVM implementations are there.These may differ in things like performance, reliability, speed, etc.These </div><div class="line">implementations will differ in those areas where Java specification doesn’t mention how to implement the features, </div><div class="line">like how the garbage collection process works is JVM dependent, Java spec doesn’t define any specific way to do this.</div><div class="line"></div><div class="line">38//What is a pointer and does Java support pointers ?</div><div class="line">Pointer is a varible to store the address.Improper handling of pointers leads to memory leaks and reliability issues hence Java doesn&apos;t support the usage of pointers.</div><div class="line"></div><div class="line">39//What is the base class of all classes ?</div><div class="line">java.lang.Object</div><div class="line"></div><div class="line">40//Does Java support multiple inheritance ?</div><div class="line">Java doesn&apos;t support multiple inheritance.</div><div class="line"></div><div class="line">41 //Is Java a pure object oriented language ?</div><div class="line">Java uses primitive data types and hence is not a pure object oriented language.</div><div class="line"></div><div class="line">42 //Are arrays primitive data types ?</div><div class="line">In Java, Arrays are objects.</div><div class="line"></div><div class="line">42 //What is difference between Path and Classpath ?</div><div class="line">Path and Classpath are operating system level environment variales.Path is used define where the system can find the executables(.exe) </div><div class="line">files and classpath is used to specify the location .class files.</div><div class="line"></div><div class="line">43 //What are local variables ?</div><div class="line">Local varaiables are those which are declared within a block of code like methods.Local variables should be initialised before accessing them.</div><div class="line"></div><div class="line">44 //What are instance variables ?</div><div class="line">Instance variables are those which are defined at the class level.Instance variables need not be initialized before using them as they are automatically initialized to their default values.</div><div class="line"></div><div class="line">45 //How to define a constant variable in Java ?</div><div class="line">The variable should be declared as static and final.So only one copy of the variable exists for all instances of the class and the value can&apos;t be changed also.</div><div class="line"></div><div class="line">static final int MAX_LENGTH = 50; is an example for constant.</div><div class="line"></div><div class="line">46 //Should a main() method be compulsorily declared in all java classes ?</div><div class="line">No not required.main() method should be defined only if the source class is a java application.</div><div class="line"></div><div class="line">47 //What is the return type of the main() method ?</div><div class="line">Main() method doesn&apos;t return anything hence declared void.</div><div class="line"></div><div class="line">48 //Why is the main() method declared static ?</div><div class="line">main() method is called by the JVM even before the instantiation of the class hence it is declared as static.</div><div class="line"></div><div class="line">49 //What is the arguement of main() method ?</div><div class="line">main() method accepts an array of String object as arguement.</div><div class="line"></div><div class="line"></div><div class="line">50 //Can a main() method be overloaded ?</div><div class="line">Yes.You can have any number of main() methods with different method signature and implementation in the class.</div><div class="line"></div><div class="line">51 //Can a main() method be declared final ?</div><div class="line">Yes.Any inheriting class will not be able to have it&apos;s own default main() method.</div><div class="line"></div><div class="line">52 //Does the order of public and static declaration matter in main() method ?</div><div class="line">No.It doesn&apos;t matter but void should always come before main().</div><div class="line"></div><div class="line">53 //Can a source file contain more than one class declaration ?</div><div class="line">Yes a single source file can contain any number of Class declarations but only one of the class can be declared as public.</div><div class="line"></div><div class="line">54 //What is a package ?</div><div class="line">Package is a collection of related classes and interfaces.package declaration should be first statement in a java class.</div><div class="line"></div><div class="line">55 //Which package is imported by default ?</div><div class="line">java.lang package is imported by default even without a package declaration.</div><div class="line"></div><div class="line">56 //Can a class declared as private be accessed outside it&apos;s package?</div><div class="line">Not possible.</div><div class="line"></div><div class="line">57 //Can a class be declared as protected ?</div><div class="line">The protected access modifier cannot be applied to class and interfaces.Methods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.</div><div class="line"></div><div class="line">58 //What is the access scope of a protected method ?</div><div class="line">A protected method can be accessed by the classes within the same package or by the subclasses of the class in any package.</div><div class="line"></div><div class="line">59 //What is the purpose of declaring a variable as final ?</div><div class="line">A final variable&apos;s value can&apos;t be changed.final variables should be initialized before using them.</div><div class="line"></div><div class="line">60 //What is the impact of declaring a method as final ?</div><div class="line">A method declared as final can&apos;t be overridden. A sub-class can&apos;t have the same method signature with a different implementation.</div><div class="line"></div><div class="line">61 //I don&apos;t want my class to be inherited by any other class. What should i do?</div><div class="line">You should declared your class as final.But you can&apos;t define your class as final, if it is an abstract class. A class declared as final can&apos;t be extended by any other class.</div><div class="line"></div><div class="line">62 //Can you give few examples of final classes defined in Java API ?</div><div class="line">java.lang.String, java.lang.Math are final classes.</div><div class="line"></div><div class="line">63 //How is final different from finally and finalize() ?</div><div class="line">final is a modifier which can be applied to a class or a method or a variable.final class can&apos;t be inherited, final method can&apos;t be overridden and final variable can&apos;t be changed. </div><div class="line"></div><div class="line">finally is an exception handling code section which gets executed whether an exception is raised or not by the try block code segment.</div><div class="line"></div><div class="line">finalize() is a method of Object class which will be executed by the JVM just before garbage collecting object to give a final chance for resource releasing activity.</div><div class="line"></div><div class="line"></div><div class="line">64 //Can a class be declared as static ?</div><div class="line">We can not declare top level class as static, but only inner class can be declared static.</div><div class="line">public class Test</div><div class="line">&#123;</div><div class="line">	static class InnerClass</div><div class="line">	&#123;</div><div class="line">		public static void InnerMethod()</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Static Inner Class!&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	public static void main(String args[])</div><div class="line">	&#123;</div><div class="line">		Test.InnerClass.InnerMethod();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//output: Static Inner Class!</div><div class="line"></div><div class="line"></div><div class="line">64 //When will you define a method as static ?</div><div class="line">When a method needs to be accessed even before the creation of the object of the class then we should declare the method as static.</div><div class="line"></div><div class="line">65 //What are the restriction imposed on a static method or a static block of code ?</div><div class="line">A static method should not refer to instance variables without creating an instance and cannot use &quot;this&quot; operator to refer the instance.</div><div class="line"></div><div class="line"></div><div class="line">66 //I want to print &quot;Hello&quot; even before main() is executed.How will you acheive that ?</div><div class="line">Print the statement inside a static block of code.Static blocks get executed when the class gets loaded into </div><div class="line">the memory and even before the creation of an object.Hence it will be executed before the main() method.And it will be executed only once.</div><div class="line"></div><div class="line"></div><div class="line">67 //What is the importance of static variable ?</div><div class="line">static variables are class level variables where all objects of the class refer to the same variable.If one object changes the value then the change gets reflected in all the objects.</div><div class="line"></div><div class="line"></div><div class="line">68 //Can we declare a static variable inside a method ?</div><div class="line">Static varaibles are class level variables and they can&apos;t be declared inside a method. If declared, the class will not compile.</div><div class="line"></div><div class="line"></div><div class="line">69 //What is an Abstract Class and what is it&apos;s purpose?</div><div class="line">A Class which doesn&apos;t provide complete implementation is defined as an abstract class. Abstract classes enforce abstraction.</div><div class="line"></div><div class="line"></div><div class="line">70 //Can a abstract class be declared final ?</div><div class="line">Not possible.An abstract class without being inherited is of no use and hence will result in compile time error.</div><div class="line"></div><div class="line"></div><div class="line">71 //What is use of a abstract variable ?</div><div class="line">Variables can&apos;t be declared as abstract. only classes and methods can be declared as abstract.</div><div class="line"></div><div class="line"></div><div class="line">72 //Can you create an object of an abstract class ?</div><div class="line">Not possible.Abstract classes can&apos;t be instantiated.</div><div class="line"></div><div class="line">73 //Can a abstract class be defined without any abstract methods ?</div><div class="line">Yes it&apos;s possible. This is basically to avoid instance creation of the class.</div><div class="line"></div><div class="line">74 //Class C implements Interface I containing method m1 and m2 declarations.Class C has provided implementation for method m2.Can i create an object of Class C ?</div><div class="line">No not possible.Class C should provide implementation for all the methods in the Interface I.Since </div><div class="line">Class C didn&apos;t provide implementation for m1 method, it has to be declared as abstract. Abstract classes can&apos;t be instantiated.</div><div class="line"></div><div class="line">75 //Can a method inside a Interface be declared as final ?</div><div class="line">No not possible.Doing so will result in compilation error. public and abstract are the only applicable modifiers for method declaration in an interface.</div><div class="line"></div><div class="line">76 //Can an Interface implement another Interface ?</div><div class="line">Intefaces doesn&apos;t provide implementation hence a interface cannot implement another interface.</div><div class="line"></div><div class="line">77// Can an Interface extend another Interface ?</div><div class="line">Yes an Interface can inherit another Interface, for that matter an Interface can extend more than one Interface.</div><div class="line"></div><div class="line">78//Can a Class extend more than one Class ?</div><div class="line">Not possible.A Class can extend only one class but can implement any number of Interfaces.</div><div class="line"></div><div class="line"></div><div class="line">79 //Why is an Interface be able to extend more than one Interface but a Class can&apos;t extend more than one Class?</div><div class="line">Basically Java doesn&apos;t allow multiple inheritance, so a Class is restricted to extend only one Class. </div><div class="line">But an Interface is a pure abstraction model and doesn&apos;t have inheritance hierarchy like classes(</div><div class="line">do remember that the base class of all classes is Object).So an Interface is allowed to extend more than one Interface.</div><div class="line"></div><div class="line">80 //Can an Interface be final ?</div><div class="line">Not possible.Doing so so will result in compilation error.</div><div class="line"></div><div class="line">81 //Can a class be defined inside an Interface ?</div><div class="line">Yes it&apos;s possible.</div><div class="line"></div><div class="line">82 //Can an Interface be defined inside a class ?</div><div class="line">Yes it&apos;s possible.</div><div class="line"></div><div class="line">83 //What is a Marker Interface ?</div><div class="line">An Interface which doesn&apos;t have any declaration inside but still enforces a mechanism.</div><div class="line"></div><div class="line">84 //Which object oriented Concept is achieved by using overloading and overriding ?</div><div class="line">Polymorphism.</div><div class="line"></div><div class="line">85 //Why does Java not support operator overloading ?</div><div class="line">Operator overloading makes the code very difficult to read and maintain.To maintain code simplicity, Java doesn&apos;t support operator overloading.</div><div class="line"></div><div class="line">86 //Can we define private and protected modifiers for variables in interfaces ?</div><div class="line">No.</div><div class="line"></div><div class="line">87 //What is Externalizable ?</div><div class="line">Externalizable is an Interface that extends Serializable Interface.And sends data into Streams in Compressed Format.It has two methods, </div><div class="line">writeExternal(ObjectOuput out) and readExternal(ObjectInput in)</div><div class="line"></div><div class="line"></div><div class="line">88 //What modifiers are allowed for methods in an Interface ?</div><div class="line">Only public and abstract modifiers are allowed for methods in interfaces.</div><div class="line"></div><div class="line">89 //What is a local, member and a class variable ?</div><div class="line">Variables declared within a method are &quot;local&quot; variables.</div><div class="line"></div><div class="line">Variables declared within the class i.e not within any methods are &quot;member&quot; variables(global variables).</div><div class="line"></div><div class="line">Variables declared within the class i.e not within any methods and are defined as &quot;static&quot; are class variables.</div><div class="line"></div><div class="line">90 //What is an abstract method ?</div><div class="line">An abstract method is a method whose implementation is deferred to a subclass.</div><div class="line"></div><div class="line"></div><div class="line">91 //What value does read() return when it has reached the end of a file ?</div><div class="line">The read() method returns - 1 when it has reached the end of a file.</div><div class="line"></div><div class="line">92 //Can a Byte object be cast to a double value ?</div><div class="line">No, an object cannot be cast to a primitive value.</div><div class="line"></div><div class="line">93 //What is the difference between a static and a non - static inner class ?</div><div class="line"></div><div class="line">A non - static nested class has full access to the members of the class within which it is nested.</div><div class="line">A static nested class does not have a reference to a nesting instance, so a static nested class cannot invoke non - static methods or access </div><div class="line">non - static fields of an instance of the class within which it is nested.</div><div class="line"></div><div class="line">94 //What is an object&apos;s lock and which object&apos;s have locks ?</div><div class="line">An object&apos;s lock is a mechanism that is used by multiple threads to obtain synchronized access to the object.</div><div class="line">A thread may execute a synchronized method of an object only after it has acquired the object&apos;s lock.All objects and classes have locks.A class&apos;s lock is acquired on the class&apos;s Class object.</div><div class="line"></div><div class="line">95 //What is the % operator ?</div><div class="line">It is referred to as the modulo or remainder operator. It returns the remainder of dividing the first operand by the second operand.</div><div class="line"></div><div class="line"></div><div class="line">96 //When can an object reference be cast to an interface reference ?</div><div class="line">An object reference be cast to an interface reference when the object implements the referenced interface.</div><div class="line"></div><div class="line">97 //Which class is extended by all other classes ?</div><div class="line">The Object class is extended by all other classes.</div><div class="line"></div><div class="line">98//Which non - Unicode letter characters may be used as the first character of an identifier ?</div><div class="line">The non - Unicode letter characters $ and _ may appear as the first character of an identifier</div><div class="line"></div><div class="line">99//What restrictions are placed on method overloading ?</div><div class="line">Two methods may not have the same name and argument list but different return types.</div><div class="line"></div><div class="line">100 //What is casting ?</div><div class="line">There are two types of casting, casting between primitive numeric types and casting between object references.Casting</div><div class="line">between numeric types is used to convert larger values, such as double values, to smaller values, </div><div class="line">such as byte values.Casting between object references is used to refer to an object by a compatible class, interface, or array type reference.</div><div class="line"></div><div class="line">101// What is the return type of a program&apos;s main() method?</div><div class="line">void.</div><div class="line"></div><div class="line">102 //If a variable is declared as private, where may the variable be accessed ?</div><div class="line">A private variable may only be accessed within the class in which it is declared.</div><div class="line"></div><div class="line"></div><div class="line">103 //What do you understand by private, protected and public ?</div><div class="line">These are accessibility modifiers.Private is the most restrictive, while public is the least restrictive.There </div><div class="line">is no real difference between protected and the default type(also known as package protected) within the context of the same package, </div><div class="line">however the protected keyword allows visibility to a derived class in a different package.</div><div class="line"></div><div class="line">104 //What is Downcasting ?</div><div class="line">Downcasting is the casting from a general to a more specific type, i.e.casting down the hierarchy</div><div class="line">Animal animal = new Dog();</div><div class="line">Dog castedDog = (Dog)animal;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">105 //What modifiers may be used with an inner class that is a member of an outer class ?</div><div class="line">A(non - local) inner class may be declared as public, protected, private, static, final, or abstract.</div><div class="line"></div><div class="line">106 //How many bits are used to represent Unicode, ASCII, UTF - 16, and UTF - 8 characters ?</div><div class="line">Unicode requires 16 bits and ASCII require 7 bits Although the ASCII character set uses only 7 bits, it is usually represented as 8 bits.</div><div class="line"></div><div class="line">UTF - 8 represents characters using 8, 16, and 18 bit patterns.</div><div class="line"></div><div class="line">UTF - 16 uses 16 - bit and larger bit patterns.</div><div class="line"></div><div class="line">107 //What restrictions are placed on the location of a package statement within a source code file ?</div><div class="line">A package statement must appear as the first line in a source code file(excluding blank lines and comments).</div><div class="line"></div><div class="line">108 //What is a native method ?</div><div class="line">A native method is a method that is implemented in a language other than Java.</div><div class="line"></div><div class="line"></div><div class="line">109 //What are order of precedence and associativity, and how are they used ?</div><div class="line">Order of precedence determines the order in which operators are evaluated in expressions.Associatity determines whether an expression is evaluated left - to - right or right - to - left.</div><div class="line"></div><div class="line">110 //Can an anonymous class be declared as implementing an interface and extending a class ?</div><div class="line">An anonymous class may implement an interface or extend a superclass, but may not be declared to do both.</div><div class="line"></div><div class="line">111//What is the range of the char type ?</div><div class="line">The range of the char type is 0 to 216 - 1 (i.e. 0 to 65535.)</div><div class="line"></div><div class="line">112 //What is the range of the short type ?</div><div class="line">The range of the short type is - (215) to 215 - 1. (i.e. - 32, 768 to 32, 767)</div><div class="line"></div><div class="line">113 //Why isn&apos;t there operator overloading?</div><div class="line">Because C++ has proven by example that operator overloading makes code almost impossible to maintain.</div><div class="line"></div><div class="line">114 //What does it mean that a method or field is &quot;static&quot; ?</div><div class="line">Static variables and methods are instantiated only once per class.In other words they are class variables, </div><div class="line">not instance variables.If you change the value of a static variable in a particular object, the value of that variable changes for </div><div class="line">all instances of that class.Static methods can be referenced with the name of the class rather than the name of a particular object of the </div><div class="line">class (though that works too).That&apos;s how library methods like System.out.println() work. out is a static field in the java.lang.System class.</div><div class="line"></div><div class="line">115 //Is null a keyword ?</div><div class="line">The null value is not a keyword.</div><div class="line"></div><div class="line">116 //Which characters may be used as the second character of an identifier, but not as the first character of an identifier ?</div><div class="line">The digits 0 through 9 may not be used as the first character of an identifier but they may be used after the first character of an identifier.</div><div class="line"></div><div class="line">117 //Is the ternary operator written x : y ? z or x ? y : z ?</div><div class="line">It is written x ? y : z.</div><div class="line"></div><div class="line">118 //How is rounding performed under integer division ?</div><div class="line">The fractional part of the result is truncated.This is known as rounding toward zero.</div><div class="line"></div><div class="line">119 //If a class is declared without any access modifiers, where may the class be accessed ?</div><div class="line">A class that is declared without any access modifiers is said to have package access.This means that the class can only be accessed by other classes and interfaces that are defined within the same package.</div><div class="line"></div><div class="line">120 //Does a class inherit the constructors of its superclass ?</div><div class="line">A class does not inherit constructors from any of its superclasses.</div><div class="line"></div><div class="line"></div><div class="line">121 //Name the eight primitive Java types.</div><div class="line">The eight primitive types are byte, char, short, int, long, float, double, and boolean.</div><div class="line"></div><div class="line">122 //What restrictions are placed on the values of each case of a switch statement ?</div><div class="line">During compilation, the values of each case of a switch statement must evaluate to a value that can be promoted to an int value.</div><div class="line"></div><div class="line">123 //What is the difference between a while statement and a do while statement ?</div><div class="line">A while statement checks at the beginning of a loop to see whether the next loop iteration should occur.</div><div class="line">A do while statement checks at the end of a loop to see whether the next iteration of a loop should occur.The do whilestatement will always execute the body of a loop at least once.</div><div class="line"></div><div class="line">124 //What modifiers can be used with a local inner class ?</div><div class="line">A local inner class may be final or abstract.</div><div class="line"></div><div class="line">125 //When does the compiler supply a default constructor for a class ?</div><div class="line">The compiler supplies a default constructor for a class if no other constructors are provided.</div><div class="line"></div><div class="line">126 //If a method is declared as protected, where may the method be accessed ?</div><div class="line">A protected method may only be accessed by classes or interfaces of the same package or by subclasses of the class in which it is declared.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">127 //What are the legal operands of the instanceof operator ?</div><div class="line">The left operand is an object reference or null value and the right operand is a class, interface, or array type.</div><div class="line"></div><div class="line">128 //Are true and false keywords ?</div><div class="line">The values true and false are not keywords.</div><div class="line"></div><div class="line">129 //What happens when you add a double value to a String ?</div><div class="line">The result is a String object.</div><div class="line"></div><div class="line">130 //What is the diffrence between inner class and nested class ?</div><div class="line">When a class is defined within a scope od another class, then it becomes inner class.If the access modifier of the inner class is static, then it becomes nested class.</div><div class="line"></div><div class="line">131 //Can an abstract class be final ?</div><div class="line">An abstract class may not be declared as final.</div><div class="line"></div><div class="line">132 //What is numeric promotion ?</div><div class="line">Numeric promotion is the conversion of a smaller numeric type to a larger numeric type, </div><div class="line">so that integer and floating - point operations may take place.In numerical promotion, byte, char, and short values are converted to int values.</div><div class="line">The int values are also converted to long values, if necessary.The long and float values are converted to double values, as required.</div><div class="line"></div><div class="line"></div><div class="line">133 //What is the difference between a public and a non - public class ?</div><div class="line">A public class may be accessed outside of its package.A non - public class may not be accessed outside of its package.</div><div class="line"></div><div class="line">134 //To what value is a variable of the boolean type automatically initialized ?</div><div class="line">The default value of the boolean type is false.</div><div class="line"></div><div class="line">135 //What is the difference between the prefix and postfix forms of the++ operator ?</div><div class="line">The prefix form performs the increment operation and returns the value of the increment operation.</div><div class="line">The postfix form returns the current value all of the expression and then performs the increment operation on that value.</div><div class="line"></div><div class="line"></div><div class="line">136 //What restrictions are placed on method overriding ?</div><div class="line">Overridden methods must have the same name, argument list, and return type.The overriding method may not limit the </div><div class="line">access of the method it overrides.The overriding method may not throw any exceptions that may not be thrown by the overridden method.</div><div class="line"></div><div class="line">137 //What is a Java package and how is it used ?</div><div class="line">A Java package is a naming context for classes and interfaces.A package is used to create a separate name space </div><div class="line">for groups of classes and interfaces.Packages are also used to organize related classes and interfaces into a single API unit and to control accessibility to these classes and interfaces.</div><div class="line"></div><div class="line">138 //What modifiers may be used with a top - level class ?</div><div class="line">A top - level class may be public, abstract, or final.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">139 What is the difference between an if statement and a switch statement ?</div><div class="line">The if statement is used to select among two alternatives.It uses a boolean expression to decide which alternative should be executed.</div><div class="line">The switch statement is used to select among multiple alternatives.It uses an int expression to determine which alternative should be executed.</div><div class="line"></div><div class="line">140 //What are the practical benefits, if any, of importing a specific class rather than an entire package(e.g.import java.net.*versus import java.net.Socket) ?</div><div class="line">It makes no difference in the generated class files since only the classes that are actually used are referenced by the generated class file.</div><div class="line">There is another practical benefit to importing single classes, and this arises when two(or more) packages have classes with the same name.Take java.util.Timer and javax.swing.Timer, </div><div class="line">for example.If I import java.util.*and javax.swing.*and then try to use &quot;Timer&quot;, I get an error while compiling(the class name is ambiguous between both packages).</div><div class="line">Let&apos;s say what you really wanted was the javax.swing.Timer class, and the only classes you plan on using in java.util are Collection and HashMap. </div><div class="line">In this case, some people will prefer to import java.util.Collection and import java.util.HashMap instead of importing java.util.*. </div><div class="line">This will now allow them to use Timer, Collection, HashMap, and other javax.swing classes without using fully qualified class names in.</div><div class="line"></div><div class="line">141 //Can a method be overloaded based on different return type but same argument type ?</div><div class="line">No, because the methods can be called without using their return type in which case there is ambiquity for the compiler.</div><div class="line"></div><div class="line">142 //What happens to a static variable that is defined within a method of a class ?</div><div class="line">Can&apos;t do it. You&apos;ll get a compilation error.</div><div class="line"></div><div class="line">143 //How many static initializers can you have ?</div><div class="line">As many as you want, but the static initializers and class variable initializers are executed in textual order and may not refer to class variables declared in the class </div><div class="line">whose declarations appear textually after the use, even though these class variables are in scope.</div><div class="line"></div><div class="line">144 //What is the difference between method overriding and overloading ?</div><div class="line">Overriding is a method with the same name and arguments as in a parent, whereas overloading is the same method name but different arguments</div><div class="line"></div><div class="line"></div><div class="line">145 //What is constructor chaining and how is it achieved in Java ?</div><div class="line">A child object constructor always first needs to construct its parent(which in turn calls its parent constructor.).In Java it is done via an implicit call </div><div class="line">to the no - args constructor as the first statement.</div><div class="line"></div><div class="line">146 //What is the difference between the Boolean &amp; operator and the &amp;&amp; operator ?</div><div class="line">If an expression involving the Boolean &amp; operator is evaluated, both operands are evaluated.Then the &amp; operator </div><div class="line">is applied to the operand.When an expression involving the &amp;&amp; operator is evaluated, the first operand is evaluated.</div><div class="line">If the first operand returns a value of true then the second operand is evaluated.The &amp;&amp; operator is then applied to the first and </div><div class="line">second operands.If the first operand evaluates to false, the evaluation of the second operand is skipped.</div><div class="line"></div><div class="line">147 //Which Java operator is right associative ?</div><div class="line">The = operator is right associative.</div><div class="line"></div><div class="line">148 //Can a double value be cast to a byte ?</div><div class="line">Yes, a double value can be cast to a byte.</div><div class="line"></div><div class="line">149 //What is the difference between a break statement and a continue statement ?</div><div class="line">A break statement results in the termination of the statement to which it applies(switch, for, do, or while).</div><div class="line">A continue statement is used to end the current loop iteration and return control to the loop statement.</div><div class="line"></div><div class="line">150 //Can a for statement loop indefinitely ?</div><div class="line">Yes, a for statement can loop indefinitely.For example, consider the following : for (;;);</div><div class="line"></div><div class="line"></div><div class="line">151 //To what value is a variable of the String type automatically initialized ?</div><div class="line">The default value of an String type is null.</div><div class="line"></div><div class="line">152 //What is the difference between a field variable and a local variable ?</div><div class="line">A field variable is a variable that is declared as a member of a class.A local variable is a variable that is declared local to a method.</div><div class="line"></div><div class="line">153//How are this() and super() used with constructors ?</div><div class="line">this() is used to invoke a constructor of the same class.super() is used to invoke a superclass constructor.</div><div class="line"></div><div class="line">154 //What does it mean that a class or member is final ?</div><div class="line">A final class cannot be inherited.A final method cannot be overridden in a subclass.A final field cannot be changed after it&apos;s initialized, and it must include an initializer statement where it&apos;s declared.</div><div class="line"></div><div class="line">155 //What does it mean that a method or class is abstract ?</div><div class="line">An abstract class cannot be instantiated.Abstract methods may only be included in abstract classes.However, an abstract class is not required to have any abstract methods, though most of them do.</div><div class="line">Each subclass of an abstract class must override the abstract methods of its superclasses or it also should be declared abstract.</div><div class="line"></div><div class="line">156 //What is a transient variable ?</div><div class="line">Transient variable is a variable that may not be serialized.</div><div class="line"></div><div class="line"></div><div class="line">157 //How does Java handle integer overflows and underflows ?</div><div class="line">It uses those low order bytes of the result that can fit into the size of the type allowed by the operation.</div><div class="line"></div><div class="line">158 //What is the difference between the &gt;&gt; and &gt;&gt; &gt; operators ?</div><div class="line">The &gt;&gt; operator carries the sign bit when shifting right.The &gt;&gt; &gt; zero - fills bits that have been shifted out.</div><div class="line"></div><div class="line">159 //Is sizeof a keyword ?</div><div class="line">The sizeof operator is not a keyword.</div><div class="line"></div><div class="line">160 hashmap implementation</div><div class="line"></div><div class="line"></div><div class="line">A hashmap works like this (this is a little bit simplified, but it illustrates the basic mechanism) :</div><div class="line"></div><div class="line">It has a number of &quot;buckets&quot; which it uses to store key - value pairs in. Each bucket has a unique number - </div><div class="line">that is what identifies the bucket. When you put a key-value pair into the map, the hashmap will look at the hash code of the key, </div><div class="line">and store the pair in the bucket of which the identifier is the hash code of the key. For example: The hash code of the key is 235 -&gt; </div><div class="line">the pair is stored in bucket number 235. (Note that one bucket can store more then one key-value pair).</div><div class="line"></div><div class="line">When you lookup a value in the hashmap, by giving it a key, it will first look at the hash code of the key that you gave.The hashmap will </div><div class="line">then look into the corresponding bucket, and then it will compare the key that you gave with the keys of all pairs in the bucket, by comparing them with equals().</div><div class="line"></div><div class="line">Now you can see how this is very efficient for looking up key - value pairs in a map : by the hash code of the key the hashmap </div><div class="line">immediately knows in which bucket to look, so that it only has to test against what&apos;s in that bucket.</div><div class="line"></div><div class="line">Looking at the above mechanism, you can also see what requirements are necessary on the hashCode() and equals() methods of keys :</div><div class="line"></div><div class="line">If two keys are the same(equals() returns true when you compare them), their hashCode() method must return the same number.If keys violate this,</div><div class="line">then keys that are equal might be stored in different buckets, and the hashmap would not be able to find key - value pairs(because it&apos;s going to look in the same bucket).</div><div class="line">If two keys are different, then it doesn&apos;t matter if their hash codes are the same or not. They will be stored in the same bucket</div><div class="line">if their hash codes are the same, and in this case, the hashmap will use equals() to tell them apart.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">161 //synchronzed</div><div class="line">synchronized means that in a multi threaded environment, an object having  synchronized method(s) / block(s) does</div><div class="line">not let two threads to access the synchronized method(s) / block(s) of code at the same time.This means that one thread can&apos;t read while another thread updates it.</div><div class="line"></div><div class="line">The second thread will instead wait until the first thread completes its execution.The overhead is speed, but the advantage is guaranteed consistency of data.</div><div class="line"></div><div class="line">If your application is single threaded though, synchronized blocks does not provide benefits.</div><div class="line"></div><div class="line">161.1 //thread lock;</div><div class="line">Java ThreadLocal is used to create thread - local variables.We know that all threads of an Object share it’s variables,</div><div class="line">so if the variable is not thread safe, we can use synchronization but if we want to avoid synchronization, we can use ThreadLocal variables.</div><div class="line"></div><div class="line">162 //multithread</div><div class="line"></div><div class="line">By definition, multitasking is when multiple processes share common processing resources such as a CPU.</div><div class="line">Multi - threading extends the idea of multitasking into applications where you can subdivide specific operations within a single </div><div class="line">application into individual threads.Each of the threads can run in parallel.The OS divides processing time not only among different applications, but also among each thread within an application.</div><div class="line"></div><div class="line">Multi - threading enables you to write in a way where multiple activities can proceed concurrently in the same program.</div><div class="line">Every Java thread has a priority that helps the operating system determine the order in which threads are scheduled.</div><div class="line"></div><div class="line">Java thread priorities are in the range between MIN_PRIORITY(a constant of 1) and MAX_PRIORITY(a constant of 10).By default, every thread is given priority NORM_PRIORITY(a constant of 5).</div><div class="line"></div><div class="line">Threads with higher priority are more important to a program and should be allocated processor time before lower -</div><div class="line">priority threads.However, thread priorities cannot guarantee the order in which threads execute and are very much platform dependent.</div><div class="line"></div><div class="line">162.2 //advatages of java multithreading</div><div class="line"></div><div class="line">1) It doesn&apos;t block the user because threads are independent and you can perform multiple operations at same time.</div><div class="line"></div><div class="line">2) You can perform many operations together so it saves time.</div><div class="line"></div><div class="line">3) Threads are independent so it doesn&apos;t affect other threads if exception occur in a single thread.</div><div class="line"></div><div class="line"></div><div class="line">163 //diff between thread and process</div><div class="line">What is the difference between Process and Thread ?</div><div class="line"></div><div class="line">A process is a self contained execution environment and it can be seen as a program or application whereas Thread is a single task of execution within the process.</div><div class="line">Java runtime environment runs as a single process which contains different classes and programs as processes.</div><div class="line">Thread can be called lightweight process.Thread requires less resources to create and exists in the process, thread shares the process resources.</div><div class="line"></div><div class="line"></div><div class="line">22 thread</div><div class="line">Thread :</div><div class="line">A thread is a series of executed statements</div><div class="line">Referred as lightweight process</div><div class="line">Each thread has its own program counter, stack and local variable</div><div class="line"></div><div class="line">life cycle</div><div class="line">New :</div><div class="line">The thread is in new state if you create an instance of Thread class but before the invocation of start() method</div><div class="line"></div><div class="line">Runnable</div><div class="line">The thread is in runnable state after invocation of start() method, but the thread scheduler has not selected it to be the running thread</div><div class="line"></div><div class="line">Running</div><div class="line"></div><div class="line">The thread is in running state if the thread scheduler has selected</div><div class="line"></div><div class="line">Blocked</div><div class="line">This is the state when the thread is still alive, but is currently not eligible to run</div><div class="line"></div><div class="line">Terminated</div><div class="line">A thread is in terminated or dead when its run() method exit</div><div class="line"></div><div class="line">23 two ways to start a thread</div><div class="line">Implement runnable or extends Thread</div><div class="line">Implement of run()</div><div class="line"></div><div class="line">(new Thread(new HelloRunnable())).start();//implements the runnable</div><div class="line"></div><div class="line">(new HelloThread()).start();//extends thread</div><div class="line"></div><div class="line">24 thread method</div><div class="line">String getName()  retrieves the same of running thread in the current context in string format</div><div class="line">Void start() this method will start a new thread of execution by calling run() method of Thread / runnable object</div><div class="line">Void run() this method is the entry point of the thread, execution of thread starts from this method</div><div class="line"></div><div class="line">Void sleep() this method suspend the thread for  mentioned time duration in argument</div><div class="line"></div><div class="line">Void yield() by invoking this method the current thread pause its execution temporarily and allow other threads to exectute</div><div class="line"></div><div class="line">Void join() this method is used to queue up a thread in execution, once called on thread, current thread will wait till calling thread completes its exectution</div><div class="line"></div><div class="line">Boolean isAlive() this method will check if thread is alive or dead</div><div class="line"></div><div class="line"></div><div class="line">164//thread communicate with each other</div><div class="line">When threads share resources, communication between Threads is important to coordinate their efforts.Object </div><div class="line">class wait(), notify() and notifyAll() methods allows threads to communicate about the lock status of a resource.Check this post to learn more about thread wait, notify and notifyAll.</div><div class="line"></div><div class="line">165 //volatile keyword</div><div class="line">When we use volatile keyword with a variable, </div><div class="line">all the threads read it’s value directly from the memory and don’t cache it.This makes sure that the value read is the same as in the memory.</div><div class="line"></div><div class="line">166 //thread deadlock</div><div class="line">Deadlock is a programming situation where two threads wait for each other to take action which allows them to move further.</div><div class="line"></div><div class="line">To analyze a deadlock, we need to look at the java thread dump of the application, we need to look out for the threads with state as BLOCKED and then the resources</div><div class="line">it’s waiting to lock, every resource has a unique ID using which we can find which thread is already holding the lock on the object.</div><div class="line"></div><div class="line">Avoid Nested Locks, Lock Only What is Required and Avoid waiting indefinitely are common ways to avoid deadlock situation, read this post to learn how to analyze deadlock in java with sample program</div><div class="line"></div><div class="line">//167 thread pool</div><div class="line">A thread pool manages the pool of worker threads, it contains a queue that keeps tasks waiting to get executed.</div><div class="line">A thread pool manages the collection of Runnable threads and worker threads execute Runnable from the queue.</div><div class="line">java.util.concurrent.Executors provide implementation of java.util.concurrent.Executor interface to create the thread pool in java.</div><div class="line">Thread Pool Example program shows how to create and use Thread Pool in java.Or read ScheduledThreadPoolExecutor Example to know how to schedule tasks after certain delay.</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> fulltime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[os]]></title>
      <url>/2017/10/10/os/</url>
      <content type="html"><![CDATA[<h2 id="Process-vs-Thread"><a href="#Process-vs-Thread" class="headerlink" title="Process vs Thread"></a>Process vs Thread</h2><p><strong>Process</strong>: An executing instance of a program is called a process.</p>
<p><strong>Thread</strong>: Thread is a lightweight thread(A thread is a subset of the process.)</p>
<p><strong>diff</strong>:</p>
<ul>
<li>Threads share the address space of the process that created it; processes have their own address space.</li>
<li>Threads have direct access to the data segment of its process; processes have their own copy of the data segment of the parent process.</li>
<li>Threads can directly communicate with other threads of its process; processes must use interprocess communication to communicate with sibling processes.</li>
<li>Threads have almost no overhead; processes have considerable overhead. context switch</li>
<li>New threads are easily created; new processes require duplication of the parent process.</li>
<li>Changes to the main thread (cancellation, priority change, etc.) may affect the behavior of the other threads of the process; changes to the parent process do not affect child processes.</li>
</ul>
<hr>
<h2 id="Different-type-of-thread"><a href="#Different-type-of-thread" class="headerlink" title="Different type of thread"></a>Different type of thread</h2><table>
<thead>
<tr>
<th>User level thread</th>
<th>Kernel level thread</th>
</tr>
</thead>
<tbody>
<tr>
<td>User thread are implemented by users</td>
<td>Kernel threads are implemented by OS </td>
</tr>
<tr>
<td>OS doesn’t recognized user level threads</td>
<td>Kernel threads are recognized by OS</td>
</tr>
<tr>
<td>implementation of User threads is easy</td>
<td>implementation of kernel thread is complicated</td>
</tr>
<tr>
<td>context switch time is less</td>
<td>context switch time is more</td>
</tr>
<tr>
<td>context switch requres no hardware support</td>
<td>hardware support is needed</td>
</tr>
<tr>
<td>if one user level thread perform blocking operation then entire process will be blocked</td>
<td>if one kernel thread perfrom blocking operation then another thread can continue execution</td>
</tr>
<tr>
<td>Example: JAVA thread, POSIX threads</td>
<td>windows solaris</td>
</tr>
</tbody>
</table>
<h2 id="context-switch"><a href="#context-switch" class="headerlink" title="context switch"></a>context switch</h2><p>a context switch is the process of storing and restoring the state (more specifically, the execution context) of a process or thread so that execution can be resumed from the same point at a later time. This enables multiple processes to share a single CPU and is an essential feature of a multitasking operating system<br><img src="https://upload.wikimedia.org/wikipedia/commons/0/04/Context_switch.png" alt="context Switch"></p>
<h2 id="interrupt-and-system-call"><a href="#interrupt-and-system-call" class="headerlink" title="interrupt and system call"></a>interrupt and system call</h2><p><strong>interrupt</strong>: an interrupt is a signal to the processor emitted by hardware or software indicating an event that needs immediate attention.</p>
<ul>
<li>haredware interrup<ul>
<li>keyboard, mouse</li>
</ul>
</li>
<li>software interrupt<ul>
<li>exception, divide by zero</li>
<li>services from device drivers</li>
</ul>
</li>
</ul>
<p><strong>system call</strong>: a system call is the programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. This may include hardware-related services (for example, accessing a hard disk drive), creation and execution of new processes, and communication with integral kernel services such as process scheduling. System calls provide an essential interface between a process and the operating system.</p>
<p>when a process make a system call, which will cause an interruption and the process will change to kernal mode.</p>
<p><strong>kernal mode</strong><br>In Kernel mode, the executing code has complete and unrestricted access to the underlying hardware. It can execute any CPU instruction and reference any memory address. Kernel mode is generally reserved for the lowest-level, most trusted functions of the operating system. Crashes in kernel mode are catastrophic; they will halt the entire PC.</p>
<p><strong>user mode</strong><br>In User mode, the executing code has no ability to directly access hardware or reference memory. Code running in user mode must delegate to system APIs to access hardware or memory. Due to the protection afforded by this sort of isolation, crashes in user mode are always recoverable. Most of the code running on your computer will execute in user mode.</p>
<h2 id="concurrent-technologies"><a href="#concurrent-technologies" class="headerlink" title="concurrent technologies"></a>concurrent technologies</h2><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><ul>
<li>An executing instance of a program</li>
<li>text region, data region, code segment, stack region</li>
</ul>
<hr>
<ul>
<li><p><strong>Five states</strong></p>
<ul>
<li>created: by being loaded from a secondary storage device</li>
<li>waiting: it waits for the scheduler to do a so-called context switch and load the process into the processor.</li>
<li>running</li>
<li>blocked: If a process needs to wait for a resource (wait for user input or file to open, for example), it is assigned the “blocked” state.</li>
<li>terminated: Once the process finishes execution, or is terminated by the operating system, it is no longer needed.</li>
</ul>
</li>
<li><p><strong>three schedulers</strong></p>
<ul>
<li><strong>Long-Term Scheduler</strong> (job scheduler) It selects processes from pool and loads them into memory for execution</li>
<li><strong>Short-Term schduler</strong> (CPU scheduler) It selects those processes which are ready to execute</li>
<li><strong>Medium-Term Scheduler</strong> (process swapping scheduler) It can re-introduce the process into memory and execution can be continued</li>
</ul>
</li>
<li><p><strong>preemption &amp; non-preemption</strong></p>
<ul>
<li>Preemption is the act of temporarily interrupting a task being carried out by a computer system, without requiring its cooperation, and with the intention of resuming the task at a later time</li>
<li>Once resources are allocated to a process, the process holds it till it completes its burst time or switches to waiting state.</li>
</ul>
</li>
<li><p><strong>process schedule algorithms</strong></p>
<ul>
<li>FIFO or First Come, First Served (FCFS) Jobs are executed on first come, first serve basis; It is a non-preemptive scheduling algorithm; Easy to understand and implement; Poor in performance as average wait time is high.</li>
<li>Short job first: Best approach to minimize waiting time; Easy to implement in Batch systems where required CPU time is known in advance; Impossible to implement in interactive systems where required CPU time is not knownThe processer should know in advance how much time process will take.</li>
<li>Priority Based Scheduling: Priority scheduling is a non-preemptive algorithm and one of the most common scheduling algorithms in batch systems; Each process is assigned a priority. Process with highest priority is to be executed first and so on; Processes with same priority are executed on first come first served basis; Priority can be decided based on memory requirements, time requirements or any other resource requirement.</li>
<li>Round Robin Scheduling: Round Robin is the preemptive process scheduling algorithm; Each process is provided a fix time to execute, it is called a quantum; Once a process is executed for a given time period, it is preempted and other process executes for a given time period; Context switching is used to save states of preempted processes</li>
<li>Multiple-Level Queues Scheduling: Multiple queues are maintained for processes with common characteristics; Each queue can have its own scheduling algorithms; Priorities are assigned to each queue.</li>
</ul>
</li>
</ul>
<h2 id="critical-region-amp-resource"><a href="#critical-region-amp-resource" class="headerlink" title="critical region &amp; resource"></a>critical region &amp; resource</h2><p>In concurrent programming, concurrent accesses to shared resources can lead to unexpected or erroneous behavior, so parts of the program where the shared resource is accessed are protected. This protected section is the critical section or critical region.</p>
<ul>
<li>进入区:查看临界区是否可访问，如果可以访问，则转到步骤二，否则进程会被阻塞</li>
<li>临界区:在临界区做操作</li>
<li>退出区:清除临界区被占用的标志</li>
<li><p>剩余区：进程与临界区不相关部分的代码</p>
</li>
<li><p>soltuions：</p>
<ul>
<li>Semaphore: p v operations</li>
<li>mutex</li>
</ul>
</li>
<li>Semaphore<ul>
<li>wait: If the value of semaphore variable is not negative, decrement it by 1. If the semaphore variable is now negative, the process executing wait is blocked (i.e., added to the semaphore’s queue) until the value is greater or equal to 1. Otherwise, the process continues execution, having used a unit of the resource.</li>
<li>signal: Increments the value of semaphore variable by 1. After the increment, if the pre-increment value was negative (meaning there are processes waiting for a resource), it transfers a blocked process from the semaphore’s waiting queue to the ready queue.</li>
</ul>
</li>
</ul>
<h2 id="deadlock"><a href="#deadlock" class="headerlink" title="deadlock"></a>deadlock</h2><p>two or more competing are wating each to release resources but none of them ever.</p>
<ul>
<li><p>four conditions</p>
<ul>
<li>Mutual exclusion: The resources involved must be unshareable</li>
<li>Hold and wait: a process is currently holding at least one resource and requesting additional resources which are being held by other processes.</li>
<li>No preemption: a resource can be released only voluntarily by the process holding it.</li>
<li>Circular wait: each process must be waiting for a resource which is being held by another process, which in turn is waiting for the first process to release the resource</li>
</ul>
</li>
<li><p>solution:</p>
<ul>
<li>Ostrich algorithm.</li>
<li>allocate the resource dynamically (Bankers’ algorithm)</li>
<li>detect deadlock and recover it</li>
<li>break any conditon of above four condition</li>
</ul>
</li>
</ul>
<h2 id="Inter-process-communication"><a href="#Inter-process-communication" class="headerlink" title="Inter-process communication"></a>Inter-process communication</h2><ul>
<li>pipe, message queue</li>
<li>mutex semaphore, read write lock</li>
<li>shared memeory</li>
<li>RPC</li>
</ul>
<h2 id="memory-management"><a href="#memory-management" class="headerlink" title="memory management"></a>memory management</h2><p><img src="https://lh3.googleusercontent.com/LCsKGAxGHnyEs3EANY4n5P5ya_L5azYKGW7SIYW0x9kT6rjv4HDMJ1m28m_oLC9m-nv1d2TQhZeo9toGwMXvY8Gm5qDkan67_B7N44A1Z4Px79mbe14fVOY9wXLQDusVqZ4_u4OXCg" alt="MEMORY"></p>
<ul>
<li>virtual address: segment + segement offset</li>
<li>logical address: a logical address is the address at which an item (memory cell, storage element, network host) appears to reside from the perspective of an executing application program. segment offset</li>
<li>physical address</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/fDOjO-LWHUQYO6aN5fW4FSSyM1e915oLf-bxJEg4ik7K4x6bAB9ndIbOLIF4khm82xKcYTY1FsyAe4XaQGld7bWYdqeN1ZEsC8guRAYBfi9upifgV3K_ChfsOh0Yv1JVEemRet9rLQ" alt="map"></p>
<p>首先拿到一个逻辑地址，然后拿这个逻辑地址的虚拟页号，到页表上去进行比对（没有TLB）的情况。如果比对存在，说明这个块已经被调入内存了，如果不在，则会产生缺页中断，缺页中断就会启动I/O，然后去外存调块</p>
<hr>
<p><strong>page replacement algorithms</strong></p>
<ul>
<li>FIFO</li>
<li>LRU</li>
<li>SUDO LRU</li>
<li>LFU</li>
</ul>
<p><strong>disk schedule</strong></p>
<ul>
<li>Seek Time:time taken to locate the disk arm to a specified track where the data is to be read or write</li>
<li>Rotational Latency: Rotational Latency is the time taken by the desired sector of disk to rotate into a position so that it can access the read/write heads</li>
<li>Transfer Time: Transfer time is the time to transfer the data.</li>
<li>Disk Access Time: the sum of above</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/7M3qBFqSKJfvj3cH8QWSvhHu9zw1v21cm74TlXJpPCmAb4udVkSJejbN8ZyA0u-XVNz5MN6AOb-i0cOWICj9XdtRqIsR3K31TGo5ZV1ntZRx6cvPV-NcV5V8fCfdGoe9uWcDcD39vA" alt="access time"></p>
<p><strong>disk schedule algorithm</strong></p>
<ul>
<li><p>FCFS: FCFS is the simplest of all the Disk Scheduling Algorithms. In FCFS, the requests are addressed in the order they arrive in the disk queue</p>
</li>
<li><p>SSTF: In SSTF (Shortest Seek Time First), requests having shortest seek time are executed first. So, the seek time of every request is calculated in advance in queue and then they are scheduled according to their calculated seek time. As a result, the request near the disk arm will get executed first. SSTF is certainly an improvement over FCFS as it decreases the average response time and increases the throughput of system</p>
</li>
<li>SCAN: In SCAN algorithm the disk arm moves into a particular direction and services the requests coming in its path and after reaching the end of disk, it reverses its direction and again services the request arriving in its path. So, this algorithm works like an elevator and hence also known as elevator algorithm</li>
<li>CSCAN: In SCAN algorithm, the disk arm again scans the path that has been scanned, after reversing its direction. So, it may be possible that too many requests are waiting at the other end or there may be zero or few requests pending at the scanned area.</li>
<li>Look &amp; CLook</li>
</ul>
]]></content>
      
        <categories>
            
            <category> os </category>
            
        </categories>
        
        
        <tags>
            
            <tag> os </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[database]]></title>
      <url>/2017/10/09/database/</url>
      <content type="html"><![CDATA[<h2 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h2><h4 id="defination"><a href="#defination" class="headerlink" title="defination"></a>defination</h4><p>transaction is a sequence of operations and performed as a signle logic unit of work</p>
<h4 id="two-main-purposes"><a href="#two-main-purposes" class="headerlink" title="two main purposes"></a>two main purposes</h4><ul>
<li><p>To provide reliable units of work that allow correct recovery from failures and keep a database consistent even in cases of system failure</p>
</li>
<li><p>To provide isolation between programs accessing a database concurrently</p>
</li>
</ul>
<h4 id="four-properties"><a href="#four-properties" class="headerlink" title="four properties"></a>four properties</h4><ul>
<li><strong>Atomic</strong>: requires that each transaction be “all or nothing”: if one part of the transaction fails, then the entire transaction fails, and the database state is left unchanged. </li>
<li><strong>Consistent</strong>: ensures that any transaction will bring the database from one valid state to another. Integrity constraints must be maintained so that the database is consistent before and after the transaction.</li>
<li><strong>Isolated</strong>: ensures that multiple transactions can occur concurrently without leading to inconsistency of database state</li>
<li><strong>Durable</strong>: ensures that once the transaction has completed execution, the updates and modifications to the database are stored in and written to disk and they persist even is system failure occurs</li>
</ul>
<h4 id="transaction-exception"><a href="#transaction-exception" class="headerlink" title="transaction exception"></a>transaction exception</h4><ul>
<li><strong>Dirty read</strong>: occurs when a transaction is allowed to read data from a row that has been modified by another running transaction and not yet committed</li>
<li><strong>Non-repeatable reads</strong>: when during the course of a transaction, a row is retrieved twice and the values within the row differ between reads</li>
<li><strong>Phantom reads</strong>: occurs when, in the course of a transaction, two identical queries are executed, and the collection of rows returned by the second query is different from the first.</li>
<li><strong>Lost update</strong>: A second transaction writes a second value of a data-item (datum) on top of a first value written by a first concurrent transaction, and the first value is lost to other transactions running concurrently which need, by their precedence, to read the first value</li>
</ul>
<h4 id="four-isolation-level"><a href="#four-isolation-level" class="headerlink" title="four isolation level"></a>four isolation level</h4><ul>
<li><strong>Serializable</strong>:  serializability requires read and write locks (acquired on selected data) to be released at the end of the transaction. Also range-locks must be acquired when a SELECT query uses a ranged WHERE clause</li>
<li><strong>Repeatable reads</strong>:  keeps read and write locks (acquired on selected data) until the end of the transaction. However, range-locks are not managed, so phantom reads can occur.</li>
<li><strong>Read committed</strong>: keeps write locks (acquired on selected data) until the end of the transaction, but read locks are released as soon as the SELECT operation is performed.</li>
<li><strong>Read uncommitted</strong>: This is the lowest isolation level. In this level, dirty reads are allowed, so one transaction may see not-yet-committed changes made by other transactions.</li>
</ul>
<h4 id="locks"><a href="#locks" class="headerlink" title="locks"></a>locks</h4><ul>
<li><strong>Exclusive locks</strong>: Exclusive locks are, as the name implies, exclusively held by a single entity, usually for the purpose of writing to the record. If the locking schema was represented by a list, the holder list would contain only one entry.</li>
<li><strong>Shared locks</strong>: Shared locks differ from exclusive locks in that the holder list can contain multiple entries. Shared locks allow all holders to read the contents of the record knowing that the record cannot be changed until after the lock has been released by all holders</li>
</ul>
<hr>
<h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><h4 id="defination-1"><a href="#defination-1" class="headerlink" title="defination"></a>defination</h4><p>A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name</div><div class="line">    [index_type]</div><div class="line">    ON tbl_name (index_col_name,...)</div><div class="line">    [index_option]</div><div class="line">    [algorithm_option | lock_option] ...</div><div class="line"></div><div class="line">index_col_name:</div><div class="line">    col_name [(length)] [ASC | DESC]</div><div class="line"></div><div class="line">index_option:</div><div class="line">    KEY_BLOCK_SIZE [=] value</div><div class="line">  | index_type</div><div class="line">  | WITH PARSER parser_name</div><div class="line">  | COMMENT &apos;string&apos;</div><div class="line"></div><div class="line">index_type:</div><div class="line">    USING &#123;BTREE | HASH&#125;</div><div class="line"></div><div class="line">algorithm_option:</div><div class="line">    ALGORITHM [=] &#123;DEFAULT|INPLACE|COPY&#125;</div><div class="line"></div><div class="line">lock_option:</div><div class="line">    LOCK [=] &#123;DEFAULT|NONE|SHARED|EXCLUSIVE&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="indices"><a href="#indices" class="headerlink" title="indices"></a>indices</h4><ul>
<li><strong>Ordered indices</strong>: Indices are based on a sorted ordering of the values </li>
<li><strong>Hash indices</strong>: Indices are based on the values being distributed uniformly across a range of buckets. The buckets to which a value is assigned is determined by function called a hash function.</li>
</ul>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><ul>
<li>What are advantages of DBMS over traditional file based systems?<ul>
<li>Data redundancy and inconsistency</li>
<li>Difﬁculty in accessing data</li>
<li>Data isolation – multiple ﬁles and formats</li>
<li>Integrity problems</li>
<li>Atomicity of updates</li>
<li>Concurrent access by multiple users</li>
<li>Security problems</li>
</ul>
</li>
<li><p>What are super, primary, candidate and foreign keys?</p>
<ul>
<li>a superkey is a attribute set which can identify a row</li>
<li>a candidate key is minimal superkey</li>
<li>a primary key is one of the candidate keys</li>
<li>foreign key is a field (or collection of fields) in one table that uniquely identifies a row of another table</li>
</ul>
</li>
<li><p>What is the difference between primary key and unique constraints?</p>
<ul>
<li>Primary key cannot have NULL value, the unique constraints can have NULL values. There is only one primary key in a table, but there can be multiple unique constrains</li>
</ul>
</li>
<li><p>What is database normalization?</p>
<ul>
<li>It is a process of analyzing the given relation schemas based on their functional dependencies and primary keys to achieve the following desirable properties: Minimizing Redundancy, Minimizing the Insertion, Deletion, And Update Anomalies</li>
</ul>
</li>
<li><p>What is the difference between having and where clause?</p>
<ul>
<li>HAVING is used to specify a condition for a group or an aggregate function used in select statement. The WHERE clause selects before grouping. The HAVING clause selects rows after grouping. Unlike HAVING clause, the WHERE clause cannot contain aggregate functions</li>
<li><strong>SELECT name, section FROM tbl GROUP BY name, section HAVING COUNT(*) &gt; 1</strong></li>
</ul>
</li>
<li><p>What is Join?</p>
<ul>
<li>An SQL Join is used to combine data from two or more tables, based on a common field between them</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT StudentCourse.CourseID, Student.StudentName</div><div class="line">      FROM StudentCourse</div><div class="line">      INNER JOIN Customers </div><div class="line">      ON StudentCourse.EnrollNo = Student.EnrollNo</div><div class="line">      ORDER BY StudentCourse.CourseID;</div></pre></td></tr></table></figure>
</li>
<li><p>full join<br><img src="https://lh3.googleusercontent.com/4uK2KdyZQ4faAdOZSNHV-wQlXGRsSNY1mA2HKtGFwuSoiK4lm3GdHsA3TE-C1gxl-rbpyeJ0-IrrAUQTsJp3HL908_zTRp-TnnfQ3_OgBIVquemXkoT1v0MFZSzJMDu7kxtCB7OyBw" alt="full join"></p>
</li>
<li>left join<br><img src="https://lh3.googleusercontent.com/g5STD0f-sAMFWdPt_qz-PejAavBt5X_aJTRcY4ehkgeZL2-LGF1hCcjaTcoqHQWywoa7hveb4hQWiRNH8duj2p7kmJJSXwBE5FLDyPlyuXY1_n0uvUPtmCIuDBJ82MrBY4l_DqLsNg" alt="left join"></li>
<li>right join<br><img src="https://lh3.googleusercontent.com/ryjSfmU2QkL6eujCQwk8ypZ_VuoEWZ887PvZWaJN2w3NHyMvFTrPXX7iMi5148ygZjPwzGg6fDu2tIfzyTehXQ3ysofB_c__1D3k-pCGtcUgA8DBZ9CFk-mzub7CGOCwXhDVAT1ZLA" alt="right join"></li>
<li>inner join<br><img src="https://lh3.googleusercontent.com/3OZv-4kbUo9Z00aHDEEuvS8iuhS3BnM90qMmaa53j3G_kvMeC6kgm_4JE5qZS-kqJn40KM5bnq9_hvkEjuaS3pBlVSU49Juo6DS3bxEiussyzY3jFntof1_HNVKh2AlMr8DksikDOw" alt="inner join"></li>
</ul>
</li>
<li><p>What is a view in SQL? How to create one</p>
<ul>
<li>A view is a virtual table based on the result-set of an SQL statement. We can create using create view syntax.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  CREATE VIEW view_name AS</div><div class="line">SELECT column_name(s)</div><div class="line">FROM table_name</div><div class="line">WHERE condition</div></pre></td></tr></table></figure>
</li>
<li><p>What is a Trigger?</p>
<ul>
<li>A Trigger is a code that associated with insert, update or delete operations. The code is executed automatically whenever the associated query is executed on a table. Triggers can be useful to maintain integrity in database.</li>
</ul>
</li>
<li><p>What is a stored procedure?</p>
<ul>
<li>It contains a set of operations that are commonly used in an application to do some common database tasks.</li>
</ul>
</li>
<li><p>What is the difference between Trigger and Stored Procedure?</p>
<ul>
<li>Unlike Stored Procedures, Triggers cannot be called directly. They can only be associated with queries.</li>
</ul>
</li>
<li><p>What are clustered and non-clustered Indexes?</p>
<ul>
<li>Clustered indexes is the index according to which data is physically stored on disk. Therefore, only one clustered index can be created on a given database table.<br>Non-clustered indexes don’t define physical ordering of data, but logical ordering. Typically, a tree is created whose leaf point to disk records. B-Tree or B+ tree are used for this purpos</li>
</ul>
</li>
<li><p>Query to find 2nd highest salary of an employee?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select min(price) from (SELECT Price FROM Products order by price desc limit 2);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> database </category>
            
        </categories>
        
        
        <tags>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[InterestingQuestions]]></title>
      <url>/2017/09/16/InterestingQuestions/</url>
      <content type="html"><![CDATA[<p>整理了一些很有趣的问题</p>
<ul>
<li>get maximum subarray sum no larger than k<ul>
<li>nlogn 的解法(n^2的解法我就不说了)</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public int maxSumNoLargerThanK(int []nums,int k)&#123;</div><div class="line">        int sum =0,maxVal=Integer.MIN_VALUE;</div><div class="line">        TreeSet&lt;Integer&gt; set =new TreeSet&lt;&gt;();</div><div class="line">        set.add(0);</div><div class="line">        for(int x:nums)&#123;</div><div class="line">            sum +=x;</div><div class="line">            Integer it = set.ceiling(sum-k);</div><div class="line">            if(it!=null)</div><div class="line">                maxVal=Math.max(maxVal,sum-it);</div><div class="line">            set.add(sum);</div><div class="line">        &#125;</div><div class="line">        return maxVal;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>merge two sorted array to get maximum number</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">//special test case: </div><div class="line">//int[]nums1= &#123;2,5,6,4,4,0&#125;;</div><div class="line">//int []nums2 = &#123;7,3,8,0,6,5,7,6,2&#125;;</div><div class="line"></div><div class="line">public boolean greater(int[]nums1,int start1,int[]nums2,int start2)&#123;</div><div class="line">        int m = nums1.length,n = nums2.length;</div><div class="line">        while(start1&lt;m &amp;&amp; start2&lt;n)&#123;</div><div class="line">            if(nums1[start1]&gt;nums2[start2])</div><div class="line">                return true;</div><div class="line">            else if(nums1[start1]&lt;nums2[start2])</div><div class="line">                return false;</div><div class="line">            else&#123;</div><div class="line">                start1++;</div><div class="line">                start2++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return start1!=m;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public int []getMaxi(int[]nums1,int[]nums2)&#123;</div><div class="line">        int m=  nums1.length,n=nums2.length;</div><div class="line">        int k = m+n;</div><div class="line">        int []res=new int[k];</div><div class="line">        int ind =0,start1=0,start2=0;</div><div class="line">        while(ind&lt;k)&#123;</div><div class="line">            res[ind++]=greater(nums1,start1,nums2,start2)?nums1[start1++]:nums2[start2++];</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://leetcode.com/problems/queue-reconstruction-by-height/description/" target="_blank" rel="external">Queue Reconstruction by Height</a> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//we try to make the (h,k), k is the position we want to isert the number. How?, arrange the large number first.</div><div class="line"></div><div class="line">public int[][] reconstructQueue(int[][] people) &#123;</div><div class="line">        Arrays.sort(people, new Comparator&lt;int[]&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public int compare(int[] o1, int[] o2) &#123;</div><div class="line">                if(o1[0]!=o2[0])</div><div class="line">                    return Integer.compare(o2[0],o1[0]);</div><div class="line">                else</div><div class="line">                    return Integer.compare(o1[1],o2[1]);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        int n=people.length;</div><div class="line">        List&lt;int[]&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            res.add(people[i][1],people[i]);</div><div class="line">        &#125;</div><div class="line">        return res.toArray(new int[people.length][]);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://leetcode.com/problems/longest-repeating-character-replacement/description/" target="_blank" rel="external">Longest Repeating Character Replacement</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//424 Longest Repeating Character Replacement</div><div class="line">    //很有意思的地方在于不需要更新max，其实就是自动把&lt;len 的string过滤了</div><div class="line">    //第一次提交每次都更新了maxCnt</div><div class="line">    public int characterReplacement(String s, int k) &#123;</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        int n = ss.length,start=0,end=0,len=0,maxCnt=0;</div><div class="line">        int []cnt = new int[26];</div><div class="line">        while(end&lt;n)&#123;</div><div class="line">            maxCnt=Math.max(maxCnt,++cnt[ss[end++]-&apos;A&apos;]);</div><div class="line">            while(end-start-maxCnt&gt;k)&#123;</div><div class="line">                cnt[ss[start++]-&apos;A&apos;]--;</div><div class="line">            &#125;</div><div class="line">            len = Math.max(len,end-start);</div><div class="line">        &#125;</div><div class="line">        return len;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://leetcode.com/problems/longest-palindromic-subsequence/description/" target="_blank" rel="external">longest palindrome subsequence</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//dp</div><div class="line">public int longestPalindromeSubseq(String s)&#123;</div><div class="line">	int n  = s.length();</div><div class="line">	int [][]dp = new int[n][n];</div><div class="line">	for(int i=n-1;i&gt;=0;--i)&#123;</div><div class="line">		dp[i][i]=1;</div><div class="line">		for(int j=i+1;j&lt;n;++j)&#123;</div><div class="line">			if(s.charAt(i)==s.charAt(j))&#123;</div><div class="line">				dp[i][j]=dp[i+1][j-1]+2;</div><div class="line">			&#125;else&#123;</div><div class="line">				dp[i][j] = Math.max(dp[i+1][j],dp[i][j-1]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://lh3.googleusercontent.com/kxPm9yA89Ow6_VvbXnWxAhaa5w4M6r77A-w1Ls7YRvLXhSCbPqiBNykptsZ6zwDVuC1EgTCVrbNjs9WXsh45v1uui0qGZhIohNHq3JYhJpJtNo9c03ACeK5naWuMdwf_yHSxLZWXLg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithms </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OfferNegotiation]]></title>
      <url>/2017/09/15/OfferNegotiation/</url>
      <content type="html"><![CDATA[<h2 id="offer-negotiation"><a href="#offer-negotiation" class="headerlink" title="offer negotiation"></a>offer negotiation</h2><hr>
<a id="more"></a>
<p>最近听了一个关于offer negotiation的讲座，今天整理出来分享一下。<br>关于offer negotiation有多重要我就不多说了。详细可以参考<a href="https://mp.weixin.qq.com/s?__biz=MzA4NzM3MTkzNw==&amp;mid=2652384173&amp;idx=1&amp;sn=7617ba641af29176d85df5530087af50&amp;chksm=8bd6f263bca17b75f944b50e31381fa48447b913cd092e15b854bb086b67751746d6667b361a&amp;mpshare=1&amp;scene=1&amp;srcid=0916KfxnZrDLFvwVjNR19Ywl&amp;key=bc73b2383c76f4311b1819c9d3cba3a2afcb60972da9e3c727fc6d05e5845c0e462bf038139f17b5a6fb9f9033d8216da008e3a032a4da055bb1eb7d0f9f0959483329994fa4320db8f1ead627df8f0c" target="_blank" rel="external">Warald_一亩三分地</a></p>
<ul>
<li>过程很微妙，需要有耐心</li>
<li>有一定风险，结果不能确定</li>
<li>没有唯一正确的方法，需要分析当时的情况</li>
<li>并不能满足所有需求，需要有符合实际的exception</li>
<li>不是战争，没有输赢，win-win 是重点</li>
</ul>
<p>在整个过程中，态度一定要<strong>坚定大方</strong></p>
<p><strong>公司喜欢经常跳槽的人还是固定不动的人？</strong></p>
<ol>
<li>经常跳槽的人<ul>
<li>能挖动</li>
<li>市场需求量大</li>
<li>技能与时俱进</li>
<li>知道面试行情，经验足，容易过面试</li>
</ul>
</li>
<li>固守不动的人<ul>
<li>忠诚度高</li>
<li>技术老旧，在现有公司止步不前</li>
<li>无法与时俱进</li>
<li>经验不足，通过面试的概率低</li>
</ul>
</li>
</ol>
<p><strong>如何看待hr说按能力给出相应的package？</strong></p>
<ul>
<li>模糊词汇</li>
<li>能力高低难以量化</li>
<li>对方的战术体现</li>
</ul>
<p><strong>应届生的工资都是统一的？</strong></p>
<ul>
<li>与面试表现成正比</li>
<li>平均值作为参考</li>
<li>offer negotiation 后结果不同</li>
<li>lowball vs rockstar</li>
</ul>
<p><strong>有哪些东西可以去negotiate？</strong></p>
<ul>
<li>relocation expense</li>
<li>vocation / sick time</li>
<li>telecommute (work from home)</li>
<li>base salary</li>
<li>stock options</li>
<li>sign bonus</li>
</ul>
<p><strong>negotiate 之前需要做哪些准备？</strong></p>
<ul>
<li>目前市场上同level的平均工资</li>
<li>该公司目前找人和negotiation的基本趋势</li>
<li>该公司同等level员工的平均工资</li>
<li>range: lowball + 15% — rockstar - 10%</li>
</ul>
<p><strong>negotiate的时候是一次性说完还是多次说？</strong></p>
<p>一次性说完，而且把最想提高的那部分说完。hr和你谈话的时间不会太久，而且hr基本会盯着一点说很久，这样你就没有太多机会说其他的选项了。此外，站在hr的角度上看，她是不希望你多次找她谈条件。</p>
<p><strong>如何提高你的negotion power?</strong></p>
<ul>
<li>同一时期拥有更多的offer<ul>
<li>紧密的安排面试</li>
<li>同一时期投多份简历</li>
</ul>
</li>
<li>current job做为谈判筹码<ul>
<li>提升title</li>
</ul>
</li>
</ul>
<p><strong>具体数字问题</strong></p>
<ul>
<li>让对方先说</li>
<li>申请的时候对方让填具体数字，填 0</li>
<li>技巧<ul>
<li>反问对方具体range，继续问出一系列问题</li>
<li>可以说 depends on overall<br>compensation including benefits</li>
<li>给出一个larger 的range</li>
</ul>
</li>
</ul>
<p><strong>不应该出现的negotiation 点</strong></p>
<ul>
<li>家庭问题</li>
<li>经济困难</li>
<li>身体因素</li>
</ul>
<p>这些会给人一种不积极，不专业，消极的印象</p>
<p><strong>和Hire Manager, HR 聊什么？</strong></p>
<ol>
<li>和HM打外交战<ul>
<li>聊技术，聊发展，聊vision</li>
<li>原则就是让HM 对你产生非常好的印象</li>
<li>HM的意见会最终影响你的package</li>
</ul>
</li>
<li>和HR打拉锯战<ul>
<li>第一阶段： 互相测试，迂转千回，就是不告诉她具体数字。就说签了nda</li>
<li>第二阶段： 双方激战，借力打力，互不相让。反问对方的工资range</li>
<li>第三阶段： 反转优势， 从容不迫，无中生有。停顿3秒原则，给出预期的数字就接。</li>
</ul>
</li>
</ol>
<p><strong>关键部分都要留下书面信息</strong></p>
<ol>
<li>offer 细节</li>
<li>具体的工作任务和责任</li>
<li>之后拿到更多薪水的步骤</li>
</ol>
<p><strong>你要知道的信息</strong></p>
<ol>
<li>找一个engineer 平均花费20000$</li>
<li>offer 数字留有空间</li>
<li>hr会猜测你目前的薪资水平</li>
</ol>
]]></content>
      
        <categories>
            
            <category> work </category>
            
        </categories>
        
        
        <tags>
            
            <tag> offer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac_ruby_setup]]></title>
      <url>/2017/09/07/mac-ruby-setup/</url>
      <content type="html"><![CDATA[<h3 id="mac-install-ruby"><a href="#mac-install-ruby" class="headerlink" title="mac install ruby"></a>mac install ruby</h3><hr>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">brew install rbenv ruby-build</div><div class="line"></div><div class="line"># Add rbenv to bash so that it loads every time you open a terminal</div><div class="line">echo &apos;if which rbenv &gt; /dev/null; then eval &quot;$(rbenv init -)&quot;; fi&apos; &gt;&gt; ~/.bash_profile</div><div class="line">source ~/.bash_profile</div><div class="line"></div><div class="line"># Install Ruby</div><div class="line">rbenv install 2.4.1</div><div class="line">rbenv global 2.4.1</div><div class="line">ruby -v</div><div class="line"></div><div class="line"># you should install the Command Line tools as they aren&apos;t installed by default (xcode)</div><div class="line"></div><div class="line">xcode-select --install</div><div class="line"></div><div class="line">gem install rails -v 5.1.3</div><div class="line"></div><div class="line">rbenv rehash</div><div class="line"></div><div class="line">rails -v</div><div class="line"></div><div class="line"></div><div class="line"># create new application</div><div class="line">rails new blog</div><div class="line"></div><div class="line"># if webpacker is not installed</div><div class="line">brew install yarn</div><div class="line">rails webpacker:install</div><div class="line"></div><div class="line"># run server</div><div class="line">rails server</div></pre></td></tr></table></figure>
<hr>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># start default web server: puma</div><div class="line">rails server</div></pre></td></tr></table></figure>
<h3 id="drop-table"><a href="#drop-table" class="headerlink" title="drop table"></a>drop table</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rails console</div><div class="line">ActiveRecord::Migration.drop_table(:users)</div><div class="line"></div><div class="line"># where users is the table name. And done, worked for me!</div></pre></td></tr></table></figure>
<h3 id="destroy-model"><a href="#destroy-model" class="headerlink" title="destroy model"></a>destroy model</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rails destroy model student</div><div class="line"></div><div class="line"># where student is the model</div></pre></td></tr></table></figure>
<h3 id="generate-model"><a href="#generate-model" class="headerlink" title="generate model"></a>generate model</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">rails generate model student \</div><div class="line">uin:integer first_name:string middle_name:string last_name:string \</div><div class="line">level: integer \</div><div class="line">email:string \</div><div class="line">phone: string \</div><div class="line">assigned: boolean \</div><div class="line">advisor_email: string \</div><div class="line">can_ta: boolean \</div><div class="line">can_grader: boolean \</div><div class="line">can_sgrader: boolean \</div><div class="line">perferences: string \</div><div class="line">date_enrolled: date \</div><div class="line">last_modified: timestamp</div></pre></td></tr></table></figure>
<h3 id="rbenv-usage"><a href="#rbenv-usage" class="headerlink" title="rbenv usage"></a>rbenv usage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># list all installed ruby</div><div class="line">rbenv versions</div><div class="line"></div><div class="line"># list all available versions</div><div class="line">rbenv install -l</div><div class="line"></div><div class="line">#install ruby</div><div class="line">rbenv install 2.0.0-p247</div><div class="line"></div><div class="line">#use local</div><div class="line">rbenv local 2.0.0-p247</div><div class="line">rbenv rehash</div></pre></td></tr></table></figure>
<h3 id="heroku"><a href="#heroku" class="headerlink" title="heroku"></a>heroku</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">heroku run rake db:migrate --app morning-reef-98714</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[csce606_github]]></title>
      <url>/2017/09/06/csce606-github/</url>
      <content type="html"><![CDATA[<p>在已经建好organization 和 team的情况下，可以按照如下步骤进行协同开发</p>
<hr>
<a id="more"></a>
<h4 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">git clone https://github.tamu.edu/HelloWorld/TA_Assignment_System.git</div><div class="line"></div><div class="line">// change to dev branch</div><div class="line">git checkout dev</div><div class="line"></div><div class="line">//check what&apos;s current branch</div><div class="line">git branch</div><div class="line"></div><div class="line">//after add or modified some files</div><div class="line">git add file1.txt file2.txt file3.txt</div><div class="line"></div><div class="line">//check file status </div><div class="line">git status</div><div class="line"></div><div class="line">//pull the latest dev version from remote</div><div class="line">//you should always pull before push</div><div class="line">git pull origin dev</div><div class="line"></div><div class="line">//commit files and add explanation</div><div class="line">git commit -m &quot;your explanation&quot;</div><div class="line"></div><div class="line">//push to remote</div><div class="line">git push origin dev</div></pre></td></tr></table></figure>
<h4 id="以后的提交"><a href="#以后的提交" class="headerlink" title="以后的提交"></a>以后的提交</h4><p>只需要上面步骤的后面几步了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git add file1.txt file2.txt file3.txt</div><div class="line"></div><div class="line">git pull origin dev</div><div class="line"></div><div class="line">git commit -m &quot;your explanation&quot;</div><div class="line"></div><div class="line">git push origin dev</div></pre></td></tr></table></figure>
<h2 id="常用git命令"><a href="#常用git命令" class="headerlink" title="常用git命令"></a>常用git命令</h2><hr>
<ul>
<li>add/delete files</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//add specific files </div><div class="line">git add [file1] [file2] ...</div><div class="line"></div><div class="line">//add current dir including its subdirs</div><div class="line">git add [dir]</div><div class="line"></div><div class="line">//add all files in current dir</div><div class="line">git add .</div><div class="line"></div><div class="line">//delete specific files</div><div class="line">//delete files in your disk and index area</div><div class="line">git rm -f [file1] [file2] ...</div><div class="line"></div><div class="line">//delete files in index area but they remains in your disk</div><div class="line">git rm --cached [file1] [file2] ...</div></pre></td></tr></table></figure>
<ul>
<li>branch</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//list all local branches</div><div class="line">git branch</div><div class="line"></div><div class="line">//list all remote branches</div><div class="line">git branch -r</div><div class="line"></div><div class="line">//list all local &amp; remote branches</div><div class="line">git branch -a</div><div class="line"></div><div class="line">//create a new branch, but remain in the original branch</div><div class="line">git branch [branch-name]</div><div class="line"></div><div class="line">//create a new branch and change to new branch</div><div class="line">git checkout -b [branch]</div><div class="line"></div><div class="line">//change to specific branch</div><div class="line">git checkout [branch-name]</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MultiThread]]></title>
      <url>/2017/08/12/MultiThread/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="selling-tickets"><a href="#selling-tickets" class="headerlink" title="selling tickets"></a>selling tickets</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">public class SellThread implements Runnable</div><div class="line">&#123;</div><div class="line">    private int ticketCount = 10;// total tickets, all thread will visit</div><div class="line">    Object mutex = new Object();// mutex</div><div class="line">    /**</div><div class="line">     * selling ticket</div><div class="line">     */</div><div class="line">    public  void sellTicket()</div><div class="line">    &#123;</div><div class="line">        synchronized (mutex) </div><div class="line">        &#123;</div><div class="line">            if (ticketCount &gt; 0)</div><div class="line">            &#123;</div><div class="line">                ticketCount--;</div><div class="line">                System.out.println(Thread.currentThread().getName()</div><div class="line">                        + &quot;selling...&quot; + ticketCount + &quot;tickets left&quot;);</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                System.out.println(&quot;sell done！&quot;);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run()</div><div class="line">    &#123;</div><div class="line">        while (ticketCount &gt; 0)</div><div class="line">        &#123;</div><div class="line">            sellTicket();</div><div class="line">            </div><div class="line">            //sleep 1 millisecond so that each thread</div><div class="line">            //has the chance to sell ticket</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                Thread.sleep(1);</div><div class="line">            &#125;</div><div class="line">            catch (InterruptedException e)</div><div class="line">            &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">public class Test&#123;</div><div class="line"></div><div class="line"></div><div class="line">    public static void main(String[] args)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        SellThread runTicekt = new SellThread();//one instance will lead to only one object </div><div class="line">        //,so we have only one mutex        </div><div class="line">        Thread th1 = new Thread(runTicekt, &quot;window1&quot;);</div><div class="line">        Thread th2 = new Thread(runTicekt, &quot;window2&quot;);</div><div class="line">        Thread th3 = new Thread(runTicekt, &quot;window3&quot;);</div><div class="line">        Thread th4 = new Thread(runTicekt, &quot;window4&quot;);</div><div class="line">        th1.start();</div><div class="line">        th2.start();</div><div class="line">        th3.start();</div><div class="line">        th4.start();</div><div class="line">        try&#123;</div><div class="line">            th4.join();</div><div class="line">            th3.join();</div><div class="line">            th2.join();</div><div class="line">            th1.join();</div><div class="line">        &#125;catch (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> os </category>
            
        </categories>
        
        
        <tags>
            
            <tag> thread </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DFSQuestions]]></title>
      <url>/2017/08/01/DFSQuestions/</url>
      <content type="html"><![CDATA[<h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><hr>
<a id="more"></a>
<ul>
<li>200 Number of islands</li>
<li>110 Balanced binary tree</li>
<li>124 Binary Tree Maximum Path Sum</li>
<li>99 Recover Binary Search Tree</li>
<li>133 Clone Graph</li>
<li>114 Flatten Binary Tree to Linked List</li>
<li>199 Binary Tree Right Side View</li>
<li>301 Remove Invalid Parentheses</li>
<li>337 House Robber III</li>
<li>339 Nested List Weight Sum</li>
</ul>
<h3 id="200-Number-of-islands"><a href="#200-Number-of-islands" class="headerlink" title="200 Number of islands"></a>200 Number of islands</h3><p>思路： 求多少个联通块，dfs，bfs，unionfind</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public void dfs(int x,int y,boolean[][]vis,char[][]grid)&#123;</div><div class="line">        if(x&lt;0||y&lt;0||x&gt;=grid.length||y&gt;=grid[0].length||vis[x][y]||grid[x][y]==&apos;0&apos;)</div><div class="line">            return;</div><div class="line">        vis[x][y]=true;</div><div class="line">        dfs(x+1,y,vis,grid);</div><div class="line">        dfs(x-1,y,vis,grid);</div><div class="line">        dfs(x,y+1,vis,grid);</div><div class="line">        dfs(x,y-1,vis,grid);</div><div class="line">    &#125;</div><div class="line">    public int numIslands(char[][] grid) &#123;</div><div class="line">        if(grid.length==0||grid[0].length==0)</div><div class="line">            return 0;</div><div class="line">        int m = grid.length,n=grid[0].length;</div><div class="line">        int cnt=0;</div><div class="line">        boolean [][]vis=new boolean[m][n];</div><div class="line">        for(int i=0;i&lt;m;++i)&#123;</div><div class="line">            for(int j=0;j&lt;n;++j)&#123;</div><div class="line">                if(grid[i][j]==&apos;1&apos; &amp;&amp; !vis[i][j])&#123;</div><div class="line">                    cnt++;</div><div class="line">                    dfs(i,j,vis,grid);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return cnt;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="110-Balanced-binary-tree"><a href="#110-Balanced-binary-tree" class="headerlink" title="110 Balanced binary tree"></a>110 Balanced binary tree</h3><p>思路： 树平衡这种题一定要计算高度的。笨点的每个结点都要查左右子树高度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public int getHeight(TreeNode root)&#123;</div><div class="line">        if(root==null)</div><div class="line">            return 0;</div><div class="line">        int l = getHeight(root.left);</div><div class="line">        int r = getHeight(root.right);</div><div class="line">        if(l==-1||r==-1||Math.abs(l-r)&gt;1)</div><div class="line">            return -1;</div><div class="line">        return Math.max(l,r)+1;</div><div class="line">    &#125;</div><div class="line">    public boolean isBalanced(TreeNode root) &#123;</div><div class="line">        return getHeight(root)!=-1;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="124-Binary-Tree-Maximum-Path-Sum"><a href="#124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="124 Binary Tree Maximum Path Sum"></a>124 Binary Tree Maximum Path Sum</h3><p>思路： 第一次做的时候一脸懵逼，其实仔细想想，我们需要借助一个dfs函数返回一个值供父节点使用，这个值因该是math.max(cur.val,cur.val+left,cur.val+right),不能有cur.val+left+right,这样就会cross，不能再向上拓展了。全局变量记录这四项的最大值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int dfs(TreeNode root,int []res)&#123;</div><div class="line">       if(root==null)</div><div class="line">           return 0;</div><div class="line">       int l=dfs(root.left,res);</div><div class="line">       int r = dfs(root.right,res);</div><div class="line">       int ans=Math.max(l+root.val,Math.max(r+root.val,root.val));</div><div class="line">       res[0]=Math.max(Math.max(ans,res[0]),l+r+root.val);</div><div class="line">       return ans;</div><div class="line">   &#125;</div><div class="line">   public int maxPathSum(TreeNode root) &#123;</div><div class="line">       int []res=new int[1];</div><div class="line">       res[0]=Integer.MIN_VALUE;</div><div class="line">       dfs(root,res);</div><div class="line">       return res[0];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="99-Recover-Binary-Search-Tree"><a href="#99-Recover-Binary-Search-Tree" class="headerlink" title="99 Recover Binary Search Tree"></a>99 Recover Binary Search Tree</h3><p>思路： 中序遍历，然后会发现两次pre.val&gt;root.val,你画画图试试，第一次的异常点事pre，第二个异常点事root。笨一点就可以先把值打印，然后就排序，赋值回去。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public TreeNode first=null;</div><div class="line">    public TreeNode second=null;</div><div class="line">    public TreeNode pre=null;</div><div class="line"></div><div class="line">    public void inorder(TreeNode root)&#123;</div><div class="line">        if(root==null)</div><div class="line">            return;</div><div class="line">        inorder(root.left);</div><div class="line">        if(pre!=null)&#123;</div><div class="line">            if(pre.val&gt;root.val)&#123;</div><div class="line">                if(first==null)</div><div class="line">                    first=pre;</div><div class="line">                second=root;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        pre=root;</div><div class="line">        inorder(root.right);</div><div class="line">        //pre=root;</div><div class="line">    &#125;</div><div class="line">    public void recoverTree(TreeNode root)&#123;</div><div class="line">        inorder(root);</div><div class="line">        if(first!=null &amp;&amp; second!=null)&#123;</div><div class="line">            int tmp = first.val;</div><div class="line">            first.val=second.val;</div><div class="line">            second.val=tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="133-Clone-Graph"><a href="#133-Clone-Graph" class="headerlink" title="133 Clone Graph"></a>133 Clone Graph</h3><p>思路： recursive 的方法太简单，简单说说bfs的way，遍历图，如果map里没有，就创建新的node，否则不创建，但是最后都要关联起来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">        Map&lt;UndirectedGraphNode,UndirectedGraphNode&gt;map=new HashMap&lt;&gt;();</div><div class="line">        if(node==null)</div><div class="line">            return null;</div><div class="line">        Queue&lt;UndirectedGraphNode&gt;q=new LinkedList&lt;&gt;();</div><div class="line">        q.offer(node);</div><div class="line">        map.put(node,new UndirectedGraphNode(node.label));</div><div class="line">        while(!q.isEmpty())&#123;</div><div class="line">            UndirectedGraphNode top = q.poll();</div><div class="line">            for(UndirectedGraphNode ne:top.neighbors)&#123;</div><div class="line">                if(!map.containsKey(ne))&#123;</div><div class="line">                    map.put(ne,new UndirectedGraphNode(ne.label));</div><div class="line">                    q.offer(ne);</div><div class="line">                &#125;</div><div class="line">                map.get(top).neighbors.add(map.get(ne));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return map.get(node);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //recursive way</div><div class="line">    </div><div class="line">    Map&lt;UndirectedGraphNode,UndirectedGraphNode&gt;map=new HashMap&lt;&gt;();</div><div class="line">    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">        if(node==null)</div><div class="line">            return null;</div><div class="line">        if(!map.containsKey(node))&#123;</div><div class="line">            map.put(node,new UndirectedGraphNode(node.label));</div><div class="line">            for(UndirectedGraphNode child:node.neighbors)</div><div class="line">                map.get(node).neighbors.add(cloneGraph(child));</div><div class="line">        &#125;</div><div class="line">        return map.get(node);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="114-Flatten-Binary-Tree-to-Linked-List"><a href="#114-Flatten-Binary-Tree-to-Linked-List" class="headerlink" title="114 Flatten Binary Tree to Linked List"></a>114 Flatten Binary Tree to Linked List</h3><p>思路：后续遍历，仔细揣摩一下，当然，也可以iterative</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">TreeNode pre=null;</div><div class="line">    public void flatten(TreeNode root) &#123;</div><div class="line">        if(root==null)</div><div class="line">            return;</div><div class="line">        flatten(root.right);</div><div class="line">        flatten(root.left);</div><div class="line">        root.right=pre;</div><div class="line">        root.left=null;</div><div class="line">        pre=root;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    public void flatten(TreeNode root) &#123;</div><div class="line">        if(root==null)</div><div class="line">            return;</div><div class="line">        TreeNode node = root;</div><div class="line">        while(node!=null)&#123;</div><div class="line">            if(node.left!=null)&#123;</div><div class="line">                TreeNode cur = node.left;</div><div class="line">                while(cur.right!=null)</div><div class="line">                    cur=cur.right;</div><div class="line">                cur.right=node.right;</div><div class="line">                node.right=node.left;</div><div class="line">                node.left=null;</div><div class="line">            &#125;</div><div class="line">            node=node.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="199-Binary-Tree-Right-Side-View"><a href="#199-Binary-Tree-Right-Side-View" class="headerlink" title="199 Binary Tree Right Side View"></a>199 Binary Tree Right Side View</h3><p>思路： 和level order很像, bfs的方法我就懒得写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public void dfs(List&lt;Integer&gt;res,TreeNode root,int level)&#123;</div><div class="line">       if(root==null)</div><div class="line">           return;</div><div class="line">       if(level&gt;=res.size())</div><div class="line">           res.add(root.val);</div><div class="line">       dfs(res,root.right,level+1);</div><div class="line">       dfs(res,root.left,level+1);</div><div class="line">   &#125;</div><div class="line">   public List&lt;Integer&gt; rightSideView(TreeNode root) &#123;</div><div class="line">       List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">       dfs(res,root,0);</div><div class="line">       return res;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="301-Remove-Invalid-Parentheses"><a href="#301-Remove-Invalid-Parentheses" class="headerlink" title="301 Remove Invalid Parentheses"></a>301 Remove Invalid Parentheses</h3><p>思路： bfs，暴力枚举每个删除的位置。dfs也可，但是还没掌握，太精妙了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public boolean isValid(String s)&#123;</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        int cnt=0;</div><div class="line">        for(char c:ss)&#123;</div><div class="line">            if(c==&apos;(&apos;)</div><div class="line">                cnt++;</div><div class="line">            else if(c==&apos;)&apos;)</div><div class="line">                cnt--;</div><div class="line">            if(cnt&lt;0)</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return cnt==0;</div><div class="line">    &#125;</div><div class="line">    public List&lt;String&gt; removeInvalidParentheses(String s) &#123;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        if(isValid(s))&#123;</div><div class="line">            res.add(s);</div><div class="line">            return res;</div><div class="line">        &#125;</div><div class="line">        Queue&lt;String&gt;q=new LinkedList&lt;&gt;();</div><div class="line">        q.offer(s);</div><div class="line">        Map&lt;String,Boolean&gt;vis=new HashMap&lt;&gt;();</div><div class="line">        boolean next=true;</div><div class="line">        vis.put(s,true);</div><div class="line">        while(next &amp;&amp; !q.isEmpty())&#123;</div><div class="line">            int size=q.size();</div><div class="line">            while(size -- &gt;0)&#123;</div><div class="line">                String top = q.poll();</div><div class="line">                int len =top.length();</div><div class="line">                for(int i=0;i&lt;len;++i)&#123;</div><div class="line">                    if(s.charAt(i)==&apos;(&apos;||s.charAt(i)==&apos;)&apos;)&#123;</div><div class="line">                        String sub = top.substring(0,i)+top.substring(i+1);</div><div class="line">                        if(!vis.containsKey(sub))&#123;</div><div class="line">                            vis.put(sub,true);</div><div class="line">                            q.offer(sub);</div><div class="line">                            if(isValid(sub))&#123;</div><div class="line">                                next=false;</div><div class="line">                                res.add(sub);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="337-House-Robber-III"><a href="#337-House-Robber-III" class="headerlink" title="337 House Robber III"></a>337 House Robber III</h3><p>思路： dfs 返回一个长度为2的数组，一个代表rob了当前node，一个代表没有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public int[]dfsRob(TreeNode root)&#123;</div><div class="line">        if(root==null)</div><div class="line">            return new int[]&#123;0,0&#125;;</div><div class="line">        int []res=new int[2];</div><div class="line">        //res[0] rob root; res[1] not rob root;</div><div class="line">        int []l = dfsRob(root.left);</div><div class="line">        int []r =dfsRob(root.right);</div><div class="line">        res[0]=l[1]+r[1]+root.val;</div><div class="line">        //好好想想，没选中当前node，不代表最大值一定是选左子节点，右子节点。</div><div class="line">        res[1]=Math.max(l[0],l[1])+Math.max(r[0],r[1]);</div><div class="line">        return res;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public int rob(TreeNode root) &#123;</div><div class="line">        int []res=dfsRob(root);</div><div class="line">        return Math.max(res[0],res[1]);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="339-Nested-List-Weight-Sum"><a href="#339-Nested-List-Weight-Sum" class="headerlink" title="339 Nested List Weight Sum"></a>339 Nested List Weight Sum</h3><p>思路：普通的level by level 求和</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public void dfs(List&lt;NestedInteger&gt;nestedList,int[]res,int level)&#123;</div><div class="line">        int n=nestedList.size();</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            if(nestedList.get(i).isInteger())&#123;</div><div class="line">                res[0]+=level*nestedList.get(i).getInteger();</div><div class="line">            &#125;else&#123;</div><div class="line">                dfs(nestedList.get(i).getList(),res,level+1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public int depthSum(List&lt;NestedInteger&gt; nestedList) &#123;</div><div class="line">        int []res=new int[1];</div><div class="line">        dfs(nestedList,res,1);</div><div class="line">        return res[0];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BFSQuestions]]></title>
      <url>/2017/07/23/BFSQuestions/</url>
      <content type="html"><![CDATA[<h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><hr>
<a id="more"></a>
<ul>
<li>199 Binary Tree Right Side View</li>
</ul>
<p>s<br>思路： dfs 和  bfs，其实和level order的两种差不多</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public void dfs(TreeNode node,List&lt;Integer&gt;res,int level)&#123;</div><div class="line">        if(node==null)</div><div class="line">            return;</div><div class="line">        if(level&gt;=res.size())</div><div class="line">            res.add(node.val);</div><div class="line">        dfs(node.right,res,level+1);</div><div class="line">        dfs(node.left,res,level+1);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public List&lt;Integer&gt; rightSideView(TreeNode root) &#123;</div><div class="line">        List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        dfs(root,res,0);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    public List&lt;Integer&gt;rightSideViewByBFS(TreeNode root)&#123;</div><div class="line">        List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        if(root==null)</div><div class="line">            return res;</div><div class="line">        Queue&lt;TreeNode&gt;q=new LinkedList&lt;&gt;();</div><div class="line">        while(!q.isEmpty())&#123;</div><div class="line">            int size= q.size();</div><div class="line">            while(size --&gt;0)&#123;</div><div class="line">                TreeNode top=q.poll();</div><div class="line">                if(size==0)</div><div class="line">                    res.add(top.val);</div><div class="line">                if(top.left!=null)</div><div class="line">                    q.offer(top.left);</div><div class="line">                if(top.right!=null)</div><div class="line">                    q.offer(top.right);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Expectations"><a href="#Expectations" class="headerlink" title="Expectations"></a>Expectations</h1><hr>
<ul>
<li>改天把internship所涉及到的tech总结一下。</li>
<li>要对internship的project表现出激情</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/RlEdIBHmvtJYrCdt4QOs3u21KcLmUZBoNYpvbY-CRkN6W2giTU9nMR68LX6EOYNCYfJb97nxn_vNTNi-zfPnxIxoexH6QyeW9jDdDvM6qOu_BSvUEdGgIjvFei3LSR_tbW33jDH0iQ" alt="Sandford Univ"></p>
<hr>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BacktrackingQuestions]]></title>
      <url>/2017/07/23/BacktrackingQuestions/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>10 Regular Expression Matching</li>
<li>17 Letter Combinations of a Phone Number</li>
<li>22     Generate Parentheses</li>
<li>46     Permutations</li>
<li>89 Gray Code</li>
<li>79     Word Search</li>
<li>140 Word Break II</li>
<li>78     N-Queens</li>
<li>37 Sudoku Solver</li>
<li>52 N-Queens II</li>
<li>93 Restore IP Addresses</li>
<li>131 Palindrome Partitioning</li>
<li>44 Wildcard Matching</li>
<li>60 Permutation Sequence</li>
<li>212 Word Search II</li>
<li>216 Combination Sum III</li>
<li>47 Permutations II</li>
<li>357 Count Numbers with Unique Digits</li>
<li>90 Subsets II</li>
<li>291 Word Pattern II</li>
<li>320 Generalized Abbreviation </li>
<li>401 Binary Watch</li>
<li>40 Combination Sum II</li>
<li>211 Add and Search Word - Data structure design</li>
<li>254 Factor Combinations </li>
<li>267 Palindrome Permutation II </li>
<li>351 Android Unlock Patterns </li>
<li>294 filp games II</li>
<li>526 Beautiful Arrangement</li>
</ul>
<hr>
<h3 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17 Letter Combinations of a Phone Number"></a>17 Letter Combinations of a Phone Number</h3><p>思路：先建立数字到字符的映射，然后回溯解决,  可以用map也可以用String 数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public void dfs(List&lt;String&gt;res,String digits,String[]num,int ind,String path)&#123;</div><div class="line">        if(ind==digits.length())&#123;</div><div class="line">            res.add(path);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(ind&gt;digits.length())</div><div class="line">            return;</div><div class="line">        for(int i=0;i&lt;num[digits.charAt(ind)-&apos;2&apos;].length();++i)&#123;</div><div class="line">            dfs(res,digits,num,ind+1,path+num[digits.charAt(ind)-&apos;2&apos;].charAt(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;String&gt; letterCombinations(String digits) &#123;</div><div class="line">        String []num = &#123;&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;,&quot;jkl&quot;,&quot;mno&quot;,&quot;pqrs&quot;,&quot;tuv&quot;,&quot;wxyz&quot;&#125;;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        if(digits.isEmpty())</div><div class="line">            return res;</div><div class="line">        dfs(res,digits,num,0,&quot;&quot;);</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22 Generate Parentheses"></a>22 Generate Parentheses</h3><p>思路： 可以用回溯法或者模拟出栈的过程，可以了解下卡塔兰数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public List&lt;String&gt; generateParenthesis(int n) &#123;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        generateParenthesis(n,0,0,res,&quot;&quot;);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void generateParenthesis(int n,int left,int right,List&lt;String&gt;res,String path)&#123;</div><div class="line">        if(left==n &amp;&amp; right==n)&#123;</div><div class="line">            res.add(path);</div><div class="line">            return ;</div><div class="line">        &#125;</div><div class="line">        if(left&lt;n)</div><div class="line">            generateParenthesis(n,left+1,right,res,path+&quot;(&quot;);</div><div class="line">        if(right&lt;left)</div><div class="line">            generateParenthesis(n,left,right+1,res,path+&quot;)&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    public void dfs(List&lt;String&gt;res,String path,Stack&lt;Integer&gt;input,Stack&lt;Integer&gt;stk,int n)&#123;</div><div class="line">        if(path.length()==2*n)&#123;</div><div class="line">            res.add(path);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(!input.isEmpty())&#123;</div><div class="line">            int top = input.pop();</div><div class="line">            stk.push(top);</div><div class="line">            dfs(res,path+&quot;(&quot;,input,stk,n);</div><div class="line">            stk.pop();</div><div class="line">            input.push(top);</div><div class="line">        &#125;</div><div class="line">        if(!stk.isEmpty())&#123;</div><div class="line">            int top = stk.pop();</div><div class="line">            dfs(res,path+&quot;)&quot;,input,stk,n);</div><div class="line">            stk.push(top);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;String&gt;generateParenthesis(int n)&#123;</div><div class="line">        Stack&lt;Integer&gt; input=new Stack&lt;&gt;();</div><div class="line">        Stack&lt;Integer&gt; stk=new Stack&lt;&gt;();</div><div class="line">        for(int i=n;i&gt;=1;i--)</div><div class="line">            input.push(i);</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        dfs(res,&quot;&quot;,input,stk,n);</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46 Permutations"></a>46 Permutations</h3><p>思路： 每次都从第一个元素开始，然后判断是不是已经装进path里了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public void dfs(int[]nums,List&lt;List&lt;Integer&gt;&gt;res,List&lt;Integer&gt;path)&#123;</div><div class="line">        if(path.size()==nums.length)&#123;</div><div class="line">            res.add(new ArrayList&lt;&gt;(path));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=0;i&lt;nums.length;++i)&#123;</div><div class="line">            boolean valid=true;</div><div class="line">            for(int x:path)&#123;</div><div class="line">                if(x==nums[i])&#123;</div><div class="line">                    valid=false;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if(valid)&#123;</div><div class="line">                path.add(nums[i]);</div><div class="line">                dfs(nums,res,path);</div><div class="line">                path.remove(path.size()-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        List&lt;Integer&gt;path=new ArrayList&lt;&gt;();</div><div class="line">        dfs(nums,res,path);</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="89-Gray-Code"><a href="#89-Gray-Code" class="headerlink" title="89 Gray Code"></a>89 Gray Code</h3><p>思路： 有计算公式，也可以观察规律，每次都是从以后的数组的后面开始|一个(1&lt;&lt;i)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public List&lt;Integer&gt; grayCode(int n) &#123;</div><div class="line">        List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        res.add(0);</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            int size=res.size();</div><div class="line">            for(int j=size-1;j&gt;=0;--j)&#123;</div><div class="line">                res.add(res.get(j)|(1&lt;&lt;i));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="79-Word-Search"><a href="#79-Word-Search" class="headerlink" title="79 Word Search"></a>79 Word Search</h3><p>思路： 就是四个方向分别去找，注意不能访问已经访问过的点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public boolean exist(char[][]board,int x,int y,String word,int ind,boolean[][]vis,int[]dx,int[]dy)&#123;</div><div class="line">        if(word.length()==ind)</div><div class="line">            return true;</div><div class="line">        if(x&gt;=board.length||x&lt;0||y&gt;=board[0].length||y&lt;0||vis[x][y]||word.charAt(ind)!=board[x][y])</div><div class="line">            return false;</div><div class="line">        vis[x][y]=true;</div><div class="line">        for(int k=0;k&lt;4;++k)&#123;</div><div class="line">            int nx =x+dx[k];</div><div class="line">            int ny =y+dy[k];</div><div class="line">            if(exist(board,nx,ny,word,ind+1,vis,dx,dy))</div><div class="line">                return true;</div><div class="line">        &#125;</div><div class="line">        vis[x][y]=false;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    public boolean exist(char[][] board, String word) &#123;</div><div class="line">        if(board.length==0||board[0].length==0)</div><div class="line">            return false;</div><div class="line">        int m = board.length,n=board[0].length;</div><div class="line">        boolean [][]vis = new boolean[m][n];</div><div class="line">        int []dx=&#123;1,-1,0,0&#125;;</div><div class="line">        int []dy =&#123;0,0,1,-1&#125;;</div><div class="line">        for(int i=0;i&lt;m;++i)&#123;</div><div class="line">            for(int j=0;j&lt;n;++j)&#123;</div><div class="line">                if(exist(board,i,j,word,0,vis,dx,dy))</div><div class="line">                    return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="212-Word-Search-II"><a href="#212-Word-Search-II" class="headerlink" title="212 Word Search II"></a>212 Word Search II</h3><p>思路： 把这些words装进trie里，然后利用trie进行查找,主要注意的是dfs里的顺序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">class TrieNode &#123;</div><div class="line">    public boolean isEnd;</div><div class="line">    public TrieNode []children=null;</div><div class="line">    public TrieNode()&#123;</div><div class="line">        children=new TrieNode[26];</div><div class="line">        isEnd=false;</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">class Trie &#123;</div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    private TrieNode root;</div><div class="line">    public Trie() &#123;</div><div class="line">        root=new TrieNode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TrieNode getRoot()&#123;</div><div class="line">        return root;</div><div class="line">    &#125;</div><div class="line">    /** Inserts a word into the trie. */</div><div class="line">    public void insert(String word) &#123;</div><div class="line">        char []ss=word.toCharArray();</div><div class="line">        TrieNode cur=root;</div><div class="line">        for(char c:ss)&#123;</div><div class="line">            TrieNode node=cur.children[c-&apos;a&apos;];</div><div class="line">            if(node==null)&#123;</div><div class="line">                cur.children[c-&apos;a&apos;]=new TrieNode();</div><div class="line">            &#125;</div><div class="line">            cur=cur.children[c-&apos;a&apos;];</div><div class="line">        &#125;</div><div class="line">        cur.isEnd=true;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class Solution &#123;</div><div class="line">  public void dfs(TrieNode node,int x,int y,char[][]board,String path,List&lt;String&gt;res)&#123;</div><div class="line">        if(node!=null &amp;&amp; node.isEnd)&#123;</div><div class="line">            res.add(path);</div><div class="line">            node.isEnd=false;</div><div class="line">        &#125;</div><div class="line">        if(node==null)</div><div class="line">            return;</div><div class="line">        if(x&lt;0||x&gt;=board.length||y&lt;0||y&gt;=board[0].length||board[x][y]==&apos;*&apos;)</div><div class="line">            return;</div><div class="line">        char c = board[x][y];</div><div class="line">        board[x][y]=&apos;*&apos;;</div><div class="line">        dfs(node.children[c-&apos;a&apos;],x+1,y,board,path+c,res);</div><div class="line">        dfs(node.children[c-&apos;a&apos;],x-1,y,board,path+c,res);</div><div class="line">        dfs(node.children[c-&apos;a&apos;],x,y+1,board,path+c,res);</div><div class="line">        dfs(node.children[c-&apos;a&apos;],x,y-1,board,path+c,res);</div><div class="line">        board[x][y]=c;</div><div class="line">    &#125;</div><div class="line">    public List&lt;String&gt; findWords(char[][] board, String[] words) &#123;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        if(board.length==0||board[0].length==0||words.length==0)</div><div class="line">            return res;</div><div class="line">        int m = board.length,n=board[0].length;</div><div class="line">        Trie t = new Trie();</div><div class="line">        for(String str:words)</div><div class="line">            t.insert(str);</div><div class="line">        for(int i=0;i&lt;m;++i)&#123;</div><div class="line">            for(int j=0;j&lt;n;++j)&#123;</div><div class="line">                dfs(t.getRoot(),i,j,board,&quot;&quot;,res);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="140-Word-Break-II"><a href="#140-Word-Break-II" class="headerlink" title="140 Word Break II"></a>140 Word Break II</h3><p>思路： 递归，然后用dp来memorize。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public List&lt;String&gt;wordBreak(String s,Set&lt;String&gt;sets,Map&lt;String,List&lt;String&gt;&gt;map)&#123;</div><div class="line">       if(map.containsKey(s))</div><div class="line">           return map.get(s);</div><div class="line">       List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">       if(s.isEmpty())&#123;</div><div class="line">           res.add(&quot;&quot;);</div><div class="line">           return res;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       int nn=s.length();</div><div class="line">       for(int i=1;i&lt;=nn;++i)&#123;</div><div class="line">           String sub=s.substring(0,i);</div><div class="line">           if(sets.contains(sub))&#123;</div><div class="line">               //List&lt;String&gt;tmp = wordBreak(s.substring(i),sets,map);</div><div class="line">               List&lt;String&gt;tmp = wordBreak(s.substring(i),sets,map);</div><div class="line">               for(String str:tmp)&#123;</div><div class="line">                   res.add(sub+(str.isEmpty()?&quot;&quot;:&quot; &quot;)+str);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       map.put(s,res);</div><div class="line">       return res;</div><div class="line">   &#125;</div><div class="line">   public List&lt;String&gt; wordBreak(String s, List&lt;String&gt; wordDict) &#123;</div><div class="line">       Set&lt;String&gt;sets=new HashSet&lt;&gt;(wordDict);</div><div class="line">       Map&lt;String,List&lt;String&gt;&gt;map=new HashMap&lt;&gt;();</div><div class="line">       return wordBreak(s,sets,map);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="51-N-Queens-amp-amp-52"><a href="#51-N-Queens-amp-amp-52" class="headerlink" title="51 N-Queens &amp;&amp; 52"></a>51 N-Queens &amp;&amp; 52</h3><p>思路： 一个数组记录每行要选的是哪个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public boolean check(int[]dp,int ind)&#123;</div><div class="line">        //check whether it has conflict with k-1 number</div><div class="line">        for(int i=0;i&lt;ind;++i)&#123;</div><div class="line">            if(dp[i]==dp[ind]||(ind-i)==Math.abs(dp[i]-dp[ind]))</div><div class="line">                return false;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void dfs(int[]dp,List&lt;List&lt;String&gt;&gt;res,int ind,int n)&#123;</div><div class="line">        if(ind==n)&#123;</div><div class="line">            List&lt;String&gt;tmp=new ArrayList&lt;&gt;();</div><div class="line">            for(int ii=0;ii&lt;n;++ii)&#123;</div><div class="line">                char []ss = new char[n];</div><div class="line">                Arrays.fill(ss,&apos;.&apos;);</div><div class="line">                ss[dp[ii]]=&apos;Q&apos;;</div><div class="line">                tmp.add(String.valueOf(ss));</div><div class="line">            &#125;</div><div class="line">            res.add(tmp);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            dp[ind]=i;</div><div class="line">            if(check(dp,ind))</div><div class="line">                dfs(dp,res,ind+1,n);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;String&gt;&gt; solveNQueens(int n) &#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        int []dp=new int[n];</div><div class="line">        Arrays.fill(dp,-1);</div><div class="line">        dfs(dp,res,0,n);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //52 queens II</div><div class="line">    public void dfs(int n,int []dp,int[]res,int ind)&#123;</div><div class="line">        if(ind==n)&#123;</div><div class="line">            res[0]++;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            dp[ind]=i;</div><div class="line">            if(check(dp,ind))</div><div class="line">                dfs(n,dp,res,ind+1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int totalNQueens(int n) &#123;</div><div class="line">        int []dp=new int[n];</div><div class="line">        int []res=&#123;0&#125;;</div><div class="line">        Arrays.fill(dp,-1);</div><div class="line">        dfs(n,dp,res,0);</div><div class="line">        return res[0];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78 Subsets"></a>78 Subsets</h3><p>思路： bitmap， dfs， iterative</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        int n = nums.length,m=1&lt;&lt;n;</div><div class="line">        for(int i=0;i&lt;m;++i)</div><div class="line">            res.add(new ArrayList&lt;&gt;());</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            for(int j=0;j&lt;m;++j)&#123;</div><div class="line">                if(((j&gt;&gt;i)&amp;0x1)!=0)</div><div class="line">                    res.get(j).add(nums[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    public void dfs78(List&lt;List&lt;Integer&gt;&gt;res,List&lt;Integer&gt;sub,int[]nums,int ind)&#123;</div><div class="line">        res.add(new ArrayList&lt;&gt;(sub));</div><div class="line">        for(int i=ind;i&lt;nums.length;++i)&#123;</div><div class="line">            sub.add(nums[i]);</div><div class="line">            dfs78(res,sub,nums,i+1);</div><div class="line">            sub.remove(sub.size()-1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        List&lt;Integer&gt;sub=new ArrayList&lt;&gt;();</div><div class="line">        dfs78(res,sub,nums,0);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        int n = nums.length;</div><div class="line">        if(n==0)</div><div class="line">            return res;</div><div class="line">        res.add(new ArrayList&lt;&gt;());</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            int size=res.size();</div><div class="line">            for(int j=0;j&lt;size;++j)&#123;</div><div class="line">                List&lt;Integer&gt;tmp = new ArrayList&lt;&gt;(res.get(j));</div><div class="line">                tmp.add(nums[i]);</div><div class="line">                res.add(tmp);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="37-sudoku-solver"><a href="#37-sudoku-solver" class="headerlink" title="37 sudoku solver"></a>37 sudoku solver</h3><p>思路： 要用带boolean 的dfs去试探，注意的是判断合法的函数要对啊</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public boolean check(char[][]board,int ind)&#123;</div><div class="line">        //check row ind/9, col: ind%9, that square;</div><div class="line">        boolean []vis=new boolean[9];</div><div class="line">        int row = ind/9,col=ind%9;</div><div class="line">        for(int i=0;i&lt;9;++i)&#123;</div><div class="line">            if(board[row][i]==&apos;.&apos;)</div><div class="line">                continue;</div><div class="line">            if(vis[board[row][i]-&apos;1&apos;])</div><div class="line">                return false;</div><div class="line">            vis[board[row][i]-&apos;1&apos;]=true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Arrays.fill(vis,false);</div><div class="line">        for(int i=0;i&lt;9;++i)&#123;</div><div class="line">            if(board[i][col]==&apos;.&apos;)</div><div class="line">                continue;</div><div class="line">            if(vis[board[i][col]-&apos;1&apos;])</div><div class="line">                return false;</div><div class="line">            vis[board[i][col]-&apos;1&apos;]=true;</div><div class="line">        &#125;</div><div class="line">        Arrays.fill(vis,false);</div><div class="line"></div><div class="line">         row=row/3*3;</div><div class="line">        col=col/3*3;</div><div class="line">        for(int i=row;i&lt;row+3;++i)&#123;</div><div class="line">            for(int j=col;j&lt;col+3;++j)&#123;</div><div class="line">                if(board[i][j]==&apos;.&apos;)</div><div class="line">                    continue;</div><div class="line">                if(vis[board[i][j]-&apos;1&apos;])</div><div class="line">                    return false;</div><div class="line">                vis[board[i][j]-&apos;1&apos;]=true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public boolean dfs37(char[][]board,int ind)&#123;</div><div class="line">         if(ind==81)</div><div class="line">            return true;</div><div class="line">        if(board[ind/9][ind%9]!=&apos;.&apos;)&#123;</div><div class="line">            return dfs37(board,ind+1);</div><div class="line">        &#125;else&#123;</div><div class="line">            for(int i=1;i&lt;=9;++i)&#123;</div><div class="line">                board[ind/9][ind%9]=(char)(i+&apos;0&apos;);</div><div class="line">                if(check(board,ind) &amp;&amp; dfs37(board,ind+1) )&#123;</div><div class="line">                        return true;</div><div class="line">                &#125;</div><div class="line">                board[ind/9][ind%9]=&apos;.&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    public void solveSudoku(char[][] board) &#123;</div><div class="line">        dfs37(board,0);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="93-Restore-IP-Addresses"><a href="#93-Restore-IP-Addresses" class="headerlink" title="93 Restore IP Addresses"></a>93 Restore IP Addresses</h3><p>思路： 一个一个检测，探测,leading zero的问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public boolean valid(String s)&#123;</div><div class="line">        if(s.isEmpty()||s.length()&gt;3)</div><div class="line">            return false;</div><div class="line">        if(s.charAt(0)==&apos;0&apos; &amp;&amp; s.length()&gt;1)</div><div class="line">            return false;</div><div class="line">        return Integer.parseInt(s)&lt;=255;</div><div class="line">    &#125;</div><div class="line">    public void dfs93(List&lt;String&gt;res,String s,int index,List&lt;String&gt; path)&#123;</div><div class="line">        if(index==s.length() &amp;&amp; path.size()==4)&#123;</div><div class="line">            res.add(String.join(&quot;.&quot;,path));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(path.size()&gt;4)</div><div class="line">            return;</div><div class="line">        for(int i=index+1;i&lt;=s.length();++i)&#123;</div><div class="line">            String sub=s.substring(index,i);</div><div class="line">            if(sub.length()&gt;3)</div><div class="line">                break;</div><div class="line">            if(valid(sub))&#123;</div><div class="line">                path.add(sub);</div><div class="line">                dfs93(res,s,i,path);</div><div class="line">                path.remove(path.size()-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;String&gt; restoreIpAddresses(String s) &#123;</div><div class="line">        List&lt;String&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        if(s.length()&lt;4||s.length()&gt;12)</div><div class="line">            return res;</div><div class="line">        dfs93(res,s,0,new ArrayList&lt;&gt;());</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="131-Palindrome-Partitioning"><a href="#131-Palindrome-Partitioning" class="headerlink" title="131. Palindrome Partitioning"></a>131. Palindrome Partitioning</h3><p>思路： 可以提前打表也可以后面判断isPalindrome</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">public void dfs1311(List&lt;List&lt;String&gt;&gt;res,List&lt;String&gt;path,String s,int ind,boolean[][]palindrome)&#123;</div><div class="line">        if(ind==s.length())&#123;</div><div class="line">            res.add(new ArrayList&lt;&gt;(path));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=ind+1;i&lt;=s.length();++i)&#123;</div><div class="line">            if(palindrome[ind+1][i])&#123;</div><div class="line">                path.add(s.substring(ind,i));</div><div class="line">                dfs1311(res,path,s,i,palindrome);</div><div class="line">                path.remove(path.size()-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;String&gt;&gt;partition(String s)&#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        int m=s.length();</div><div class="line">        boolean [][]palindrome=new boolean[m+1][m+1];</div><div class="line">        palindrome[0][0]=true;</div><div class="line">        for(int i=1;i&lt;=m;++i)&#123;</div><div class="line">            palindrome[i][i]=true;</div><div class="line">            for(int j=i-1;j&gt;=1;--j)&#123;</div><div class="line">                if(s.charAt(j-1)==s.charAt(i-1) &amp;&amp;( j&gt;=i-2||palindrome[j+1][i-1]))&#123;</div><div class="line">                    palindrome[j][i]=true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        dfs1311(res,new ArrayList&lt;&gt;(),s,0,palindrome);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    public boolean isPalindrome(String ss)&#123;</div><div class="line">        int begin=0,end=ss.length()-1;</div><div class="line">        char []sss=ss.toCharArray();</div><div class="line">        while(begin&lt;end)&#123;</div><div class="line">            if(sss[begin]!= sss[end])</div><div class="line">                return false;</div><div class="line">            begin++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void dfs131(List&lt;List&lt;String&gt;&gt;res,List&lt;String&gt;path,String s,int index)&#123;</div><div class="line">        if(index==s.length())&#123;</div><div class="line">            res.add(new ArrayList&lt;&gt;(path));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for(int i=index+1;i&lt;=s.length();++i)&#123;</div><div class="line">            String sub = s.substring(index,i);</div><div class="line">            if(isPalindrome(sub))&#123;</div><div class="line">                path.add(sub);</div><div class="line">                dfs131(res,path,s,i);</div><div class="line">                path.remove(path.size()-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt;res=new ArrayList&lt;&gt;();</div><div class="line">        dfs131(res,new ArrayList&lt;&gt;(),s,0);</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="10-Regular-Expression-Matching"><a href="#10-Regular-Expression-Matching" class="headerlink" title="10 Regular Expression Matching"></a>10 Regular Expression Matching</h3><p>思路：递归或者是dp</p>
<pre><code>
public boolean isMatch(String s, String p) {
        if(p.isEmpty())
            return s.isEmpty();
        if(p.length()==1)
            return s.length()==1 &amp;&amp; (s.equals(p)||p.charAt(0)==&apos;.&apos;);
        if(s.isEmpty())
            return p.charAt(1)==&apos;*&apos; &amp;&amp; isMatch(s,p.substring(2));
        if(p.charAt(1)==&apos;*&apos;){
            //replace 0 or one or more than one
                       return isMatch(s,p.substring(2))||((s.charAt(0)==p.charAt(0)||p.charAt(0)==&apos;.&apos;)&amp;&amp;isMatch(s.substring(1),p));

        }else{
            return (s.charAt(0)==p.charAt(0)||p.charAt(0)==&apos;.&apos;)&amp;&amp;isMatch(s.substring(1),p.substring(1));
        }
    }

    public boolean isMatch(String s, String p) {
        if(p.isEmpty())
            return s.isEmpty();
        int m= s.length(),n=p.length();
        boolean [][]dp=new boolean[m+1][n+1];
        dp[0][0]=true;
        for(int i=2;i&lt;=n;++i)
            dp[0][i]=dp[0][i-2] &amp;&amp; p.charAt(i-1)==&apos;*&apos;;
        for(int i=1;i&lt;=m;++i){
            if(i==1)
                dp[i][1]=(s.charAt(i-1)==p.charAt(0))||p.charAt(0)==&apos;.&apos;;
            for(int j=2;j&lt;=n;++j){
                if(p.charAt(j-1)==&apos;*&apos;){
                    dp[i][j]=dp[i][j-2]||(s.charAt(i-1)==p.charAt(j-2)||p.charAt(j-2)==&apos;.&apos;) &amp;&amp; dp[i-1][j];
                }else{
                    dp[i][j]=(s.charAt(i-1)==p.charAt(j-1)||p.charAt(j-1)==&apos;.&apos;)&amp;&amp;dp[i-1][j-1];
                }
            }
        }
        return dp[m][n];
    }
</code></pre><hr>
<h1 id="Expectations"><a href="#Expectations" class="headerlink" title="Expectations"></a>Expectations</h1><hr>
<ul>
<li>把dp里的滚动数组搞清楚，节省空间</li>
<li>探索下啤酒鱼怎么做。周末试了试煮鱼，好久没吃过鱼了，表示怀念。</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/rvalQTz4G55AyZ01zNTErlmRt-NFFFVGN64Rk6QPzUQ4WG98DOW2s1lqcnnijp-CwT8nGfLWvOe7nPvWEaLxvCwUiE79XtI0OzRe8MJhymATDSYj2CUsgHr5KsBOgkGBVNOBV3aLOw" alt="Stanford Univ"></p>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[stackQuestions]]></title>
      <url>/2017/07/16/stackQuestions/</url>
      <content type="html"><![CDATA[<h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><hr>
<a id="more"></a>
<ul>
<li>155 Min Stack</li>
<li>42 Trapping Rain Water</li>
<li>150 Evaluate Reverse Polish Notation</li>
<li>173 Binary Search Tree Iterator</li>
<li>85 Maximal Rectangle</li>
<li>232 Implement Queue using Stacks</li>
<li>84 Largest Rectangle in Histogram</li>
<li>71 Simplify Path</li>
<li>94 Binary Tree Inorder Traversal</li>
<li>341     Flatten Nested List Iterator</li>
<li>225     Binary Tree Postorder Traversal</li>
<li>394 Decode String</li>
<li>255    Verify Preorder Sequence in Binary Search Tree</li>
<li>439 Ternary Expression Parser</li>
<li>496 Next Greater Element I</li>
<li>503 Next Greater Element II</li>
<li>316 Remove Duplicate Letters</li>
<li>227 Basic Calculator II</li>
<li>224 Basic Calculator</li>
<li>394 Decode String</li>
<li>385 Mini Parser</li>
<li>636 Exclusive Time of Functions</li>
<li>331 Verify Preorder Serialization of a Binary Tree</li>
<li>456 132 Pattern</li>
</ul>
<h3 id="155-Min-Stack"><a href="#155-Min-Stack" class="headerlink" title="155 Min Stack"></a>155 Min Stack</h3><p>思路： 两个栈的很容易写出来，但是要求一个栈来实现呢？</p>
<ul>
<li>一个栈存gap，一个数字存最小值,用long</li>
<li>一个栈，一个数字存最小值，当遇到最小值时，存两次</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">public class MinStack &#123;</div><div class="line"></div><div class="line">     Stack&lt;Long&gt;stk=null;</div><div class="line">    long minVal;</div><div class="line">    public MinStack() &#123;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">        minVal=Long.MAX_VALUE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void push(int x) &#123;</div><div class="line">        if(stk.isEmpty())&#123;</div><div class="line">            stk.push(0l);</div><div class="line">            minVal=(long)x;</div><div class="line">        &#125;else&#123;</div><div class="line">            stk.push(x-minVal);</div><div class="line">            minVal=Math.min(minVal,x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void pop() &#123;</div><div class="line">        long val = stk.pop();</div><div class="line">        if(val&lt;0)//pay attention to this </div><div class="line">            minVal=(-val+minVal);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	//pay attention to this </div><div class="line">    public int top() &#123;</div><div class="line">        if(stk.peek()&lt;0)</div><div class="line">            return (int)minVal;</div><div class="line">        else</div><div class="line">            return (int)(minVal+stk.peek());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getMin() &#123;</div><div class="line">        return (int)minVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//wrong answer if no equals in x&lt;=minVal</div><div class="line">public class MinStack &#123;</div><div class="line"></div><div class="line">    Stack&lt;Integer&gt;stk=null;</div><div class="line">    private int minVal;</div><div class="line">    /** initialize your data structure here. */</div><div class="line">    public MinStack() &#123;</div><div class="line">        minVal=Integer.MAX_VALUE;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void push(int x) &#123;</div><div class="line">        if(x&lt;=minVal)&#123;</div><div class="line">            stk.push(minVal);</div><div class="line">            minVal=x;</div><div class="line">        &#125;</div><div class="line">        stk.push(x);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void pop() &#123;</div><div class="line">        if(stk.pop()==minVal)&#123;</div><div class="line">            minVal=stk.pop();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public int top() &#123;</div><div class="line">        return stk.peek();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public int getMin() &#123;</div><div class="line">        return minVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="42-Traping-rain-water"><a href="#42-Traping-rain-water" class="headerlink" title="42 Traping rain water"></a>42 Traping rain water</h3><p>思路： 单调栈来实现</p>
<ul>
<li>单调栈，和84题非常像</li>
<li>两指针</li>
<li>左右两数组记录最大值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int trap(int[] height) &#123;</div><div class="line">        int n = height.length;</div><div class="line">        Stack&lt;Integer&gt; stk=new Stack&lt;&gt;();</div><div class="line">        int area=0;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; height[stk.peek()]&lt;height[i])&#123;</div><div class="line">                int h = height[stk.pop()];</div><div class="line">                int h1=stk.isEmpty()?0:height[stk.peek()];</div><div class="line">                int w = stk.isEmpty()?i:i-1-stk.peek();</div><div class="line">                area+=Math.max((Math.min(h1,height[i])-h)*w,0);</div><div class="line">            &#125;</div><div class="line">            stk.push(i);</div><div class="line">        &#125;</div><div class="line">        return area;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="150-Evaluate-Reverse-Polish-Notation"><a href="#150-Evaluate-Reverse-Polish-Notation" class="headerlink" title="150 Evaluate Reverse Polish Notation"></a>150 Evaluate Reverse Polish Notation</h3><p>思路： 栈和递归来实现</p>
<ul>
<li>栈</li>
<li>递归</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">public int evalRPN(String[] tokens) &#123;</div><div class="line">         Stack&lt;String&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(String token:tokens)&#123;</div><div class="line">            if(token.equals(&quot;+&quot;)||token.equals(&quot;-&quot;)||token.equals(&quot;*&quot;)||token.equals(&quot;/&quot;))&#123;</div><div class="line">                if(stk.size()&lt;2)</div><div class="line">                    break;</div><div class="line">                int val1= Integer.parseInt(stk.pop());</div><div class="line">                int val2 = Integer.parseInt(stk.pop());</div><div class="line">                if(token.equals(&quot;+&quot;))</div><div class="line">                    stk.push(String.valueOf(val2+val1));</div><div class="line">                else if(token.equals(&quot;-&quot;))</div><div class="line">                    stk.push(String.valueOf(val2-val1));</div><div class="line">                else if(token.equals(&quot;*&quot;))</div><div class="line">                    stk.push(String.valueOf(val2*val1));</div><div class="line">                else</div><div class="line">                    stk.push(String.valueOf(val2/val1));</div><div class="line"></div><div class="line">            &#125;else</div><div class="line">                stk.push(token);</div><div class="line">        &#125;</div><div class="line">        if(!stk.isEmpty())</div><div class="line">            return Integer.parseInt(stk.peek());</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //很奇怪，如果用li， start ，end会跪。</div><div class="line">    public int eval(List&lt;String&gt;li)&#123;</div><div class="line">        int n=li.size();</div><div class="line">        String str=li.get(n-1);</div><div class="line">        li.remove(n-1);</div><div class="line">        if(str.equals(&quot;+&quot;)||str.equals(&quot;-&quot;)||str.equals(&quot;/&quot;)||str.equals(&quot;*&quot;))&#123;</div><div class="line">            int r1=eval(li);</div><div class="line">            int r2=eval(li);</div><div class="line">            if(str.equals(&quot;+&quot;))</div><div class="line">                return r1+r2;</div><div class="line">            else if(str.equals(&quot;-&quot;))</div><div class="line">                return r2-r1;</div><div class="line">            else if(str.equals(&quot;*&quot;))</div><div class="line">                return r2*r1;</div><div class="line">            else</div><div class="line">                return r2/r1;</div><div class="line">        &#125;</div><div class="line">        return Integer.valueOf(str);</div><div class="line">    &#125;</div><div class="line">    public int evalRPN(String []tokens)&#123;</div><div class="line">        int n=tokens.length;</div><div class="line">        List&lt;String&gt;li=new ArrayList&lt;&gt;(Arrays.asList(tokens));</div><div class="line">        return eval(li);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="173-Binary-Search-Tree-Iterator"><a href="#173-Binary-Search-Tree-Iterator" class="headerlink" title="173 Binary Search Tree Iterator"></a>173 Binary Search Tree Iterator</h3><p>思路： 其实就是stack的中序遍历，当然你可以先走一遍中序遍历，然后把所有的值都存到list里，但是这样的话非常耗space，常见的优化时lazy load</p>
<ul>
<li>中序遍历走一遍，存下所有的值</li>
<li>lazy load，必要的时候才继续载入值,记住 中序遍历是pop的，后序遍历是peek的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class BSTIterator &#123;</div><div class="line"></div><div class="line">   public Stack&lt;TreeNode&gt; stk=null;</div><div class="line">    TreeNode cur=null;</div><div class="line">    public BSTIterator(TreeNode root) &#123;</div><div class="line">        cur=root;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** @return whether we have a next smallest number */</div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        return !stk.isEmpty()||cur!=null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** @return the next smallest number */</div><div class="line">    public int next() &#123;</div><div class="line">       int val=0;</div><div class="line">        while(cur!=null)&#123;</div><div class="line">            stk.push(cur);</div><div class="line">            cur=cur.left;</div><div class="line">        &#125;</div><div class="line">        cur=stk.pop();</div><div class="line">        val=cur.val;</div><div class="line">        cur=cur.right;</div><div class="line">        return val;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="84-Largest-Rectangle-in-Histogram-amp-amp-85-Maximal-Rectangle-以及trapping-rain-water-是姊妹题"><a href="#84-Largest-Rectangle-in-Histogram-amp-amp-85-Maximal-Rectangle-以及trapping-rain-water-是姊妹题" class="headerlink" title="84 Largest Rectangle in Histogram &amp;&amp; 85 Maximal Rectangle 以及trapping rain water 是姊妹题"></a>84 Largest Rectangle in Histogram &amp;&amp; 85 Maximal Rectangle 以及trapping rain water 是姊妹题</h3><p>思路：单调栈和动态规划</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">//84 largest rectangle in histgram</div><div class="line">public int largestRectangleArea(int[] heights) &#123;</div><div class="line">        int n = heights.length;</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        int maxArea=0;</div><div class="line">        for(int i=0;i&lt;=n;++i)&#123;</div><div class="line">            int height=i&lt;n?heights[i]:0;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; heights[stk.peek()]&gt;height)&#123;</div><div class="line">                int h = heights[stk.pop()];</div><div class="line">                int w = stk.isEmpty()?i:i-stk.peek()-1;//i is not in the area</div><div class="line">                maxArea=Math.max(maxArea,h*w);</div><div class="line">            &#125;</div><div class="line">            stk.push(i);</div><div class="line">        &#125;</div><div class="line">        return maxArea;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //85 maximal rectangle</div><div class="line">    public int maximalRectangle(char[][] matrix) &#123;</div><div class="line">        if(matrix.length==0||matrix[0].length==0)</div><div class="line">            return 0;</div><div class="line">        int m = matrix.length,n=matrix[0].length;</div><div class="line">        int []dp=new int[n];</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            dp[i]=matrix[0][i]==&apos;1&apos;?1:0;</div><div class="line">        &#125;</div><div class="line">        int maxArea=largestRectangleArea(dp);</div><div class="line">        for(int i=1;i&lt;m;++i)&#123;</div><div class="line">            for(int j=0;j&lt;n;++j)&#123;</div><div class="line">                dp[j]=matrix[i][j]==&apos;0&apos;?0:dp[j]+1;</div><div class="line">            &#125;</div><div class="line">            maxArea=Math.max(maxArea,largestRectangleArea(dp));</div><div class="line">        &#125;</div><div class="line">        return maxArea;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="232-Implement-Queue-using-Stacks"><a href="#232-Implement-Queue-using-Stacks" class="headerlink" title="232 Implement Queue using Stacks"></a>232 Implement Queue using Stacks</h3><p>思路： 两stack，两stack 是不平等的关系， stack2是优先级比较高的。</p>
<ul>
<li>two stack, push is O(1), others are O(N)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class MyQueue &#123;</div><div class="line"></div><div class="line">    //two stack, uneven</div><div class="line">    public Stack&lt;Integer&gt; stk=null;//primary stack;</div><div class="line">    public Stack&lt;Integer&gt;stk1=null;</div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    public MyQueue() &#123;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">        stk1=new Stack&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Push element x to the back of queue. */</div><div class="line">    public void push(int x) &#123;</div><div class="line">        stk.push(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Removes the element from in front of queue and returns that element. */</div><div class="line">    public int pop() &#123;</div><div class="line">        if(!stk1.isEmpty())</div><div class="line">            return stk1.pop();</div><div class="line">        while(!stk.isEmpty())</div><div class="line">            stk1.push(stk.pop());</div><div class="line">        return stk1.pop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Get the front element. */</div><div class="line">    public int peek() &#123;</div><div class="line">        if(!stk1.isEmpty())</div><div class="line">            return stk1.peek();</div><div class="line">        while(!stk.isEmpty())</div><div class="line">            stk1.push(stk.pop());</div><div class="line">        return stk1.peek();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Returns whether the queue is empty. */</div><div class="line">    public boolean empty() &#123;</div><div class="line">        return stk.isEmpty() &amp;&amp; stk1.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="225-Implement-Stack-using-Queues"><a href="#225-Implement-Stack-using-Queues" class="headerlink" title="225. Implement Stack using Queues"></a>225. Implement Stack using Queues</h3><p> 思路： 两queue，相等的地位，每次都是剩下一个元素，剩下的push到另一外一个queue</p>
<ul>
<li>两个queue， push是o(1)， 其他是o(n)</li>
<li>一个queue，push是o(n)，其他是o(1)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">public class MyStackOneQueue &#123;</div><div class="line">    /** Initialize your data structure here. */</div><div class="line"></div><div class="line">    private Queue&lt;Integer&gt; q=null;</div><div class="line">    public MyStackOneQueue() &#123;</div><div class="line">        q=new LinkedList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Push element x onto stack. */</div><div class="line">    public void push(int x) &#123;</div><div class="line">        q.offer(x);</div><div class="line">        for(int i=0;i&lt;q.size()-1;++i)&#123;</div><div class="line">            q.offer(q.poll());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Removes the element on top of the stack and returns that element. */</div><div class="line">    public int pop() &#123;</div><div class="line">        return q.poll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Get the top element. */</div><div class="line">    public int top() &#123;</div><div class="line">        return q.peek();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Returns whether the stack is empty. */</div><div class="line">    public boolean empty() &#123;</div><div class="line">        return q.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class MyStack &#123;</div><div class="line"></div><div class="line">      //two queue even</div><div class="line">    Queue&lt;Integer&gt; q=null;</div><div class="line">    Queue&lt;Integer&gt;q1=null;</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    public MyStack() &#123;</div><div class="line">        q=new LinkedList&lt;&gt;();</div><div class="line">        q1=new LinkedList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Push element x onto stack. */</div><div class="line">    public void push(int x) &#123;</div><div class="line">        q.offer(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Removes the element on top of the stack and returns that element. */</div><div class="line">    public int pop() &#123;</div><div class="line">        int val=0;</div><div class="line">        if(!q.isEmpty())&#123;</div><div class="line">            while(q.size()&gt;1)&#123;</div><div class="line">                q1.offer(q.poll());</div><div class="line">            &#125;</div><div class="line">            val=q.poll();</div><div class="line">        &#125;else&#123;</div><div class="line">            while(q1.size()&gt;1)&#123;</div><div class="line">                q.offer(q1.poll());</div><div class="line">            &#125;</div><div class="line">            val=q1.poll();</div><div class="line">        &#125;</div><div class="line">        return val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Get the top element. */</div><div class="line">    public int top() &#123;</div><div class="line">        int val=0;</div><div class="line">        if(!q.isEmpty())&#123;</div><div class="line">            while(q.size()&gt;1)&#123;</div><div class="line">                q1.offer(q.poll());</div><div class="line">            &#125;</div><div class="line">            val=q.poll();</div><div class="line">            q1.offer(val);</div><div class="line">        &#125;else&#123;</div><div class="line">            while(q1.size()&gt;1)&#123;</div><div class="line">                q.offer(q1.poll());</div><div class="line">            &#125;</div><div class="line">            val=q1.poll();</div><div class="line">            q.offer(val);</div><div class="line">        &#125;</div><div class="line">        return val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Returns whether the stack is empty. */</div><div class="line">    public boolean empty() &#123;</div><div class="line">        return q.isEmpty() &amp;&amp; q1.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="71-Simplify-Path"><a href="#71-Simplify-Path" class="headerlink" title="71. Simplify Path"></a>71. Simplify Path</h3><p>思路： 切割， !stk.isEmpty &amp;&amp; str==”..” 出栈, str!=’.’ &amp;&amp; str!=’..’ str!=”” 就加到stack里,最后别忘了加上 “/”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public String simplifyPath(String path) &#123;</div><div class="line">        String []paths = path.split(&quot;/&quot;);</div><div class="line">        Stack&lt;String&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(String str:paths)&#123;</div><div class="line">            if(!stk.isEmpty() &amp;&amp; str.equals(&quot;..&quot;))&#123;</div><div class="line">                stk.pop();</div><div class="line">            &#125;else if(!str.equals(&quot;.&quot;) &amp;&amp; str.length()!=0 &amp;&amp; !str.equals(&quot;..&quot;))</div><div class="line">                stk.push(str);</div><div class="line">        &#125;</div><div class="line">        String res = String.join(&quot;/&quot;,stk);</div><div class="line">        return &quot;/&quot;+res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="94-binary-tree-inorder-traversal"><a href="#94-binary-tree-inorder-traversal" class="headerlink" title="94 binary tree inorder traversal"></a>94 binary tree inorder traversal</h3><p>思路： 掌握三种，递归，stack，莫里斯</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">        List&lt;Integer&gt;res = new ArrayList&lt;&gt;();</div><div class="line">        TreeNode cur = root;</div><div class="line">        Stack&lt;TreeNode&gt;stk=new Stack&lt;TreeNode&gt;();</div><div class="line">        while(cur!=null||!stk.isEmpty())&#123;</div><div class="line">            while(cur!=null)&#123;</div><div class="line">                stk.push(cur);</div><div class="line">                cur=cur.left;</div><div class="line">            &#125;</div><div class="line">            cur=stk.pop();</div><div class="line">            res.add(cur.val);</div><div class="line">            cur=cur.right;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="341-flatten-nested-list-iterator"><a href="#341-flatten-nested-list-iterator" class="headerlink" title="341 flatten nested list iterator"></a>341 flatten nested list iterator</h3><p>思路： 可以一次性遍历完，然后再遍历，但是这样的话空间复杂度太高</p>
<ul>
<li>一次性遍历完</li>
<li>lazy load，需要的时候才遍历，用到栈, queue就不行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class NestedIterator implements Iterator&lt;Integer&gt; &#123;</div><div class="line"></div><div class="line">    private Stack&lt;NestedInteger&gt; stk=null;</div><div class="line">    public NestedIterator(List&lt;NestedInteger&gt; nestedList) &#123;</div><div class="line">        stk=new Stack&lt;&gt;();</div><div class="line">        int n=nestedList.size();</div><div class="line">        for(int i=n-1;i&gt;=0;--i)&#123;</div><div class="line">            if(!nestedList.get(i).isInteger())&#123;</div><div class="line">                if(nestedList.get(i).getList().isEmpty())</div><div class="line">                    continue;</div><div class="line">            &#125;</div><div class="line">            stk.push(nestedList.get(i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Integer next() &#123;</div><div class="line">        return stk.pop().getInteger();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        while(!stk.isEmpty() &amp;&amp; !stk.peek().isInteger())&#123;</div><div class="line">            NestedInteger top=stk.pop();</div><div class="line">            if(top.isInteger())&#123;</div><div class="line">                stk.push(top);</div><div class="line">                System.out.println(&quot;a&quot;);</div><div class="line">                break;</div><div class="line">            &#125;else&#123;</div><div class="line">                List&lt;NestedInteger&gt;nestedList=top.getList();</div><div class="line">                int n=nestedList.size();</div><div class="line">                for(int i=n-1;i&gt;=0;--i)&#123;</div><div class="line">                    if(!nestedList.get(i).isInteger())&#123;</div><div class="line">                        if(nestedList.get(i).getList().isEmpty())</div><div class="line">                            continue;</div><div class="line">                    &#125;</div><div class="line">                    stk.push(nestedList.get(i));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return !stk.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145 Binary Tree Postorder Traversal"></a>145 Binary Tree Postorder Traversal</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">TreeNode pre =null;</div><div class="line">   public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123;</div><div class="line">       List&lt;Integer&gt;res=new ArrayList&lt;&gt;();</div><div class="line">       if(root==null)</div><div class="line">           return res;</div><div class="line">       Stack&lt;TreeNode&gt;stk=new Stack&lt;&gt;();</div><div class="line">       TreeNode curr = root;</div><div class="line">       while (!stk.isEmpty() || curr != null) &#123;</div><div class="line">           while(curr!=null)&#123;</div><div class="line">               stk.push(curr);</div><div class="line">               curr=curr.left;</div><div class="line">           &#125;</div><div class="line">           curr=stk.peek();</div><div class="line"></div><div class="line">           if(curr.right!=null &amp;&amp; curr.right!=pre)&#123;//没有被访问</div><div class="line">               curr=curr.right;</div><div class="line">           &#125;else&#123;</div><div class="line">               res.add(curr.val);</div><div class="line">               pre=curr;</div><div class="line">               stk.pop();</div><div class="line">               curr=null;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       return res;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="439-Ternary-Expression-Parser"><a href="#439-Ternary-Expression-Parser" class="headerlink" title="439. Ternary Expression Parser"></a>439. Ternary Expression Parser</h3><p>思路： 反着入栈,递归容易爆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public String parseTernary(String expression) &#123;</div><div class="line">        Stack&lt;Character&gt;stk=new Stack&lt;&gt;();</div><div class="line">        char []ss=expression.toCharArray();</div><div class="line">        //when finding ?, it is your chance</div><div class="line">        int n = ss.length,i=n-1;</div><div class="line">        while(i&gt;=0)&#123;</div><div class="line">            if(ss[i]!=&apos;?&apos; &amp;&amp; ss[i]!=&apos;:&apos;)</div><div class="line">                stk.push(ss[i]);</div><div class="line">            else if(ss[i]==&apos;?&apos;)&#123;</div><div class="line">                char c1= stk.pop();</div><div class="line">                char c2=stk.pop();</div><div class="line">                stk.push(ss[i-1]==&apos;T&apos;?c1:c2);</div><div class="line">                i-=2;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">        return String.valueOf(stk.peek());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="496-next-greater-element-I"><a href="#496-next-greater-element-I" class="headerlink" title="496 next greater element I"></a>496 next greater element I</h3><p>思路： stack专门找第一个比它大的元素。递减，然后找到一个大的，那么就出栈，这些出栈的元素的最近大的元素都是它。在这里我们用hashmap建立联系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int[] nextGreaterElement(int[] findNums, int[] nums) &#123;</div><div class="line">         int n = findNums.length,m=nums.length;</div><div class="line">        int []res=new int[n];</div><div class="line">        //先一个map建起来</div><div class="line">        Map&lt;Integer,Integer&gt;map=new HashMap&lt;&gt;();</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(int i=0;i&lt;m;++i)&#123;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; stk.peek()&lt;nums[i])&#123;</div><div class="line">                map.put(stk.pop(),nums[i]);</div><div class="line">            &#125;</div><div class="line">            stk.push(nums[i]);</div><div class="line">        &#125;</div><div class="line">        Arrays.fill(res,-1);</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            if(map.containsKey(findNums[i]))</div><div class="line">                res[i]=map.get(findNums[i]);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="503-Next-Greater-Element-II"><a href="#503-Next-Greater-Element-II" class="headerlink" title="503. Next Greater Element II"></a>503. Next Greater Element II</h3><p>思路： 和上题差不多，环状的话走两遍，2*n，然后用mod，这个不需要hashmap</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public int[] nextGreaterElements(int[] nums) &#123;</div><div class="line">        int n=nums.length;</div><div class="line">        int []res=new int[n];</div><div class="line">        Arrays.fill(res,-1);</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(int i=0;i&lt;2*n;++i)&#123;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; nums[i%n]&gt;nums[stk.peek()])&#123;</div><div class="line">                res[stk.pop()]=nums[i%n];</div><div class="line">            &#125;</div><div class="line">            //if(i&lt;n)</div><div class="line">            stk.push(i%n);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="316-Remove-Duplicate-Letters"><a href="#316-Remove-Duplicate-Letters" class="headerlink" title="316.Remove Duplicate Letters"></a>316.Remove Duplicate Letters</h3><p>思路： 先统计26个char的分布，同时记住哪些被访问过，用stack装。只有当后面还有这个字符，且这个字符大于或等于当前字符才可以替换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public String removeDuplicateLetters(String s) &#123;</div><div class="line">        int []cnt=new int[26];</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        for(char c:ss)</div><div class="line">            cnt[c-&apos;a&apos;]++;</div><div class="line">        Stack&lt;Character&gt;stk=new Stack&lt;&gt;();</div><div class="line">        boolean []vis = new boolean[26];</div><div class="line">        for(char c:ss)&#123;</div><div class="line">            --cnt[c-&apos;a&apos;];</div><div class="line">            if(vis[c-&apos;a&apos;])</div><div class="line">                continue;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; cnt[stk.peek()-&apos;a&apos;]&gt;0 &amp;&amp; stk.peek()&gt;=c)&#123;</div><div class="line">                char cc = stk.pop();</div><div class="line">                vis[cc-&apos;a&apos;]=false;</div><div class="line">            &#125;</div><div class="line">            stk.push(c);</div><div class="line">            vis[c-&apos;a&apos;]=true;</div><div class="line">        &#125;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        while(!stk.isEmpty())&#123;</div><div class="line">            sb.append(stk.pop());</div><div class="line">        &#125;</div><div class="line">        sb.reverse();</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="227-Basic-Calculator-II"><a href="#227-Basic-Calculator-II" class="headerlink" title="227.Basic Calculator II"></a>227.Basic Calculator II</h3><p>思路： 笨一点可以用stk装，以后可以优化，令我非常惊奇的是如何做到： 计算完当前的数字，此时符号是它前面的“+ - * ／”</p>
<ul>
<li>stk</li>
<li>without stk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">public int calculate(String s) &#123;</div><div class="line">         int n=s.length();</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        int num =0;</div><div class="line">        char sign =&apos;+&apos;;</div><div class="line">        int ans=0,prev=0;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            if(Character.isDigit(ss[i]))&#123;</div><div class="line">                num=10*num+(ss[i]-&apos;0&apos;);</div><div class="line">            &#125;</div><div class="line">            if((!Character.isDigit(ss[i]) &amp;&amp; ss[i]!=&apos; &apos;)|| i==n-1 )&#123;</div><div class="line">                if(sign==&apos;-&apos;)&#123;</div><div class="line">                    ans+=prev;</div><div class="line">                    prev=-num;</div><div class="line">                &#125;</div><div class="line">                else if(sign==&apos;+&apos;)&#123;</div><div class="line">                    ans+=prev;</div><div class="line">                    prev=num;</div><div class="line">                &#125;</div><div class="line">                else if(sign==&apos;*&apos;)&#123;</div><div class="line">                    prev=prev*num;</div><div class="line">                &#125;else if(sign==&apos;/&apos;)&#123;</div><div class="line">                    prev=prev/num;</div><div class="line">                &#125;</div><div class="line">                sign=ss[i];//放在后面真是很巧妙啊,就省得向我这样蛮干了。</div><div class="line">                num=0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return ans+=prev;</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">    public int calculate(String s) &#123;</div><div class="line">	    int len;</div><div class="line">	    if(s==null || (len = s.length())==0) return 0;</div><div class="line">	    Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();</div><div class="line">	    int num = 0;</div><div class="line">	    char sign = &apos;+&apos;;</div><div class="line">	    for(int i=0;i&lt;len;i++)&#123;</div><div class="line">	        if(Character.isDigit(s.charAt(i)))&#123;</div><div class="line">	            num = num*10+s.charAt(i)-&apos;0&apos;;</div><div class="line">	        &#125;</div><div class="line">	        if((!Character.isDigit(s.charAt(i)) &amp;&amp;&apos; &apos;!=s.charAt(i)) || i==len-1)&#123;</div><div class="line">	            if(sign==&apos;-&apos;)&#123;</div><div class="line">	                stack.push(-num);</div><div class="line">	            &#125;</div><div class="line">	            if(sign==&apos;+&apos;)&#123;</div><div class="line">	                stack.push(num);</div><div class="line">	            &#125;</div><div class="line">	            if(sign==&apos;*&apos;)&#123;</div><div class="line">	                stack.push(stack.pop()*num);</div><div class="line">	            &#125;</div><div class="line">	            if(sign==&apos;/&apos;)&#123;</div><div class="line">	                stack.push(stack.pop()/num);</div><div class="line">	            &#125;</div><div class="line">	            sign = s.charAt(i);</div><div class="line">	            num = 0;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    int re = 0;</div><div class="line">	    for(int i:stack)&#123;</div><div class="line">	        re += i;</div><div class="line">	    &#125;</div><div class="line">	    return re;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="224-Basic-Calculator"><a href="#224-Basic-Calculator" class="headerlink" title="224. Basic Calculator"></a>224. Basic Calculator</h3><p>思路： 每遇到(，就把res入栈，符号入栈,遇到) 就弹出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public int calculate(String s) &#123;</div><div class="line">        int n = s.length();</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        Stack&lt;Integer&gt;stk=new Stack&lt;&gt;();</div><div class="line">        int sign=1,res=0,num=0;</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            if(i&lt;n &amp;&amp; Character.isDigit(ss[i]))&#123;</div><div class="line">                num=10*num+(ss[i]-&apos;0&apos;);</div><div class="line">            &#125;</div><div class="line">            if((!Character.isDigit(ss[i]) &amp;&amp; ss[i]!=&apos; &apos;)||i==n-1)&#123;</div><div class="line">                if(ss[i]==&apos;+&apos;)&#123;</div><div class="line">                    res+=sign*num;</div><div class="line">                    sign=1;</div><div class="line">                    num=0;</div><div class="line">                &#125;</div><div class="line">                else if(ss[i]==&apos;-&apos;)&#123;</div><div class="line">                    res+=sign*num;</div><div class="line">                    sign=-1;</div><div class="line">                    num=0;</div><div class="line">                &#125;else if(ss[i]==&apos;(&apos;)&#123;</div><div class="line">                    stk.push(res);</div><div class="line">                    stk.push(sign);</div><div class="line">                    sign=1;</div><div class="line">                    res=0;</div><div class="line">                    num=0;</div><div class="line">                &#125;else if(ss[i]==&apos;)&apos;)&#123;</div><div class="line">                    res+=num*sign;</div><div class="line">                    res*=stk.pop();</div><div class="line">                    res+=stk.pop();</div><div class="line">                    sign=1;</div><div class="line">                    num=0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res+=sign*num;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="385-Mini-Parser"><a href="#385-Mini-Parser" class="headerlink" title="385. Mini Parser"></a>385. Mini Parser</h3><p>思路： 遇到做括号，就存到栈里，遇到右括号就先pop，然后再加上当前的.</p>
<ul>
<li>recursive way</li>
<li>stk way</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public NestedInteger deserialize(String s) &#123;</div><div class="line">        if(s.isEmpty())</div><div class="line">            return new NestedInteger();</div><div class="line">        if(s.charAt(0)!=&apos;[&apos;)</div><div class="line">            return new NestedInteger(Integer.parseInt(s));</div><div class="line">        Stack&lt;NestedInteger&gt;stk=new Stack&lt;&gt;();</div><div class="line">        NestedInteger res = new NestedInteger();</div><div class="line">        int ind=1,n=s.length(),sign=1;</div><div class="line">        char []ss=s.toCharArray();</div><div class="line">        while(ind&lt;n-1) &#123;</div><div class="line">            if(ss[ind]==&apos;-&apos;)&#123;</div><div class="line">                ind++;</div><div class="line">                sign=-1;</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n-1 &amp;&amp; Character.isDigit(ss[ind]))&#123;</div><div class="line">                int num =0;</div><div class="line">                while(ind&lt;n-1 &amp;&amp; Character.isDigit(ss[ind]))&#123;</div><div class="line">                    num=10*num+(ss[ind++]-&apos;0&apos;);</div><div class="line">                &#125;</div><div class="line">                res.add(new NestedInteger(sign*num));</div><div class="line">                sign=1;</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n-1 &amp;&amp; ss[ind]==&apos;,&apos;)&#123;</div><div class="line">                ind++;</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n-1 &amp;&amp; ss[ind]==&apos;[&apos;)&#123;</div><div class="line">                stk.add(res);</div><div class="line">                res = new NestedInteger();</div><div class="line">                ind++;</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n-1 &amp;&amp; ss[ind]==&apos;]&apos; &amp;&amp; !stk.isEmpty())&#123;</div><div class="line">                NestedInteger tmp = stk.pop();</div><div class="line">                tmp.add(res);</div><div class="line">                res=tmp;</div><div class="line">                ind++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="394-Decode-String"><a href="#394-Decode-String" class="headerlink" title="394. Decode String"></a>394. Decode String</h3><p>思路： 两个stk，一个专门存数字，一个存字符串，遇到左括号就存到栈里，遇到右括号就从两个栈里弹出内容.</p>
<ul>
<li>recursive way</li>
<li>stk way</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public String decodeString(String s) &#123;</div><div class="line">        int ind=0,n = s.length();</div><div class="line">        char []ss = s.toCharArray();</div><div class="line">        Stack&lt;Integer&gt;num=new Stack&lt;&gt;();</div><div class="line">        Stack&lt;String&gt;stk=new Stack&lt;&gt;();</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        while(ind&lt;n)&#123;</div><div class="line">            if(Character.isDigit(ss[ind]))&#123;</div><div class="line">                int number = 0;</div><div class="line">                while(ind&lt;n &amp;&amp; Character.isDigit(ss[ind]))&#123;</div><div class="line">                    number=10*number+(ss[ind++]-&apos;0&apos;);</div><div class="line">                &#125;</div><div class="line">                num.push(number);</div><div class="line">            &#125;</div><div class="line">            if(ind&lt;n &amp;&amp; ss[ind]==&apos;[&apos;)&#123;</div><div class="line">                stk.push(sb.toString());</div><div class="line">                sb.setLength(0);</div><div class="line">                ind++;</div><div class="line">            &#125;else if(ind&lt;n &amp;&amp; ss[ind]==&apos;]&apos;)&#123;</div><div class="line">                StringBuilder tmp = new StringBuilder(stk.pop());</div><div class="line">                int repeat = num.pop();</div><div class="line">                while(repeat-- &gt;0)&#123;</div><div class="line">                    tmp.append(sb.toString());</div><div class="line">                &#125;</div><div class="line">                sb=tmp;</div><div class="line">                ind++;</div><div class="line">            &#125;else if(ind&lt;n)</div><div class="line">                sb.append(ss[ind++]);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="636-Exclusive-Time-of-Functions"><a href="#636-Exclusive-Time-of-Functions" class="headerlink" title="636. Exclusive Time of Functions"></a>636. Exclusive Time of Functions</h3><p>思路：遇到start就入栈，如栈的包括id，time，已被使用的时间,主要的难点是递归的话要叠加时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int[] exclusiveTime(int n, List&lt;String&gt; logs) &#123;</div><div class="line">        int []res =new int[n];</div><div class="line">        Stack&lt;int[]&gt;stk=new Stack&lt;&gt;();//first index is id, second is start time,third is gap</div><div class="line">        int cnt=0;</div><div class="line">        for(String str:logs)&#123;</div><div class="line">            String[]strs=str.split(&quot;:&quot;);</div><div class="line">            if(strs[1].equals(&quot;start&quot;))&#123;</div><div class="line">                stk.push(new int[]&#123;Integer.parseInt(strs[0]),Integer.parseInt(strs[2]),0&#125;);</div><div class="line">            &#125;else if(strs[1].equals(&quot;end&quot;))&#123;</div><div class="line">                int []top=stk.pop();</div><div class="line">                int val = Integer.parseInt(strs[2]);</div><div class="line">                res[top[0]]+=val-top[1]+1-top[2];</div><div class="line">                cnt=val-top[1]+1;</div><div class="line">                if(!stk.isEmpty())</div><div class="line">                    stk.peek()[2]+=cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="331-Verify-Preorder-Serialization-of-a-Binary-Tree"><a href="#331-Verify-Preorder-Serialization-of-a-Binary-Tree" class="headerlink" title="331. Verify Preorder Serialization of a Binary Tree"></a>331. Verify Preorder Serialization of a Binary Tree</h3><p>思路：每遇到两个##就删除，并把之前的变成#。并且要能循环处理这种情况。当然也是可以用入度，出度来做。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public boolean isValidSerialization(String preorder) &#123;</div><div class="line">        String[]args=preorder.split(&quot;,&quot;);</div><div class="line">        int n =args.length;</div><div class="line">        Stack&lt;String&gt;stk=new Stack&lt;&gt;();</div><div class="line">        for(int i=0;i&lt;=n;++i)&#123;</div><div class="line">            if(i&lt;n)&#123;</div><div class="line">                if(args[i].equals(&quot;#&quot;) &amp;&amp; !stk.isEmpty() &amp;&amp; stk.peek().equals(&quot;#&quot;))&#123;</div><div class="line">                    stk.pop();</div><div class="line">                    if(stk.isEmpty())</div><div class="line">                        return false;</div><div class="line">                    stk.pop();</div><div class="line">                    stk.push(&quot;#&quot;);</div><div class="line">                &#125;</div><div class="line">                else</div><div class="line">                    stk.push(args[i]);</div><div class="line">            &#125;</div><div class="line">            while(stk.size()&gt;=3)&#123;</div><div class="line">                    if(stk.peek().equals(&quot;#&quot;))&#123;</div><div class="line">                        String top = stk.pop();</div><div class="line">                        if(stk.peek().equals(&quot;#&quot;))&#123;</div><div class="line">                            stk.pop();</div><div class="line">                            stk.pop();</div><div class="line">                            stk.push(&quot;#&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            stk.push(top);</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line">                    &#125;else</div><div class="line">                        break;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        return stk.size()==1 &amp;&amp; stk.peek().equals(&quot;#&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">   </div><div class="line"> public boolean isValidSerializationSaveTime(String preorder)&#123;</div><div class="line">        String []args = preorder.split(&quot;,&quot;);</div><div class="line">        int diff=1;</div><div class="line">        for(String c:args)&#123;</div><div class="line">            if(--diff&lt;0)</div><div class="line">                return false;</div><div class="line">            if(!c.equals(&quot;#&quot;))//入度减1，出度加2，但是是#就不加</div><div class="line">                diff+=2;</div><div class="line">        &#125;</div><div class="line">        return diff==0;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="456-132-Pattern"><a href="#456-132-Pattern" class="headerlink" title="456 132 Pattern"></a>456 132 Pattern</h3><p>思路：有点像 334. Increasing Triplet Subsequence。注意这种不能简单的用单调栈来解决，单调栈会把数改变。我们要的是小于当前数的最大数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public boolean find132pattern(int[] nums) &#123;</div><div class="line">        Stack&lt;Integer&gt; stk=new Stack&lt;&gt;();</div><div class="line">        int n=nums.length,s3=Integer.MIN_VALUE;</div><div class="line">        for(int i=n-1;i&gt;=0;--i)&#123;</div><div class="line">            if(nums[i]&lt;s3)</div><div class="line">                return true;</div><div class="line">            while(!stk.isEmpty() &amp;&amp; stk.peek()&lt;nums[i])&#123;</div><div class="line">                s3=stk.pop();</div><div class="line">            &#125;</div><div class="line">            stk.push(nums[i]);</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Expectations"><a href="#Expectations" class="headerlink" title="Expectations"></a>Expectations</h1><hr>
<ul>
<li>本来还想修改着简历的，时间太晚了，控制不好工作量</li>
<li>做过的题要及时复习</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/aoeB7MqPXpbyvKM_UPkDlWDRTwTj8jWLBUNGkuy9ThVAYqUc82ZMLrru5Y0NBxgiXHHWP9mvMIpngZfz70c9kxJJ_oUUqdAc3NakwoTezuglU08TkBp7oOwOBZo-kdf3chzPHcgvSA" alt="三番"></p>
<hr>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[countdown]]></title>
      <url>/2017/07/16/countdown/</url>
      <content type="html"><![CDATA[<h1 id="countdown"><a href="#countdown" class="headerlink" title="countdown"></a>countdown</h1><hr>
<a id="more"></a>
<p>找全职的倒计时已经开始了，希望在接下来的日子里充分利用每一天，用blog来记录每天做了些什么。</p>
<hr>
<p><img src="https://lh3.googleusercontent.com/n21C6qCOZqVhJXgvNou1Iuxr1vlzM_8Nep0r03L-410YfJ3IhPiAW9smN4f29iTZmBI1jE3IOKc-VvbaZcfev-TJIbZP6VJXW_rc0Bk98iknrokLfTtcWMq-0-fmtYtV16DKgFWzaA" alt="加油"></p>
<hr>
]]></content>
      
        <categories>
            
            <category> review </category>
            
        </categories>
        
        
        <tags>
            
            <tag> full-time </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
